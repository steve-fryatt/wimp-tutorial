<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 29
   -
   - Internationalisation
  -->

<chapter id="chap-internat">
<resources>
<images>Chapter29</images>
<downloads>Chapter29</downloads>
</resources>
<filename>internationalisation.html</filename>
<title>Internationalisation</title>

<summary>English isn&rsquo;t the first language of all RISC&nbsp;OS users, so how can we cater for those who would prefer to use our application in a different one?</summary>

<section>
<p>Whilst English appears to be the default language for most RISC&nbsp;OS applications, a significant number of users use a different one day to day. It would clearly be desirable to allow our application to translated for use in different languages, so that even if we can&rsquo;t do it ourselves, other people can provide translations if they wish to do so.</p>

<p>Unfortunately, the system used by RISC&nbsp;OS for handling different languages dates back to the days of the BBC&nbsp;Master, and Acorn never really addressed the obvious problems with it. In addition, there was never an &lsquo;official&rsquo; way to handle different languages in an application, leading to developers each doing their own thing in the absence of any clear guidance.</p>

<p>The fundamental support for internationalising applications on RISC&nbsp;OS is provided by the International module, which allows a country, alphabet and keyboard layout to be configured for the system. However, setting the country also sets the default alphabet and keyboard layout, which immediately causes a potential problem should a user wish to type on a keyboard which isn&rsquo;t considered &lsquo;standard&rsquo; for their country.</p>

<p>In an attempt to address some of the issues, RISC&nbsp;OS&nbsp;3 introduced the Territory Manager. This added support for tailoring parts of applications for different regions, including dates, times and timezones. There are routines for converting the case of letters, comparing strings and providing information about how to represent numbers, and the standard C library makes use of some of these if <function>setlocale()</function> is called.</p>

<p>Unfortunately the system has many drawbacks, and a search of the online forums and newsgroups will quickly reveal many debates about the ways in which it should be improved. Here, we will restrict ourselves to looking at the system as it currently exists, and what an application author should do <em>now</em> to support their international users.</p>
</section>

<section>
<title>Separate resources</title>

<p>The most fundamental thing that an application can do to assist non-English speakers is to allow itself to be translated for use in other languages. Our application would currently struggle with this, however, since user-facing text such as menu entries is held as string constants within the C code itself. Changing the language would require the source code to be updated, and a different <file>!RunImage</file> to be compiled.</p>

<p>Fortunately this isn&rsquo;t necessary, and the answer lies &ndash; at least in part &ndash; in the window templates that we introduced in <reference id="chap-templates"/>. These define the look and feel of our application&rsquo;s windows, including all of the icon text: it would be possible to produce more than set of templates, in English, French, German and so on, then load the appropriate one when the application starts.</p>

<p>Whilst this doesn&rsquo;t deal with the text held inside our source code, RISC&nbsp;OS contains a module called MessageTrans which allows user-facing text to be stored in a single file and looked up as required. This makes it possible to treat all of the English text in our application in a similar way, holding it in a single <file>Messages</file> file and then providing different translations by loading a different version of the file.</p>

<p>How these different files are held within the application is something that&rsquo;s left up to individual developers, and there are many different approaches available. One, which is becoming something of a de-facto standard, is to have a folder called <file>Resources</file> within the application directory, which in turn contains separate directories holding the language-specific files for each translation. How <cite>StrongHelp</cite> handles this can be seen in <reference id="fig-internat-stronghelp"/>.</p>

<image id="fig-internat-stronghelp" file="internat-stronghelp.png" title="StrongHelp contains translations for English, French and German"/>

<p>The different files are stored in directories named <file>France</file>, <file>Germany</file> and <file>UK</file>, which all correspond to the names of countries supported by the International module. This has become something of a de-facto standard way to handle translations, and is the approach that we will be investigating here.</p>
</section>

<section>
<title>Pick a country</title>

<p>To determine which translation to use for our application, we need to read the currently configured country from the International module and use the folder corresponding to its name. To allow for the fact that we won&rsquo;t be providing translations for all the possible countries, we should fall back to a default set if a suitable folder can&rsquo;t be found. Usually this will be UK, since the vast majority of RISC&nbsp;OS applications appear to be written in English, but it&rsquo;s at the discretion of the developer &ndash; the only requirement is that the translation must exist, and be complete.</p>

<p>That&rsquo;s not the end of the story, however, because it has become something of another de-facto standard for an application to check its <variable>AppName$Language</variable> system variable first; in the case of our <cite>ExamplApp</cite>, this would be <variable>ExamplApp$Lanugage</variable>. If this is set, the contents should be treated as a country name and checked against the available resource folders first &ndash; only if it fails to match should the country and default be used. This allows the user, not to mention anyone translating the application, to easily force it to load a different set of resources on demand.</p>

<p>This isn&rsquo;t a perfect solution, however. First of all, the close links between country, alphabet and keyboard within the International module mean that there could be other reasons than just language to choose one country over another: a machine with a French keyboard attached might need to be configured for France, whatever language the user might want. In addition, languages and countries don&rsquo;t always align neatly.</p>

<p>For example, consider a French-speaking Canadian living in the UK. If they have a UK keyboard attached to their machine, they could well need to have the country set to UK to allow this to work, but might prefer to use their applications in French. RISC&nbsp;OS offers a country for Canada (in fact it offers several, to allow for the various languages spoken), but if a suitable translastion isn&rsquo;t available, then the user might well prefer to try France as well before settling on the language for which their machine is configured.</p>

<p>Alternatively, consider an Austrian who has their machine configured for Austria. In this case, their chosen country matches their language preference, but if no Austrian translation is available then software will usually fall back to UK. In most cases, our Austrian user would probably prefer that their applications offer them a translation intended for Germany first, if one is available.</p>

<p>To help solve issues like these, Olaf Krumnow and Herbert zur Nedden of the German Archimedes Group devised a system known as <link href="http://www.gag.de/software/ResFind">ResFind</link>, which has further extended the de-facto standards outlined already. Two system variables, named <variable>ResConf$LanuguagesPref</variable> and <variable>ResConf$LanguagesSuff</variable>, allow a list of countries to be specified for consideration before and after the configured country is tried. This way, a user can supply one of more countries that they would prefer to try before the one for which the machine is configured; alternatively, they can suggest a list of alternatives if their configured option isn&rsquo;t available.</p>

<p>In the case of our hypothetical Canadian, setting <variable>ResConf$LanuguagesPref</variable> to &ldquo;Canada1,France&rdquo; would cause applications which followed the <cite>ResConf</cite> approach to try Canada1, France and then the configured country of UK in their quest for translations. For the Austrian, setting <variable>ResConf$LanguagesSuff</variable> to &ldquo;Germany&rdquo; would cause applications to try the configured country of Austria before checking Germany.</p>

</section>
</chapter>
</manual>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<!-- Copyright 2020-2024, Stephen Fryatt (info@stevefryatt.org.uk)
   -
   - This file is part of Wimp Programming In C:
   -
   -   http://www.stevefryatt.org.uk/risc-os/wimp-prog
   -
   - Licensed under the EUPL, Version 1.2 only (the "Licence");
   - You may not use this work except in compliance with the
   - Licence.
   -
   - You may obtain a copy of the Licence at:
   -
   -   http://joinup.ec.europa.eu/software/page/eupl
   -
   - Unless required by applicable law or agreed to in
   - writing, software distributed under the Licence is
   - distributed on an "AS IS" basis, WITHOUT WARRANTIES
   - OR CONDITIONS OF ANY KIND, either express or implied.
   -
   - See the Licence for the specific language governing
   - permissions and limitations under the Licence.
  -->

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 17
   -
   - Creating an Application Directory
  -->

<chapter id="chap-appdir">
<resources>
<images>Chapter17</images>
<downloads>Chapter17</downloads>
</resources>
<filename>creating-an-application-directory.php</filename>
<uri>creating-an-application-directory</uri>
<title>Creating an Application Directory</title>

<summary>Applications on RISC&nbsp;OS usually come packaged in an application directory, and ours needs to follow suit.</summary>

<section>
<p>Before we can move on to look at sprite icons in any more detail, there&rsquo;s a glaring omission with our example application which needs to be fixed. So far, we&rsquo;ve just been compiling our code into an Absolute executable called <file>ExampleApp</file>, which we then run directly by double-clicking on it. This works, up to a point, but there are a few problems which so far we&rsquo;ve skirted around.</p>

<p>Almost invariably, applications on RISC&nbsp;OS come packaged in an <intro>application directory</intro>: the familiar object in a Filer window whose name starts with an exclamation mark. An application directory is just like any other directory &ndash; except that double-clicking on it doesn&rsquo;t open it up, but instead causes other things to happen.</p>
</section>

<section>
<title>Creating an application</title>

<p>Creating an application directory is surprisingly easy. First, clean the project by double-clicking on the <file>MkClean</file> TaskObey file. Next, click <mouse>Menu</mouse> over the folder, slide over <menu>New directory</menu>, enter the name &ldquo;!ExamplApp&rdquo; and press <key>Return</key>. This will create a new directory but, because the first character of the name is an exclamation mark, it automatically becomes an application directory. The project folder at this stage should look similar to that shown in <reference id="fig-appdir-folder"/>. Note that the name has been chosen to keep it within a ten character limit which still exists in some parts of the system.</p>

<image id="fig-appdir-folder" file="appdir-folder.png" title="Our project, with the new application directory"/>

<p>The next thing to do is to change the <file>Makefile</file> so that the Absolute file is built inside this new application directory. The <variable>COMPONENT</variable> variable sets the location of the output file, and this can be changed from <code>ExampleApp</code> to <code>!ExamplApp.!RunImage</code> as shown in <reference id="list-appdir-make"/>.</p>

<code lang="makefile" id="list-appdir-make" file="Makefile" title="Updated Makefile for an application directory"># Makefile for Example App

COMPONENT = !ExamplApp.!RunImage

OBJS = main ibar win

CINCLUDES = -IC:,OSLib:,SFLib:
LIBS = SFLib:o.SFLib OSLib:o.OSLib32

include CApp

C_NO_FNAMES =

# Dynamic dependencies:</code>

<p>The name <file>!RunImage</file> needs a little explanation. RISC&nbsp;OS has a number of filename conventions when working with the contents of application folders, some of which are fixed within parts of the operating system itself and some of which have just grown up over the years. It&rsquo;s conventional to call the main executable inside an application <file>!RunImage</file>, and the Filer will actually make use of this by reporting the date of the <file>!RunImage</file> file when the date of the application directory itself is requested.</p>

<p>It&rsquo;s worth noting before we progress that amongst the example skeleton build environments supplied with the DDE is one called &ldquo;exampleapp&rdquo;. Whilst this is for building applications, it takes an approach which is somewhat different to this one. Which one to use is a matter of personal taste, but the method used by this tutorial is probably the easiest to understand &ndash; as well as being suitable for most projects.</p>

<p>Our new application directory can be opened up by double-clicking on it while holding down <key>Shift</key>, which should reveal an empty directory. Double-clicking on the <file>Mk</file> TaskObey file should build the application as usual &ndash; except that the resulting Absolute file will be called <file>!RunImage</file> and placed within <file>!ExamplApp</file>. This can be seen in <reference id="fig-appdir-runimage"/>.</p>

<image id="fig-appdir-runimage" file="appdir-runimage.png" title="The project with the new !RunImage file in place"/>

<p>It&rsquo;s not the end of the story, however, because double-clicking on the <file>!ExamplApp</file> directory <em>without</em> <key>Shift</key> held down gives an error that <file>!ExamplApp.!Run</file> can&rsquo;t be found. There&rsquo;s clearly something missing!</p>
</section>

<section id="chap-appdir-runfile">
<title>The !Run file</title>

<p>When an application directory is double-clicked, the Filer will attempt to execute the <file>!Run</file> file contained within it. By convention, this file is an Obey file: which means that it contains a sequence of *&nbsp;commands which will be executed by RISC&nbsp;OS. We&rsquo;re going to add the file shown in <reference id="list-appdir-run"/>.</p>

<code lang="obey" id="list-appdir-run" file="!Run" title="Our application&rsquo;s !Run file">| !ExamplApp.!Run

RMEnsure UtilityModule 3.10 Error This application requires RISC OS 3.10 or later
RMEnsure UtilityModule 5.00 RMEnsure CallASWI 0.03 RMLoad System:Modules.CallASWI
RMEnsure UtilityModule 5.00 RMEnsure CallASWI 0.03 Error This app requires CallASWI 0.03 or later
RMEnsure FPEmulator 4.03 RMLoad System:Modules.FPEmulator
RMEnsure FPEmulator 4.03 Error This application requires FPEmulator 4.03 or later
RMEnsure SharedCLibrary 5.17 RMLoad System:Modules.CLib
RMEnsure SharedCLibrary 5.34 Error This application requires SharedCLibrary 5.34 or later

WimpSlot -min 128K -max 128K
Run &lt;Obey$Dir&gt;.!RunImage</code>

<p>The file does a number of important things which, up to this point, we&rsquo;ve been ignoring whilst crossing our fingers and hoping for the best. First are a block of <command>*RMEnsure</command> commands which should be considered as mandatory checks before launching any modern C application compiled with the DDE. The first line is:</p>

<code lang="obey">RMEnsure UtilityModule 3.10 Error This application requires RISC OS 3.10 or later</code>

<p>The <command>*RMensure</command> takes a module name and a version number and checks the system to see if that module, with the specified version or newer, is already loaded. If it isn&rsquo;t, the rest of the command is executed as a new *&nbsp;command. Here we&rsquo;re checking to see if a version of the UtilityModule is present with a version of 3.10 or better: since this module is always present in ROM and its version is the same as the installed version of RISC&nbsp;OS, this is a standard way to check the current OS version.</p>

<p>Checking the OS version is a fairly blunt tool, and one which should only be considered a &lsquo;last resort&rsquo; if no better alternative is present. In this case, however, we&rsquo;re only interested in knowing that the OS version is at least RISC&nbsp;OS&nbsp;3.1 &ndash; even Acorn considered this a &lsquo;base&rsquo; version of the OS back in the mid-1990s, and many parts of modern software simply won&rsquo;t work without it. If a suitable version of the UtilityModule isn&rsquo;t present, the <command>*Error</command> command is called to warn the user and exit.</p>

<!-- TODO Maybe swap this around, to explain the easy middle RMEnsure first, then the first, then the last...? -->

<p>The remaining <command>*RMEnsure</command> lines come in pairs, the first being:</p>

<code lang="obey">RMEnsure UtilityModule 5.00 RMEnsure CallASWI 0.03 RMLoad System:Modules.CallASWI
RMEnsure UtilityModule 5.00 RMEnsure CallASWI 0.03 Error This app requires CallASWI 0.03 or later</code>

<p>The <command>*RMEnsure</command> against the UtilityModule ensures that this pair of commands is only executed on versions of RISC&nbsp;OS <em>older</em> than RISC&nbsp;OS&nbsp;5. The first line then uses <command>*RMEnsure</command> to check for version 0.03 or better of the CallASWI module and, if it isn&rsquo;t loaded, will attempt to <command>*RMLoad</command> it from within the System Resources folder (<file>!System</file>).</p>

<p>The second line repeats the test for CallASWI version 0.03. By now this should have been loaded by the first of the two lines if required, so if it still isn&rsquo;t present then it can only mean that a suitable version of the module wasn&rsquo;t found in <file>!System</file>. As before, if the requirement can&rsquo;t be met, <command>*Error</command> is used to warn the user and exit.</p>

<p>The CallASWI module was introduced by Acorn with the StrongARM updates, and evolved to version 0.03 with the arrival of RISC&nbsp;OS&nbsp;5. It provides implementations of a handful of low-level SWI calls which are used by the DDE&rsquo;s C runtime, allowing compiled code to function the same way on all systems.</p>

<p>The next pair of lines is very similar, except that they apply to all versions of RISC&nbsp;OS and not just those older than RISC&nbsp;OS&nbsp;5:</p>

<code lang="obey">RMEnsure FPEmulator 4.03 RMLoad System:Modules.FPEmulator
RMEnsure FPEmulator 4.03 Error This application requires FPEmulator 4.03 or later</code>

<p>They check for the presence of version 4.03 of the Floating Point Emulator. Since this is also essential, because it provides all floating point number support for C applications compiled using the DDE, the lines again prevent the application from loading if a suitable version of the module can&rsquo;t be found.</p>

<p>The final pair of lines is subtly different:</p>

<code lang="obey">RMEnsure SharedCLibrary 5.17 RMLoad System:Modules.CLib
RMEnsure SharedCLibrary 5.34 Error This application requires SharedCLibrary 5.34 or later</code>

<p>Once again, they test for the presence of an essential module: this time the 32-bit Shared C Library, which provides all of the standard C libraries for code compiled using the DDE, and so must also be present. The reason for the difference in the style of test is that unlike conventional modules which make all of their services available via SWI calls, the Shared C Library provides only a handful of SWIs to allow applications to register with it. To access the C library routines that it contains, applications create a table of branches direct to the routines within the library module as part of this registration &ndash; removing the overhead of calling SWIs for each one.</p>

<p>This causes a problem, however. The first time a new version of the Shared C Library is soft-loaded, the version in ROM which it is replacing remains in place. Any applications which had previously registered with it will continue to branch to the routines in the ROM version of the module, and so will continue to run. Any applications which register after the soft-load will create their branch tables into the newer RAM version of the module, which is also OK &ndash; unless we were to then soft-load another copy of the library.</p>

<p>Unlike the first soft-load, when the ROM version remained in place by virtue of it being in ROM, any subsequent attempts to soft-load a different version of the Shared C Library will completely <em>replace</em> the previous soft-load in RAM &ndash; but in a different part of the Relocatable Module Area. This might actually be OK for a while, since RISC&nbsp;OS doesn&rsquo;t garbage collect the RMA that well, but sooner or later the memory used by the old soft-loaded module will begin to be reused by new code or data. At this point, things will go badly wrong for any applications which are still jumping directly to routines within it.</p>

<p>For this reason, it&rsquo;s dangerous to soft-load the Shared C Library twice in a session, which results in the curious test seen above. Version 5.17 was the first 32-bit version of the library, so using this as a test for loading a new copy prevents us from replacing another version of the library. We then test for the required version, and fail if it isn&rsquo;t present. The standard RISC&nbsp;OS <file>!Boot</file> structure should soft-load the current version of the Shared C Library as the machine starts, so if it isn&rsquo;t available, fixing the problem is left as an exercise for the user. It&rsquo;s better than freezing their machine without warning, however!</p>

<p>All of the items being tested for here should be considered bare minimum requirements for running an application executable compiled using a modern version of the DDE, and the tests should <em>always</em> be present in such an application&rsquo;s <file>!Run</file> file. There are ways around some of them, but those are beyond the scope of this tutorial.</p>

<code lang="obey">WimpSlot -min 128K -max 128K</code>

<p>The next line uses the <command>*WimpSlot</command> command to allocate memory for the application. Up to now, the application has been getting whatever amount of memory is currently allocated to Next in the Task Manager at the time when it is run; by specifying an amount in the <file>!Run</file> file, we can ensure that it receives what it actually requires. The <command>-min</command> and <command>-max</command> parameters can be a little counter-intuitive: if the Next slot is less than <command>-min</command> then the memory is increased to <command>-min</command>, whilst if it is greater than <command>-max</command> then it is decreased to <command>-max</command>. In general, the two values will be set the same, so that a predictable amount of memory is allocated.</p>

<code lang="obey">Run &lt;Obey$Dir&gt;.!RunImage</code>

<p>The final line is the one which actually launches the application, using the <command>*Run</command> command. The <variable>Obey$Dir</variable> system variable is set by the system to point to the directory containing the <file>!Run</file> file, which allows us to easily locate the application&rsquo;s <file>!RunImage</file> file.</p>

<p>With this new <file>!Run</file> file in place, double-clicking on the <file>!ExamplApp</file> application directory will correctly load the application on to the iconbar. In addition, we can now be confident that all of the resources necessary for the code to run will be present. A complete set of files for the modified project can be found in <reference id="dl-appdir-first"/>.</p>

<download id="dl-appdir-first" file="AppDirectory" title="The Project Converted to use an Application Directory" compatibility="none"/>
</section>

<section id="sect-appdir-sprites">
<title>An application sprite</title>

<p>Now that we have an application directory, there&rsquo;s something else that we can add to our simple application. So far, we&rsquo;ve been relying on the &lsquo;application&rsquo; sprite from the Wimp Sprite Pool for our iconbar icon as described in <reference id="chap-ibar"/>, but now we have somewhere to store our own alternative.</p>

<p>The first thing to do is to create a suitable set of sprite files. One possibility is shown in <reference id="fig-appdir-sprites"/>, but others can easily be created using Paint or a package such as <cite>ArtWorks</cite>. An application should supply at least one &lsquo;full size&rsquo; sprite with the same name as the application directory (in our case &lsquo;!examplapp&rsquo;); it can optionally supply a second &lsquo;half size&rsquo; sprite, with the same name prefixed by &lsquo;sm&rsquo; (in our case &lsquo;sm!examplapp&rsquo;).</p>

<p>The half size sprite is for use in the Filer&rsquo;s directory viewers, and is optional because if it isn&rsquo;t present, the Filer will show the full size sprite with the <name>wimp_ICON_HALF_SIZE</name> flag set (as discussed in <reference id="sect-icons-intro-sprites"/>). Supplying both sprites is desirable, because doing the scaling ourselves gives more control over the result.</p>

<image id="fig-appdir-sprites" file="appdir-sprites.png" title="The sprites to use for our application"/>

<p>Ideally, a modern application will also provide at least two sets of these full size and half size versions of its sprite: these are at different resolutions, and allow the Wimp to cater for different screen displays. As a minimum, an application should have a <file>!Sprites22</file> file containing designs in a &lsquo;square pixel&rsquo; mode, and a <file>!Sprites</file> file containing designs in a old &lsquo;rectangular pixel&rsquo; mode (such as Mode&nbsp;12 or Mode&nbsp;15). ChangeFSI &ndash; at least the version supplied in RISC&nbsp;OS&nbsp;5 &ndash; will quickly create the rectangular pixel sprites from the square pixel ones.</p>

<p>Optionally, a <file>!Sprites11</file> file can also be supplied with larger designs for use in high-resolution modes: these must also use square pixels, but should be at 180dpi instead of the more usual 90dpi that RISC&nbsp;OS defaults to. Unfortunately most graphics packages won&rsquo;t export these, but they can be created at the correct pixel size and the usual 90dpi, then have their resolution increased to 180dpi using a tool like <link href="http://www.chris-johnson.org.uk/software/dpscan.html">DPlngScan</link>. At this point, they should begin to display at their correct (smaller) dimension in Paint, and checking the sprite information there should reveal them to be at 180&nbsp;&times;&nbsp;180&nbsp;dpi.</p>

<p><reference id="table-appdir-sprite-info"/> summarises the files and their sprite sizes in pixels.</p>

<table id="table-appdir-sprite-info" title="The standard application sprite sizes in pixels">
<columns>
<col align="centre">File Name</col>
<col align="centre">Resolution</col>
<col align="centre">Full Size</col>
<col align="centre">Half Size</col>
</columns>
<row><col>!Sprites</col><col>90 &times; 45 dpi</col><col>32 &times; 16 pixels</col><col>16 &times; 8 pixels</col></row>
<row><col>!Sprites22</col><col>90 &times; 90 dpi</col><col>32 &times; 32 pixels</col><col>16 &times; 16 pixels</col></row>
<row><col>!Sprites11</col><col>180 &times; 180 dpi</col><col>64 &times; 64 pixels</col><col>32 &times; 32 pixels</col></row>
</table>

<p>Our application sprites can end up in the Wimp Sprite Pool through a couple of mechanisms. First, when the Filer first opens a folder containing our <file>ExamplApp</file> directory, it will check inside our folder (and those of any other applications alongside it) for a file called <file>!Boot</file> (that is, <file>!ExamplApp.!Boot</file>). If one is found, it will execute that file and then stop.</p>

<p>However, we don&rsquo;t have a <file>!Boot</file> file: they are used for setting up things like filetypes that an application might wish to load, and we don&rsquo;t yet care about any of that. Fortunately, if no <file>!Boot</file> is found, the system will then go on to look for a file called <file>!Sprites</file> or one of the derivatives listed above &ndash; it starts with the suffix appropriate to the current mode, then falls back to try the simple <file>!Sprites</file> if the first option fails.</p>

<p>If a suitable <file>!Sprites</file> (or <file>!Sprites22</file>, <file>!Sprites11</file>, or whatever) file is found, and is typed as &ldquo;Sprite&rdquo;, then the sprites within it will be added to the Wimp Sprite Pool ready for us to use. In our case, this means that the !examplapp and sm!examplapp sprites will be loaded.</p>

<p>It&rsquo;s also possible to explicitly load sprites into the Wimp Sprite Pool, by using the <command>*IconSprites</command> command. It&rsquo;s a good idea to do this when our application is run, just in case our sprites aren&rsquo;t already in the pool, or some other sprites with the same name are already there. We can achieve this by adding the line</p>

<code lang="obey">IconSprites &lt;Obey$Dir&gt;.!Sprites</code>

<p>to the <file>!Run</file> file. Just as when the system loaded the file for us, <command>*IconSprites</command> will try all of the suffixed versions of the filename first, before falling back to the default. If we did have a <file>!Boot</file> file, we would also need to use <command>*IconSprites</command> within that.</p>
</section>

<section id="sect-appdir-find-res">
<title>Finding our resources</title>

<p>There is one last thing that we should probably add to our <file>!Run</file> file at this stage, before moving on. We noted <reference id="chap-appdir-runfile">above</reference> that the <variable>Obey$Dir</variable> system variable was set to point to the folder containing the file, but didn&rsquo;t elaborate. In fact, this is something that the system does whenever an Obey file is executed, and it will remain set until either we reach the end of <file>!Run</file> or we call another Obey file from within it.</p>

<p>This is OK for now, but could be a problem if we needed to find our <file>!ExamplApp</file> folder again later. By then, another Obey file could have been run by the system (perhaps another application has been launched by the user), and this would clearly change <variable>Obey$Dir</variable> and lose the reference that we had been relying on. To protect against this, we can set our own system variable with the value contained in <variable>Obey$Dir</variable>, so that we can always find our way back. By convention (see <reference id="chap-appdir-allocation"/> below), we can create and use any variables whose names start with &ldquo;ExamplApp$&rdquo;, so we can add a line to our <file>!Run</file> file as follows:</p>

<code lang="obey">Set ExamplApp$Dir &lt;Obey$Dir&gt;</code>

<p>It makes sense to do this first, then use it in preference to <variable>Obey$Dir</variable> for the rest of the file. This means that we should also change the <command>*IconSprites</command> command that we added in the previous section:</p>

<code lang="obey">IconSprites &lt;ExamplApp$Dir&gt;.!Sprites</code>

<p>Combining these two changes into the file shown in <reference id="list-appdir-run"/> gives the file shown in <reference id="list-appdir-run-sprites"/>.</p>

<code lang="obey" id="list-appdir-run-sprites" file="!Run" title="Our application&rsquo;s !Run file with *IconSprites included">| !ExamplApp.!Run

RMEnsure UtilityModule 3.10 Error This application requires RISC OS 3.10 or later
RMEnsure UtilityModule 5.00 RMEnsure CallASWI 0.03 RMLoad System:Modules.CallASWI
RMEnsure UtilityModule 5.00 RMEnsure CallASWI 0.03 Error This app requires CallASWI 0.03 or later
RMEnsure FPEmulator 4.03 RMLoad System:Modules.FPEmulator
RMEnsure FPEmulator 4.03 Error This application requires FPEmulator 4.03 or later
RMEnsure SharedCLibrary 5.17 RMLoad System:Modules.CLib
RMEnsure SharedCLibrary 5.34 Error This application requires SharedCLibrary 5.34 or later

Set ExamplApp$Dir &lt;Obey$Dir&gt;

IconSprites &lt;ExamplApp$Dir&gt;.!Sprites

WimpSlot -min 128K -max 128K
Run &lt;Obey$Dir&gt;.!RunImage</code>
</section>

<section>
<title>Our sprite on the iconbar</title>

<p>Although we now have our new sprite design appearing on our application directory, we should also be using it within the application itself &ndash; not least for its iconbar icon. Fortunately, since the sprite is now in the Wimp Sprite Pool, this is extremely simple to achieve.</p>

<p>Back in <reference id="sect-report2-restructure"/>, we restructured things so that the name of the sprite used both on the iconbar and in report boxes was held in a single location. This means that using our own sprite is now just a case of amending the line near the top of <file>c.main</file> to read:</p>

<code lang="c">static char *main_application_sprite = "!examplapp";</code>

<p>With this change in place and compiled, our application will finally be able to install itself on the iconbar using its own sprite design.</p>

<image id="fig-appdir-iconbar" file="appdir-iconbar.png" title="Our application finally stands out on the iconbar"/>

<download id="dl-appdir-sprite" file="AppSprite" title="Using Our Own Application Icon" compatibility="none"/>
</section>

<section id="chap-appdir-allocation">
<title>A note about allocation</title>

<p>So far in this tutorial, we have named our application &ldquo;ExamplApp&rdquo; without any real consideration of the consequences. Until this chapter that&rsquo;s not been a problem, but now things have changed a bit: we&rsquo;ve added some sprites, with the names &ldquo;!examplapp&rdquo; and &ldquo;sm!examplapp&rdquo; into the Wimp Sprite Pool, and set an <variable>ExamplApp$Dir</variable> system variable.</p>

<p>RISC&nbsp;OS is a very &lsquo;flat&rsquo; operating system, and there is no segregation between different applications. The Wimp Sprite Pool is just a single collection of sprites shared by all of the applications on the system, and if another application tries to call itself &ldquo;ExamplApp&rdquo; then its &ldquo;!examplapp&rdquo; and &ldquo;sm!examplapp&rdquo; sprites would clash with ours. Similarly, when that other application set the <variable>ExamplApp$Dir</variable> system variable, it would overwrite whatever value we might have previously set the variable to.</p>

<p>To get around this, RISC&nbsp;OS has a system of <intro>resource allocation</intro>, which allows developers to register things like application names in a central database &ndash; ensuring that they are unique. For applications which will never leave your computer (such as our <cite>ExamplApp</cite>, one assumes), this process can be ignored. However, before sending an application to anyone else &ndash; whether that&rsquo;s emailing it to a friend or publishing it on the internet &ndash; it is <strong>essential</strong> that the name is registered.</p>

<p>Fortunately, the registration process is simple. We&rsquo;re going to walk through it here for &ldquo;ExamplApp&rdquo;, but it goes without saying that <strong>you should not actually submit the registration shown below</strong>. The name &ldquo;ExamplApp&rdquo; has already been registered on your behalf!</p>

<p>Supplied as part of the DDE is an application called <cite>Allocate</cite> &ndash; it comes in the <file>Utilities</file> folder, so if you have installed things in the standard locations it will be found inside this folder in the root of your hard disc. It allows requests for resource allocations to be assembled quickly into a form that can be emailed to the people who look after the database: once this was Acorn, but these days RISC&nbsp;OS Open are responsible for it. Remember that despite this, the database also includes software which is only intended for use on older 26-bit systems.</p>

<p>When run for the first time, <cite>Allocate</cite> will ask for some personal details (name and contact information) so that any resources allocated to you can be identified &ndash; as seen in <reference id="fig-appdir-allocate-info"/>. The <icon>Dev No.</icon> field is largely obsolete in the post-Acorn world.</p>

<image id="fig-appdir-allocate-info" file="appdir-allocate-info.png" title="Entering our details into Allocate"/>

<p>With this complete and saved for future use, <cite>Allocate</cite> will open up a <window>List of allocations</window> window as seen in <reference id="fig-appdir-allocate-name"/>.</p>

<image id="fig-appdir-allocate-name" file="appdir-allocate-name.png" title="Allocating our application name"/>

<p>We need an application name reservation for &ldquo;ExamplApp&rdquo;, so we click on <icon>Reservation</icon> and select <menu>AppName</menu> in the <icon>Type</icon> field. Enter <code>ExamplApp</code> into the <icon>Text</icon> field, and click on <icon>Add</icon>. The <window>List of allocations</window> window should update to show the allocation, as seen in <reference id="fig-appdir-allocate-result"/>. All that we now need to do is save the allocation out as a file which can be attached to an email and sent to the allocation address. See <file>!Allocate.!Help</file> for full details of the process.</p>

<image id="fig-appdir-allocate-result" file="appdir-allocate-result.png" title="Saving the allocation to disc"/>

<p>This application name reservation covers us for the <file>!ExamplApp</file> folder, the associated sprites (&ldquo;!examplapp&rdquo; and &ldquo;sm!examplapp&rdquo;) that we will put into the Wimp sprite pool, and any system variable with a name which begins with &ldquo;ExamplApp$&rdquo;.</p>

<p>Getting an allocation usually takes a week or two, so don&rsquo;t leave it until the last minute if you have a release deadline looming! A name will be refused if someone else has already claimed it, so try not to pick things which are too generic and do a bit of research first. It pays to have a backup idea in case your first request turns out not to be available.</p>

<p>Finally, don&rsquo;t be tempted to skip the process and release applications using unallocated resources on the basis that it can&rsquo;t hurt. The RISC&nbsp;OS system only works because its developers avoid clashes of resource allocations. It&rsquo;s much easier to get a safe name to start with than to have to change it afterwards when problems come to light, and much less likely to incur the wrath of users and other developers!</p>
</section>
</chapter>
</manual>

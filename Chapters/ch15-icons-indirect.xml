<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 15
   -
   - Indirected Icons
  -->

<chapter id="chap-icons-indirect">
<resources>
<images>Chapter15</images>
<downloads>Chapter15</downloads>
</resources>
<filename>indirect.html</filename>
<title>Indirected Icons</title>

<summary>Having seen the basics, it&rsquo;s time to start making icons do more complicated things.</summary>

<section>
<p>In the <reference id="chap-icons-intro">last chapter</reference> we saw how to create simple icons containing text and sprites, but were limited by the twelve character restriction on the data field. The way around this, as was hinted at the end, is to use <intro>indirected icons</intro> instead of the simple icons which we have seen up to now. As we&rsquo;ve seen, an icon&rsquo;s data consists of 12 bytes which OSLib represents as a <name>wimp_icon_data</name> union:</p>

<code lang="c">union wimp_icon_data {
	char			text[12];
	char			sprite[12];
	char			text_and_sprite[12];
	struct {
		char		*text;
		char		*validation;
		int		size;
	} indirected_text;
	struct {
		osspriteop_id	id;
		osspriteop_area	*area;
		int		size;
	} indirected_sprite;
	struct {
		char		*text;
		char		*validation;
		int		size;
	} indirected_text_and_sprite;
};</code>

<p>In a non-indirected text or sprite icon, the twelve bytes of icon data are simply used to hold up to twelve characters of either text or sprite name:</p>

<code lang="c">char			text[12];
char			sprite[12];
char			text_and_sprite[12];</code>

<p>Whilst this works, it&rsquo;s quite restrictive and doesn&rsquo;t allow for any complex messages to be displayed. There&rsquo;s also another issue: just as with windows, it isn&rsquo;t possible to change an icon&rsquo;s definition after it has been created. This means that with a simple text icon, where the text is embedded in the icon definition, it isn&rsquo;t possible to change the text once the icon has been created.</p>
</section>

<section>
<title>Indirected text icons</title>

<p>The difference with an indirected text icon is that the text itself is removed from the icon definition and placed into a separate buffer which is under the control of the application; a pointer to this buffer is then passed to the Wimp as part of the icon definition. Since the icon definition can&rsquo;t change, the buffer must remain in place &ndash; and not change location or size &ndash; for the lifetime of the icon. It can be more than 12 bytes in size, however &ndash; and its contents can be changed at ant time by simply writing new text to the buffer.</p>

<p>To make use of this, we start by creating a global text buffer, using a <name>char</name> array. It can&rsquo;t be declared locally within the <function>win_create_icon()</function> function, since this would cause it to be allocated from the stack and therefore disappear as soon as the function exits; instead, we&rsquo;ll create it as global within the <file>c.win</file> file. We&rsquo;re going to allocate 20 bytes, which is enough for 19 characters and a <code>'\0'</code> terminator.</p>

<code lang="c">#define WIN_ICON_TEXT_LEN 20

static char win_icon_text[WIN_ICON_TEXT_LEN];</code>

<p>With this buffer definition in place, we can now update <function>win_create_icon()</function> itself:</p>

<code lang="c">static wimp_i win_create_icon(void)
{
	wimp_icon_create icon_definition;

	icon_definition.w = win_handle;
	icon_definition.icon.extent.x0 = 100;
	icon_definition.icon.extent.y0 = -300;
	icon_definition.icon.extent.x1 = 500;
	icon_definition.icon.extent.y1 = -100;
	icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_INDIRECTED |
			wimp_ICON_BORDER | wimp_ICON_FILLED |
			wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
			(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
			(wimp_COLOUR_WHITE &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);

	icon_definition.icon.data.indirected_text.text = win_icon_text;
	icon_definition.icon.data.indirected_text.size = WIN_ICON_TEXT_LEN;
	icon_definition.icon.data.indirected_text.validation = &quot;&quot;;

	strncpy(win_icon_text, &quot;A Longer Icon Text&quot;, WIN_ICON_TEXT_LEN);
	win_icon_text[WIN_ICON_TEXT_LEN - 1] = '\0';

	return wimp_create_icon(&amp;icon_definition);
}</code>

<p>There are a few changes to the definition, starting with an increase in the <maths>x</maths>&nbsp;extent so that the icon spans from 100 to 500 OS&nbsp;Units. This will allow it to hold a longer piece of text.</p>

<p>We&rsquo;ve returned the icon to being a simple text icon with the <name>wimp_ICON_TEXT</name> flag set, removing the <name>wimp_ICON_SPRITE</name> flag. We have, however, now included the <name>wimp_ICON_INDIRECTED</name> flag to make the icon indirected. As a result, the code following sets up the <variable>icon_definition.icon.data.indirected_text</variable> structure within the union. OSLib defines this structure as follows:</p>

<code lang="c">struct {
	char		*text;
	char		*validation;
	int		size;
} indirected_text;</code>

<p>The <variable>indirected_text.text</variable> pointer should be set to point to the text buffer that has been set up for the icon: we set this to point to the <variable>win_icon_text[]</variable> array. The <variable>indirected_text.size</variable> element contains the size of, or number of bytes in, the buffer &ndash; we can use the <name>WIN_ICON_TEXT_LEN</name> constant used to define the size of the <variable>win_icon_text[]</variable> array.</p>

<p>The other pointer in the data, <variable>indirected_text.validation</variable>, directs the Wimp towards something called a <intro>validation string</intro>. We don&rsquo;t need this just yet, so we&rsquo;re just supplying an empty string.</p>

<p>Finally we can copy a string into our icon buffer using <function>strncpy()</function>. With indirected icons, however, the Wimp always expects the buffer&rsquo;s contents to be terminated so &ndash; just in case the supplied string was too long &ndash; we ensure that the last byte of the buffer is set to a <code>'\0'</code> character.</p>

<p>With the changes in place, the code should look that that found in <reference id="dl-icons-indirect-text"/>. We&rsquo;ve also taken the opportunity to expand the window&rsquo;s visible area to display the full extent of the wider icon.</p>

<download id="dl-icons-indirect-text" file="IndirectedTextIcon" title="Using Indirected Text in an Icon" compatibility="none"/>

<p>When compiled and run, the updated icons should look as shown in <reference id="fig-icons-indirect-text"/>.</p>

<image id="fig-icons-indirect-text" file="icons-indirect-text.png" title="Indirected text icons can hold longer messages"/>
</section>

<section>
<title>Changing the icon&rsquo;s behaviour</title>

<p>So far, all of the icons that we have created have been &lsquo;passive&rsquo; &ndash; that is, they haven&rsquo;t interacted with the user. All icons have a <intro>button type</intro>, which defines how they behave &ndash; in a similar way to the icon colours, it&rsquo;s specified by bits 12 to 15 of the icon flags:</p>

<code lang="c">#define wimp_ICON_BUTTON_TYPE_SHIFT	(12)
#define wimp_ICON_BUTTON_TYPE		((wimp_icon_flags) 0xF000u)</code>

<p>The four bits allow for up to sixteen different types of button, and the Wimp defines fourteen:</p>

<code lang="c">#define wimp_BUTTON_NEVER		((wimp_icon_flags) 0x0u)
#define wimp_BUTTON_ALWAYS		((wimp_icon_flags) 0x1u)
#define wimp_BUTTON_REPEAT		((wimp_icon_flags) 0x2u)
#define wimp_BUTTON_CLICK		((wimp_icon_flags) 0x3u)
#define wimp_BUTTON_RELEASE		((wimp_icon_flags) 0x4u)
#define wimp_BUTTON_DOUBLE_CLICK	((wimp_icon_flags) 0x5u)
#define wimp_BUTTON_CLICK_DRAG		((wimp_icon_flags) 0x6u)
#define wimp_BUTTON_RELEASE_DRAG	((wimp_icon_flags) 0x7u)
#define wimp_BUTTON_DOUBLE_DRAG		((wimp_icon_flags) 0x8u)
#define wimp_BUTTON_MENU_ICON		((wimp_icon_flags) 0x9u)
#define wimp_BUTTON_DOUBLE_CLICK_DRAG	((wimp_icon_flags) 0xAu)
#define wimp_BUTTON_RADIO		((wimp_icon_flags) 0xBu)
#define wimp_BUTTON_WRITE_CLICK_DRAG	((wimp_icon_flags) 0xEu)
#define wimp_BUTTON_WRITABLE		((wimp_icon_flags) 0xFu)</code>

<p>Up to now we haven&rsquo;t been setting the button type, which means that it has been zero &ndash; or <name>wimp_BUTTON_NEVER</name> which, as its name suggests, never does anything. Icons of this type ignore the user completely, which is ideal for things like labels in a dialogue box.</p>

<p>Many of the other button types require us to be able to process mouse clicks, which we won&rsquo;t be able to do until <reference id="chap-icons-interact">the next chapter</reference>. However, one type of icon which the wimp will handle for us is a <intro>writable icon</intro>: a field into which the user can type. Making the icon writable is simply a case of amending the icon flags to include an appropriate button type:</p>

<code lang="c">icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_INDIRECTED |
		wimp_ICON_BORDER | wimp_ICON_FILLED |
		wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
		(wimp_BUTTON_WRITE_CLICK_DRAG &lt;&lt; wimp_ICON_BUTTON_TYPE_SHIFT) |
		(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
		(wimp_COLOUR_WHITE &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);</code>

<p>Setting the button type is done in a very similar way to setting the colours: the required value is shifted into position using the constants defined by OSLib. We&rsquo;re using <name>wimp_BUTTON_WRITE_CLICK_DRAG</name> instead of <name>wimp_BUTTON_WRITABLE</name> because the latter is largely obsolete. The modified code can be found in <reference id="dl-icons-indirect-writable"/>.</p>

<download id="dl-icons-indirect-writable" file="WritableIcon" title="Creating a Writable Icon" compatibility="none"/>

<p>When compiled and run, the resulting window and icon will look exactly the same as they did in the previous example. However, clicking the mouse in the icon will cause it to gain the <intro>caret</intro>, which will then accept input from the keyboard as seen in <reference id="fig-icons-indirect-writable"/>. Since we made the icon&rsquo;s text buffer 20 bytes long by defining <name>WIN_ICON_TEXT_LEN</name>, up to 19 characters can be entered into the icon &ndash; the existing text can be deleted and replaced in the usual way, of course.</p>

<image id="fig-icons-indirect-writable" file="icons-indirect-writable.png" title="Icons can be made writable, so that the user can enter text"/>

<p>In normal use, the Wimp completely controls the user&rsquo;s interaction with writable icons for us. This makes them a powerful way to manage data entry, since the application does not have to worry about making them behave in the correct way.</p>
</section>

<section id="sect-icons-indirect-valid">
<title>Validation strings</title>

<p>The other piece of information in the icon data, <variable>indirected_text.validation</variable>, is the <intro>validation string</intro>. So far, we&rsquo;ve left this pointing to an empty string (<code>&quot;&quot;</code>), but it can be used to dramatically alter the appearance and behaviour of the icon.</p>

<p>The string can hold one or more commands to the Wimp, given in the form of almost human-readable text. Each command takes the form of a single character between <code>A</code> and <code>Z</code> (or <code>a</code> and <code>z</code>, because they&rsquo;re case insensitive) and can be followed by data. Without going into details yet, a validation string might be the letter <code>L</code>, which is an <name>L</name> command with no parameters; it could also be <code>AA-Za-z</code>, which consists of an <name>A</name> command followed by the data <code>A-Za-z</code>.</p>

<p>If more than one command is required, they can be separated by semicolons: <code>Pptr_write;Kta</code> contains the <name>P</name> and <name>K</name> commands with data of <code>ptr_write</code> and <code>ta</code> respectively. If you wish to include a semicolon in a command&rsquo;s data, it must be &lsquo;escaped&rsquo; by prefixing it with a backslash: <code>\;</code>. In total there are four special characters which must always be &lsquo;escaped&rsquo; in validation strings: <code>-</code>, <code>;</code>, <code>~</code> and <code>\</code> should always be entered <code>\-</code>,<code>\;</code>,<code>\~</code> and <code>\\</code> if you need to use them literally.</p>

<p>A full set of validation commands are listed in <reference id="table-icons-indirect-validation"/>. There are a lot of different options, but we&rsquo;ll introduce them over the coming chapters as needed.</p>

<table id="table-icons-indirect-validation" title="The validation string commands">
<columns>
<col align="centre">Command</col>
<col align="left">Action</col>
</columns>
<row><col>A</col><col>Allow Characters</col></row>
<!-- B = Interface Module's Border Type -->
<row><col>C</col><col>Set 24-bit Colours</col></row>
<row><col>D</col><col>Display Mask Character</col></row>
<row><col>F</col><col>Set Wimp Font Colours</col></row>
<row><col>K</col><col>Assign Functionality to Keys</col></row>
<row><col>L</col><col>Format the Icon Text</col></row>
<!-- M = Reserved -->
<row><col>N</col><col>Set Icon Name</col></row>
<row><col>P</col><col>Set the Pointer Shape and Active Point</col></row>
<row><col>R</col><col>3D Border Commands</col></row>
<row><col>S</col><col>Sprite Names</col></row>
<row><col>T</col><col>Tinting Sprites</col></row>
<row><col>U</col><col>Unicode Character Limit</col></row>
<row><col>X</col><col>Disable Width Calculation</col></row>
<row><col>Y</col><col>Enable Features</col></row>
<!-- Z = RISC OS 3 Border, replaced by R -->
</table>

<p>Unlike the icon text buffer, the contents of a validation string usually doesn&rsquo;t change once its icon has been created. As with the text buffers, the string <em>must</em> remain in memory as long as the icon exists, but without the need to change their contents specifying them as string constants in the code &ndash; as we&rsquo;ll be doing here &ndash; will have the required effect without the need to define a global buffer array for each one.</p>
</section>

<section>
<title>Filtering input</title>

<p>When asking the user to enter data, a common requirement is to be able to limit what characters they can type. If an application is expecting an amount of money, for example, then limiting input to the characters from 0 to 9 along with . and - might be desirable. This can be done very easily in writable icons using the <name>A</name> validation command.</p>

<p>Our icon currently contains the text &ldquo;A Longer Icon Text&rdquo;, but since it&rsquo;s writable the user can change this to anything that they can type at the keyboard: try deleting the contents and entering &ldquo;0123456789&rdquo;, for example. Suppose that we wished to restrict the user to typing the characters A to Z, in upper or lower case, plus a space? The answer is to set the validation string to include an <name>A</name> command with a suitable filter:</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;AA-Za-z &quot;;</code>

<p>The data which follows an <name>A</name> command is simply a list of allowable characters for typing into the icon. Since it&rsquo;s not uncommon to need to specify whole ranges of characters, a dash can indicate a &lsquo;range&rsquo; of characters &ndash; in this example the two sets of letters from A to Z and from a to z. Note the space at the end, to allow the spacebar to be used. If this change is made to <function>win_create_icon()</function> and the code compiled, then it will no longer be possible to type anything other than letters and spaces into the icon &ndash; try it and see!</p>

<p>What about if we wished to limit input to monetary values, as suggested above? This time we might wish to allow the user to enter a - character in case they have a negative amount to specify, but we&rsquo;ve seen that the Wimp treats this as indicating a range of characters. The answer is as follows:</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;A0-9.\-&quot;;</code>

<p>To make sure that the - is recognised, we&rsquo;ve &lsquo;escaped&rsquo; it with a backslash. Again, compile this change and try it out!</p>

<p>This time, something slightly odd should become apparent. We&rsquo;ve limited the valid characters to a set which contain the digits 0 to 9 along with - and . but the Wimp is still quite happy to initialise the icon with the contents &ldquo;A Longer Icon Text&rdquo;. The Wimp only applies the <name>A</name> command when the user tries to type into an icon, so as a developer we must always be careful to set icons up so that they comply with the restrictions that we&rsquo;ve applied!</p>

<p>Another common requirement when filtering characters is to allow everything <em>except</em> one or two letters: a common example is that it&rsquo;s not valid to enter spaces in filenames. Clearly it would be cumbersome to specify every character which was allowed, so we can use a <code>~</code> to negate options. Change the icon&rsquo;s definition as follows, and suddenly it should be possible to enter any character unless it&rsquo;s a space:</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;A~ &quot;;</code>

<p>The <code>~</code> is actually more subtle than this example suggests, however. If it&rsquo;s the first character in the data, then all of the characters which follow it are disallowed: setting the validation string to <code>&quot;A~ .&quot;</code> would allow anything <em>except</em> space and full stop. It also allows characters to be disallowed from a previous range, however: the validation string <code>&quot;AA-Za-z~dpu&quot;</code> would allow the letters from A to Z and a to z, <em>except</em> for d, p and u (although D, P and U would be OK).</p>

<p>The character ranges are completely flexible, and there's no requirement to specify complete sets of characters. For instance, to restrict input to those characters valid in a hexadecimal number, the string <code>&quot;A0-9A-F&amp;&quot;</code> could be used. This would restrict input to the digits 0 to 9, the capital letters A to F and an ampersand.</p>

<p>For completeness, the code for the first example in this section &ndash; where the icon accepted the letters A to Z, a to z and space &ndash; can be found in <reference id="dl-icons-indirect-filtered"/>.</p>

<download id="dl-icons-indirect-filtered" file="FilteredWritableIcon" title="Filtering Characters in a Writable Icon" compatibility="none"/>
</section>

<section>
<title>Behavioral improvements</title>

<p>If you&rsquo;re familiar with other <cite>Style Guide</cite> compliant applications, you&rsquo;ll probably have noticed that when the pointer passes over our icon it doesn&rsquo;t change shape to indicate that clicking over the field will place the caret. This is something that all applications should do for their writable icons, as it gives a visual clue that the icon can take input and makes the desktop more consistent for users.</p>

<p>Fortunately it&rsquo;s something that is very easy to implement, thanks to the <name>P</name> command. This takes the name of a four-colour sprite from the Wimp pool as its data, and causes the pointer to change when it passes over any icon for which it&rsquo;s specified. The Wimp provides a number of standard sprites which an application should use for the pointer whenever appropriate, including one called &ldquo;ptr_write&rdquo; which applies to writable icons. If we update the validation string to be:</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;AA-Za-z ;Pptr_write&quot;;</code>

<p>then not only will the icon only accept the letters A to Z and space, but the when the pointer passes over the icon it will change shape as the <cite>Style Guide</cite> requires. This can be seen in <reference id="fig-icons-indirect-ptr"/>.</p>

<image id="fig-icons-indirect-ptr" file="icons-indirect-ptr.png" title="Writable icons should change the mouse pointer when it&rsquo;s over them"/>

<p>Another requirement, when entering passwords or other secure information, can be to mask the characters in the icon so that they can&rsquo;t be observed by someone watching over the shoulder of the person using the computer. The <name>D</name> command allows a mask character to be specified, by including it as the data after the command. For example, to display an asterisk for each character in the icon, we could specify a validation string of <code>&quot;D*&quot;</code>; to use a dash, remembering that dashes need to be escaped in validation strings, we could use <code>&quot;D\-&quot;</code>.</p>

<p>Updating the validation string as follows should now replace the text in the icon with asterisks, as seen in <reference id="fig-icons-indirect-pwd"/>, whilst leaving the pointer change and filtering intact.</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;AA-Za-z ;Pptr_write;D*&quot;;</code>

<p>Note that despite the display mask, the <variable>win_icon_text</variable> text buffer still contains the actual characters entered into the icon. This enables applications to handle the entry of passwords easily &ndash; although it&rsquo;s worth bearing in mind that the &lsquo;hidden&rsquo; information will still be in memory, and therefore potentially readable by malicious software.</p>

<image id="fig-icons-indirect-pwd" file="icons-indirect-pwd.png" title="A display mask allows the contents of an icon to be hidden"/>
</section>

<section>
<title>Changing the formatting</title>

<p>Up to now our icon has been resolutely two-dimensional, with a simple single-pixel border around the outside. Whilst this is the default, the RISC&nbsp;OS convention has been to use a 3D appearance in windows and dialogue boxes for some time now. This aspect of an icon&rsquo;s appearance is controlled by the <name>R</name> command, which takes a numeric parameter indicating the kind of border which we require.</p>

<p>The seven effects on offer are shown in <reference id="fig-icons-indirect-borders"/>, and cover the usual range of window components. Borders 1 to 4 are &lsquo;static&rsquo; ones: the <cite>Style Guide</cite> encourages the use of border&nbsp;2 for display fields and border&nbsp;4 for grouping parts of a dialogue box together. Border&nbsp;1 can be useful for creating things like column headings in tables; Border&nbsp;3 doesn&rsquo;t tend to be used that often. Although it isn&rsquo;t obvious in a screenshot, borders 5 and 6 are &lsquo;dynamic&rsquo; &ndash; they can be made to &lsquo;click&rsquo; under the mouse, and are useful for things like <icon>OK</icon> and <icon>Cancel</icon> buttons. Border&nbsp;7 was intended for writable icons, but never made it in to the <cite>Style Guide</cite> and so shouldn&rsquo;t be used.</p>

<image id="fig-icons-indirect-borders" file="icons-indirect-borders.png" title="A range of 3D icon borders are available"/>

<p>To make use of a 3D border, we can start by returning the icon to a simple <name>wimp_BUTTON_NEVER</name> button type suitable for a display field. The backgrounds of 3D icons are always <name>wimp_COLOUR_VERY_LIGHT_GREY</name> &ndash; of course they <em>can</em> be other colours, but following the <cite>Style Guide</cite> is encouraged. This results in setting the icon&rsquo;s flags as follows:</p>

<code lang="c">icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_INDIRECTED |
		wimp_ICON_BORDER | wimp_ICON_FILLED |
		wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
		(wimp_BUTTON_NEVER &lt;&lt; wimp_ICON_BUTTON_TYPE_SHIFT) |
		(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
		(wimp_COLOUR_VERY_LIGHT_GREY &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);</code>

<p>The icon&rsquo;s validation string can also be updated. We no longer need to control the characters which can be entered by the user since the icon isn&rsquo;t writable any more; similarly it should no longer affect the mouse pointer or use a display mask. This means that the <name>A</name>, <name>P</name> and <name>D</name> commands from the last section can be removed, to be replaced by an <name>R</name> command requesting a &lsquo;type&nbsp;2&rsquo; border:</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;R2&quot;;</code>

<p>If these two changes are applied to <function>win_create_icon()</function> and the code recompiled, the result should be the window seen in <reference id="fig-icons-indirect-display"/>.</p>

<image id="fig-icons-indirect-display" file="icons-indirect-display.png" title="Using a type 2 border to create a display field"/>

<p>There&rsquo;s one final change we can make before moving on to make our window and icon interact with the user. So far, the text that we&rsquo;ve used has fitted into the width of the icon, but what happens if it doesn&rsquo;t? First, increase the size of the buffer that we&rsquo;re allocating near the top of <file>c.win</file>.</p>

<code lang="c">#define WIN_ICON_TEXT_LEN 50</code>

<p>With a bit more space to play with, we can now display a longer message in the icon:</p>

<code lang="c">strncpy(win_icon_text, &quot;The Quick Brown Fox Jumps Over The Lazy Dog&quot;, WIN_ICON_TEXT_LEN);</code>

<p>If this code is compiled and run, the text is too long to fit in the available space and the result can be seen in <reference id="fig-icons-indirect-long"/>. The text is clipped to fit the available width but &ndash; even though the icon has the <name>wimp_ICON_HCENTRED</name> flag specified &ndash; the Wimp has right-justified the contents so that the end of the text is visible. This is intended behaviour: the aim is to ensure that the significant end of things like filenames remains visible.</p>

<image id="fig-icons-indirect-long" file="icons-indirect-long.png" title="The Wimp usually clips text to fit within the icon&rsquo;s area"/>

<p>However, by using the <name>L</name> command, the Wimp can be made to wrap the text on to additional lines as required. If the validation string is updated to</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;R2;L&quot;;</code>

<p>then the effect can be seen in <reference id="fig-icons-indirect-wrap"/>. By default, <name>L</name> takes no data; if the Nested Wimp is present, however, it can take a single number representing the required line spacing in OS&nbsp;Units. This isn&rsquo;t often that useful; should it be required, we&rsquo;ll find out more about the Nested Wimp in a later chapter. Support for text wrapping is fairly limited: it can&rsquo;t be used in writable icons, for example.</p>

<image id="fig-icons-indirect-wrap" file="icons-indirect-wrap.png" title="Icons can be made to warp the text within them"/>

<p>The code of this final example can be found in <reference id="dl-icons-indirect-display"/>.</p>

<download id="dl-icons-indirect-display" file="WrapDisplayIcon" title="Displaying and Wrapping Text in an Icon" compatibility="none"/>
</section>

<section id="sect-icons-indirect-window">
<title>Window titles as icons</title>

<p>Back in <reference id="sect-window-theory-loose-ends"/> we glossed over two aspects of the <name>wimp_window</name> structure holding our window definition. Specifically, we noted that the following lines of code set up the window title, but didn&rsquo;t really explain <em>how</em> they did so.</p>

<code lang="c">window_definition.title_flags = wimp_ICON_TEXT |
		wimp_ICON_BORDER | wimp_ICON_HCENTRED |
		wimp_ICON_VCENTRED | wimp_ICON_FILLED;
strncpy(window_definition.title_data.text, &quot;Hello World!&quot;, 12);</code>

<p>With the benefit of the knowledge gained in this chapter and <reference id="chap-icons-intro">the last one</reference>, it should be obvious that this is a <name>wimp_icon</name> definition without the extent. In fact, <variable>window_definition.title_flags</variable> is a set of <name>wimp_icon_flags</name>, while <variable>window_definition.title_data</variable> is the by now familiar <name>wimp_icon_data</name> union.</p>

<p>Given that the title bar is embedded in the window, there are some restrictions on what can be done. The <name>wimp_ICON_TEXT</name>, <name>wimp_ICON_SPRITE</name> and <name>wimp_ICON_INDIRECTED</name> flags all work, but in practice etiquette dictates that title bars should never contain sprites: indirected and non-indirected text are the only sensible options. We can also set the <name>wimp_ICON_HCENTRED</name>, <name>wimp_ICON_VCENTRED</name> and <name>wimp_ICON_RJUSTIFIED</name> flags, but again convention says that a title bar&rsquo;s contents should <em>always</em> be horizontally and vertically centred.</p>

<p>The Wimp treats the <name>wimp_ICON_FILLED</name> and <name>wimp_ICON_BORDER</name> flags as always being set: the bar must always be filled and have a border, whether or not the flags are included. The foreground and background colour fields in the flags are ignored, since the values are held in the <variable>wimp_window.title_fg</variable> and <variable>wimp_window.title_bg</variable> elements of the window definition structure. With the exception of outline fonts &ndash; which we haven&rsquo;t yet met and shouldn&rsquo;t be used in a title bar anyway &ndash; none of the other features of the icon flags will work in a title bar.</p>

<p>Since the title bar is only ever going to be a text icon in the majority of applications, its data will either be held in the <variable>window_definition.title_data.text[]</variable> array or the <variable>window_definition.title_data.indirected_text</variable> structure. These both behave in exactly the same way as for any other icon.</p>

<p>That&rsquo;s it for &lsquo;passive&rsquo; icons &ndash; in the <reference id="chap-icons-interact">next chapter</reference> we&rsquo;ll begin to make our window react to the user. In the meantime, it&rsquo;s a good idea to experiment with the icon code that we&rsquo;ve met so far, to make sure that everything makes sense before we move on.</p>
</section>
</chapter>
</manual>

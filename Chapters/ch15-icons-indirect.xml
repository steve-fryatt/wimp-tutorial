<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 15
   -
   - Indirected Icons
  -->

<chapter id="chap-icons-indirect">
<resources>
<images>Chapter15</images>
<downloads>Chapter15</downloads>
</resources>
<filename>indirect.html</filename>
<title>Indirected Icons</title>

<summary>Having seen the basics, it&rsquo;s time to start making icons do more complicated things.</summary>

<section>
<p>In the <reference id="chap-icons-intro">last chapter</reference> we saw how to create simple icons containing text and sprites, but were limited by the twelve character restriction on the data field. The way around this, as was hinted at the end, is to use <intro>indirected icons</intro> instead of the simple icons which we have seen up to now. As we&rsquo;ve seen, an icon&rsquo;s data consists of 12 bytes which OSLib represents as a <name>wimp_icon_data</name> union:</p>

<code lang="c">union wimp_icon_data {
	char			text[12];
	char			sprite[12];
	char			text_and_sprite[12];
	struct {
		char		*text;
		char		*validation;
		int		size;
	} indirected_text;
	struct {
		osspriteop_id	id;
		osspriteop_area	*area;
		int		size;
	} indirected_sprite;
	struct {
		char		*text;
		char		*validation;
		int		size;
	} indirected_text_and_sprite;
};</code>

<p>In a non-indirected text or sprite icon, the twelve bytes of icon data are simply used to hold up to twelve characters of either text or sprite name:</p>

<code lang="c">char			text[12];
char			sprite[12];
char			text_and_sprite[12];</code>

<p>Whilst this works, it&rsquo;s quite restrictive and doesn&rsquo;t allow for any complex messages to be displayed. There&rsquo;s also another issue: just as with windows, it isn&rsquo;t possible to change an icon&rsquo;s definition after it has been created. This means that with a simple text icon, where the text is embedded in the icon definition, it isn&rsquo;t possible to change the text once the icon has been created.</p>
</section>

<section>
<title>Indirected text icons</title>

<p>The difference with an indirected text icon is that the text itself is removed from the icon definition and placed into a separate buffer which is under the control of the application; a pointer to this buffer is then passed to the Wimp as part of the icon definition. Since the icon definition can&rsquo;t change, the buffer must remain in place &ndash; and not change location or size &ndash; for the lifetime of the icon. It can be more than 12 bytes in size, however &ndash; and it can be changed at ant time by simply writing next text to the buffer.</p>

<p>To make use of this, we start by creating a global text buffer, using a <name>char</name> array. It can&rsquo;t be declared locally within the <function>win_create_icon()</function> function, since this would cause it to be allocated from the stack and therefore disappear as soon as the function exits; instead, we&rsquo;ll create it as global within the <file>c.win</file> file. We&rsquo;re going to allocate 20 bytes, which is enough for 19 characters and a <code>'\0'</code> terminator.</p>

<code lang="c">#define WIN_ICON_TEXT_LEN 20

static char win_icon_text[WIN_ICON_TEXT_LEN];</code>

<p>With this buffer definition in place, we can now update <function>win_create_icon()</function> itself:</p>

<code lang="c">static wimp_i win_create_icon(void)
{
	wimp_icon_create icon_definition;

	icon_definition.w = win_handle;
	icon_definition.icon.extent.x0 = 100;
	icon_definition.icon.extent.y0 = -300;
	icon_definition.icon.extent.x1 = 500;
	icon_definition.icon.extent.y1 = -100;
	icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_INDIRECTED |
			wimp_ICON_BORDER | wimp_ICON_FILLED |
			wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
			(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
			(wimp_COLOUR_WHITE &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);

	icon_definition.icon.data.indirected_text.text = win_icon_text;
	icon_definition.icon.data.indirected_text.size = WIN_ICON_TEXT_LEN;
	icon_definition.icon.data.indirected_text.validation = &quot;&quot;;

	strncpy(win_icon_text, &quot;A Longer Icon Text&quot;, WIN_ICON_TEXT_LEN);
	win_icon_text[WIN_ICON_TEXT_LEN - 1] = '\0';

	return wimp_create_icon(&amp;icon_definition);
}</code>

<p>There are a few changes to the definition, starting with an increase in the <maths>x</maths>&nbsp;extent so that the icon spans from 100 to 500 OS&nbsp;Units. This will allow it to hold a longer piece of text.</p>

<p>We&rsquo;ve returned the icon to being a simple text icon with the <name>wimp_ICON_TEXT</name> flag set, removing the <name>wimp_ICON_SPRITE</name> flag. We have, however, now included the <name>wimp_ICON_INDIRECTED</name> flag to make the icon indirected. As a result, the code following sets up the <variable>icon_definition.icon.data.indirected_text</variable> structure within the union. OSLib defines this structure as follows:</p>

<code lang="c">struct {
	char		*text;
	char		*validation;
	int		size;
} indirected_text;</code>

<p>The <variable>indirected_text.text</variable> pointer should be set to point to the text buffer that has been set up for the icon: we set this to point to the <variable>win_icon_text[]</variable> array. The <variable>indirected_text.size</variable> element contains the size of, or number of bytes in, the buffer &ndash; we can use the <name>WIN_ICON_TEXT_LEN</name> constant used to define the size of the <variable>win_icon_text[]</variable> array.</p>

<p>The other pointer in the data, <variable>indirected_text.validation</variable>, directs the Wimp towards something called a <intro>validation string</intro>. We don&rsquo;t need this just yet, so we&rsquo;re just supplying an empty string.</p>

<p>Finally we can copy a string into our icon buffer using <function>strncpy()</function>. With indirected icons, however, the Wimp always expects the buffer&rsquo;s contents to be terminated so &ndash; just in case the supplied string was too long &ndash; we ensure that the last byte of the buffer is set to a <code>'\0'</code> character.</p>

<p>With the changes in place, the code should look that that found in <reference id="dl-icons-indirect-text"/>. We&rsquo;ve also taken the opportunity to expand the window&rsquo;s visible area to display the full extent of the wider icon.</p>

<download id="dl-icons-indirect-text" file="IndirectedTextIcon" title="Using Indirected Text in an Icon" compatibility="none"/>

<p>When compiled and run, the updated icons should look as shown in <reference id="fig-icons-indirect-text"/>.</p>

<image id="fig-icons-indirect-text" file="icons-indirect-text.png" title="Indirected text icons can hold longer messages"/>
</section>

<section>
<title>Changing the icon&rsquo;s behaviour</title>

<p>So far, all of the icons that we have created have been &lsquo;passive&rsquo; &ndash; that is, they haven&rsquo;t interacted with the user. All icons have a <intro>button type</intro>, which defines how they behave &ndash; in a similar way to the icon colours, it&rsquo;s specified by bits 12 to 15 of the icon flags:</p>

<code lang="c">#define wimp_ICON_BUTTON_TYPE_SHIFT	(12)
#define wimp_ICON_BUTTON_TYPE		((wimp_icon_flags) 0xF000u)</code>

<p>The four bits allow for up to sixteen different types of button, and the Wimp defines fourteen:</p>

<code lang="c">#define wimp_BUTTON_NEVER		((wimp_icon_flags) 0x0u)
#define wimp_BUTTON_ALWAYS		((wimp_icon_flags) 0x1u)
#define wimp_BUTTON_REPEAT		((wimp_icon_flags) 0x2u)
#define wimp_BUTTON_CLICK		((wimp_icon_flags) 0x3u)
#define wimp_BUTTON_RELEASE		((wimp_icon_flags) 0x4u)
#define wimp_BUTTON_DOUBLE_CLICK	((wimp_icon_flags) 0x5u)
#define wimp_BUTTON_CLICK_DRAG		((wimp_icon_flags) 0x6u)
#define wimp_BUTTON_RELEASE_DRAG	((wimp_icon_flags) 0x7u)
#define wimp_BUTTON_DOUBLE_DRAG		((wimp_icon_flags) 0x8u)
#define wimp_BUTTON_MENU_ICON		((wimp_icon_flags) 0x9u)
#define wimp_BUTTON_DOUBLE_CLICK_DRAG	((wimp_icon_flags) 0xAu)
#define wimp_BUTTON_RADIO		((wimp_icon_flags) 0xBu)
#define wimp_BUTTON_WRITE_CLICK_DRAG	((wimp_icon_flags) 0xEu)
#define wimp_BUTTON_WRITABLE		((wimp_icon_flags) 0xFu)</code>

<p>Up to now we haven&rsquo;t been setting the button type, which means that it has been zero &ndash; or <name>wimp_BUTTON_NEVER</name> which, as its name suggests, never does anything. Icons of this type ignore the user completely, which is ideal for things like labels in a dialogue box.</p>

<p>Many of the other button types require us to be able to process mouse clicks, which we won&rsquo;t be able to do for another few chapters. However, one type of icon which the wimp will handle for us is a <intro>writable icon</intro>: a field into which the user can type. Making the icon writable is simply a case of amending the icon flags to include an appropriate button type:</p>

<code lang="c">icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_INDIRECTED |
		wimp_ICON_BORDER | wimp_ICON_FILLED |
		wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
		(wimp_BUTTON_WRITE_CLICK_DRAG &lt;&lt; wimp_ICON_BUTTON_TYPE_SHIFT) |
		(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
		(wimp_COLOUR_WHITE &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);</code>

<p>Setting the button type is done in a very similar way to setting the colours: the required value is shifted into position using the constants defined by OSLib. We&rsquo;re using <name>wimp_BUTTON_WRITE_CLICK_DRAG</name> instead of <name>wimp_BUTTON_WRITABLE</name> because the latter is largely obsolete. The modified code can be found in <reference id="dl-icons-indirect-writable"/>.</p>

<download id="dl-icons-indirect-writable" file="WritableIcon" title="Creating a Writable Icon" compatibility="none"/>

<p>When compiled and run, the resulting window and icon will look exactly the same as they did in the previous example. However, clicking the mouse in the icon will cause it to gain the <intro>caret</intro>, which will then accept input from the keyboard as seen in <reference id="fig-icons-indirect-writable"/>. Since we made the icon&rsquo;s text buffer 20 bytes long by defining <name>WIN_ICON_TEXT_LEN</name>, up to 19 characters can be entered into the icon &ndash; the existing text can be deleted and replaced in the usual way, of course.</p>

<image id="fig-icons-indirect-writable" file="icons-indirect-writable.png" title="Icons can be made writable, so that the user can enter text"/>

<p>In normal use, the Wimp completely controls the user&rsquo;s interaction with writable icons for us. This makes them a powerful way to manage data entry, since the application does not have to worry about making them behave in the correct way.</p>
</section>

<section id="sect-icons-indirect-valid">
<title>Validation strings</title>

<p>The other piece of information in the icon data, <variable>indirected_text.validation</variable>, is the <intro>validation string</intro>. So far, we&rsquo;ve left this pointing to an empty string (<code>&quot;&quot;</code>), but it can be used to dramatically alter the appearance and behaviour of the icon.</p>

<p>The string can hold one or more commands to the Wimp, given in the form of almost human-readable text. Each command takes the form of a single character between <code>A</code> and <code>Z</code> (or <code>a</code> and <code>z</code>, because they&rsquo;re case insensitive) and can be followed by data. Without going into details yet, a validation string might be the letter <code>L</code>, which is an <name>L</name> command with no parameters; it could also be <code>AA-Za-z</code>, which consists of an <name>A</name> command followed by the data <code>A-Za-z</code>.</p>

<p>If more than one command is required, they can be separated by semicolons: <code>Pptr_write;Kta</code> contains the <name>P</name> and <name>K</name> commands with data <code>ptr_write</code> and <code>ta</code> respectively. If you wish to include a semicolon in a command&rsquo;s data, it must be &lsquo;escaped&rsquo; by prefixing it with a backslash: <code>\;</code>. In total there are four special characters which must always be &lsquo;escaped&rsquo; in validation strings: <code>-</code>, <code>;</code>, <code>~</code> and <code>\</code> should always be entered <code>\-</code>,<code>\;</code>,<code>\~</code> and <code>\\</code> if you need to use them literally.</p>

<p>A full set of validation commands are listed in <reference id="table-icons-indirect-validation"/>. There are a lot of different options, but we&rsquo;ll introduce them over the coming chapters as needed.</p>

<table id="table-icons-indirect-validation" title="The validation string commands">
<columns>
<col align="centre">Command</col>
<col align="left">Action</col>
</columns>
<row><col>A</col><col>Allow Characters</col></row>
<!-- B = Interface Module's Border Type -->
<row><col>C</col><col>Set 24-bit Colours</col></row>
<row><col>D</col><col>Display Mask Character</col></row>
<row><col>F</col><col>Set Wimp Font Colours</col></row>
<row><col>K</col><col>Assign Functionality to Keys</col></row>
<row><col>L</col><col>Format the Icon Text</col></row>
<!-- M = Reserved -->
<row><col>N</col><col>Set Icon Name</col></row>
<row><col>P</col><col>Set the Pointer Shape and Active Point</col></row>
<row><col>R</col><col>3D Border Commands</col></row>
<row><col>S</col><col>Sprite Names</col></row>
<row><col>T</col><col>Tinting Sprites</col></row>
<row><col>U</col><col>Unicode Character Limit</col></row>
<row><col>X</col><col>Disable Width Calculation</col></row>
<row><col>Y</col><col>Enable Features</col></row>
<!-- Z = RISC OS 3 Border, replaced by R -->
</table>

<p>Unlike the icon text buffer, the contents of a validation string usually doesn&rsquo;t change once its icon has been created. As with the text buffers, the string <em>must</em> remain in memory as long as the icon exists, but without the need to change their contents specifying them as string constants in the code &ndash; as we&rsquo;ll be doing here &ndash; will have the required effect without the need to define a global buffer array for each one.</p>
</section>

<section>
<title>Filtering input</title>

<p>When asking the user to enter data, a common requirement is to be able to limit what characters they can type. If an application is expecting an amount of money, for example, then limiting input to the characters from 0 to 9 along with . and - might be desirable. This can be done very easily in writable icons using the <name>A</name> validation command.</p>

<p>Our icon currently contains the text &ldquo;A Longer Icon Text&rdquo;, but since it&rsquo;s writable the user can change this to anything that they can type at the keyboard: try deleting the contents and entering &ldquo;0123456789&rdquo;, for example. Suppose that we wished to restrict the user to typing the characters A to Z, in upper or lower case, plus a space? The answer is to set the validation string to include an <name>A</name> command with a suitable filter:</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;AA-Za-z &quot;;</code>

<p>The data which follows an <name>A</name> command is simply a list of allowable characters for typing into the icon. Since it&rsquo;s not uncommon to need to specify whole ranges of characters, a <code>-</code> can indicate a &lsquo;range&rsquo; of characters &ndash; in this example the two sets of letters from A to Z and from a to z. Note the space at the end, to allow the spacebar to be used. If this change is made to <function>win_create_icon()</function> and the code compiled, then it will no longer be possible to type anything other than letters and spaces into the icon &ndash; try it and see!</p>

<p>What about if we wished to limit input to monetary values, as suggested above? This time we might wish to allow the user to enter a - character in case they have a negative amount to specify, but we&rsquo;ve seen that the Wimp treats this as indicating a range of characters. The answer is as follows:</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;A0-9.\-&quot;;</code>

<p>To make sure that the - is recognised, we&rsquo;ve &lsquo;escaped&rsquo; it with a backslash. Again, compile this change and try it out!</p>

<p>This time, something slightly odd should become apparent. We&rsquo;ve limited the valid characters to a set which contain the digits 0 to 9 along with - and . but the Wimp is still quite happy to initialise the icon with the contents &ldquo;A Longer Icon Text&rdquo;. The Wimp only applies the <name>A</name> command when the user tries to type into an icon, so as a developer we must always be careful to set icons up so that they comply with the restrictions that we&rsquo;ve applied!</p>

<p>Another common requirement when filtering characters is to allow everything <em>except</em> one or two letters: a common example is that it&rsquo;s not valid to enter spaces in filenames. Clearly it would be cumbersome to specify every character which was allowed, so we can use a <code>~</code> to negate options. Change the icon&rsquo;s definition as follows, and suddenly it should be possible to enter any character unless it&rsquo;s a space:</p>

<code lang="c">icon_definition.icon.data.indirected_text.validation = &quot;A~ &quot;;</code>

<p>The <code>~</code> is actually more subtle than this example suggests, however. If it&rsquo;s the first character in the data, then all of the characters which follow it are disallowed: setting the validation string to <code>&quot;A~ .&quot;</code> would allow anything except space and full stop. It also allows characters to be disallowed from a previous range, however: the validation string <code>&quot;AA-Za-z~dpu&quot;</code> would allow the letters from A to Z and a to z, <em>except</em> for d, p and u (although D, P and U would be OK).</p>

<p>The character ranges are completely flexible, and there's no requirement to specify complete sets of characters. For instance, to restrict input to those characters valid in a hexadecimal number, the string <code>&quot;A0-9A-F&amp;&quot;</code> could be used. This would restrict input to the digits 0 to 9, the capital letters A to F and an ampersand.</p>
</section>

<section>
<title>Icon text formatting</title>

<!-- Start to write about validation strings. P, D & L. -->







<!--





#define wimp_ICON_ANTI_ALIASED		((wimp_icon_flags) 0x40u)
#define wimp_ICON_NEEDS_HELP		((wimp_icon_flags) 0x80u)

#define wimp_ICON_ESG_SHIFT		(16)
#define wimp_ICON_ESG			((wimp_icon_flags) 0x1F0000u)
      /*shift ESG bits by Wimp_IconESGShift*/
#define wimp_ICON_ALLOW_ADJUST		((wimp_icon_flags) 0x400u)

#define wimp_ICON_SELECTED		((wimp_icon_flags) 0x200000u)
#define wimp_ICON_SHADED		((wimp_icon_flags) 0x400000u)
#define wimp_ICON_DELETED		((wimp_icon_flags) 0x800000u)

#define wimp_ICON_FONT_HANDLE_SHIFT	(24)
#define wimp_ICON_FONT_HANDLE		((wimp_icon_flags) 0xFF000000u)
      /*shift Font Handle bits by Wimp_IconFontHandleShift*/
      
      
      
 


-->



</section>
</chapter>
</manual>

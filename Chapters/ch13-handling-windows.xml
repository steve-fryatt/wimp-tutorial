<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 13
   -
   - Handing Windows
  -->

<chapter id="chap-window-handling">
<resources>
<images>Chapter13</images>
<downloads>Chapter13</downloads>
</resources>
<filename>winhandle.html</filename>
<title>Handling Windows</title>

<summary>Manipulating windows isn&rsquo;t too difficult, but there are a few things to get to grips with.</summary>

<section>
<p>In the <reference id="chap-window-theory">last chapter</reference>, we saw how to assemble a <name>wimp_window</name> structure in order to create a new window. Whilst this was used practically in <reference id="chap-windows"/>, we now need to consider how the various SWIs provided by the Wimp for handling windows actually work.</p>
</section>

<section>
<title>Window Definitions</title>

<p>As we&rsquo;ve seen, creating a window on RISC &nbsp;OS is simply a case of filling in a <name>wimp_window</name> structure and then passing a pointer to it to <swi>Wimp_CreateWindow</swi> so that it can be processed. The SWI uses the contents of the block as instructions for creating our new window, then returns us a <name>wimp_w</name> window handle for it. Whilst the process is simple, there are a couple of points which might not be immediately obvious about what&rsquo;s happening behind the scenes.</p>

<p>In <reference id="list-windows-win-c"/>, the code we used to create the window was as follows:</p>

<code lang="c">void win_initialise(void)
{
	wimp_window window_definition;

	window_definition.visible.x0 = 200;
	window_definition.visible.y0 = 200;
	window_definition.visible.x1 = 600;
	window_definition.visible.y1 = 600;
	window_definition.xscroll = 0;
	window_definition.yscroll = 0;
	window_definition.next = wimp_TOP;

	/* The values above this point aren't directly used by the Wimp */

	window_definition.flags = wimp_WINDOW_NEW_FORMAT |
			wimp_WINDOW_MOVEABLE | wimp_WINDOW_AUTO_REDRAW |
			wimp_WINDOW_BOUNDED_ONCE | wimp_WINDOW_BACK_ICON |
			wimp_WINDOW_CLOSE_ICON | wimp_WINDOW_TITLE_ICON |
			wimp_WINDOW_TOGGLE_ICON | wimp_WINDOW_VSCROLL |
			wimp_WINDOW_SIZE_ICON | wimp_WINDOW_HSCROLL;
	window_definition.title_fg = wimp_COLOUR_BLACK;
	window_definition.title_bg = wimp_COLOUR_LIGHT_GREY;
	window_definition.work_fg = wimp_COLOUR_BLACK;
	window_definition.work_bg = wimp_COLOUR_VERY_LIGHT_GREY;
	window_definition.scroll_outer = wimp_COLOUR_MID_LIGHT_GREY;
	window_definition.scroll_inner = wimp_COLOUR_VERY_LIGHT_GREY;
	window_definition.highlight_bg = wimp_COLOUR_CREAM;
	window_definition.extra_flags = 0;
	window_definition.extent.x0 = 0;
	window_definition.extent.y0 = -1200;
	window_definition.extent.x1 = 1200;
	window_definition.extent.y1 = 0;
	window_definition.title_flags = wimp_ICON_TEXT |
			wimp_ICON_BORDER | wimp_ICON_HCENTRED |
			wimp_ICON_VCENTRED | wimp_ICON_FILLED;
	window_definition.work_flags = wimp_BUTTON_NEVER &lt;&lt; wimp_ICON_BUTTON_TYPE_SHIFT;
	window_definition.sprite_area = wimpspriteop_AREA;
	window_definition.xmin = 0;
	window_definition.ymin = 0;
	strncpy(window_definition.title_data.text, &quot;Hello World!&quot;, 12);
	window_definition.icon_count = 0;

	win_handle = wimp_create_window(&amp;window_definition);
}</code>

<p>The first thing to realise is that, for all its complexity, the <name>wimp_window</name> structure is only needed up to the stage where a pointer to it is passed to <function>wimp_create_window()</function>. By the time the SWI has returned a new <name>wimp_w</name> handle for the window, it has copied the contents of the <name>wimp_window</name> block away into its own workspace and the block itself is no longer required.</p>

<p>We can actually see this in the code above, since <variable>window_definition</variable> is is being defined as a local variable within the <function>win_initialise()</function> function. The compiler will take the memory needed for local variables from the stack and so as a result, when the function exits, the whole <name>wimp_window</name> structure will disappear. The important thing is, this doesn&rsquo;t matter: by the time the variable vanishes, the Wimp already has its own copy of everything that it requires!</p>

<p>One side effect of this is that the Wimp doesn&rsquo;t care if we pass it a pointer to the same window definition more than once. The block is just a set of instructions for how to create the window, not the window itself: if we want two identical windows for some reason &ndash; and multi-document editors, to name just one example, often do &ndash; the Wimp doesn&rsquo;t mind if we re-use the same instructions each time. Regardless of where the information came from, each window created will be a completely separate entity with its own <name>wimp_w</name> handle.</p>

<p>The second thing to realise is that the data in the block falls into two distinct sections, which have been identified in the example above by a comment. The values set below the command &ndash; from <variable>window_definition.flags</variable> to <variable>window_definition.icon_count</variable> &ndash; are taken away by the Wimp and used to define the look and feel of the new window. Once a window has been created, there&rsquo;s no way to change its window flags, colours, sprite area or title bar definition. We can change the work area extent, but only by using a SWI dedicated to that purpose.</p>

<p>In contrast, the values set above the comment &ndash; from <variable>window_definition.visible</variable> to <variable>window_definition.next</variable> &ndash; aren&rsquo;t actually used by the Wimp at all. It stores them and makes them available to us, but it never actually uses them itself. To see why, we need to consider what we need to do to get this new, but currently invisible, window open on the desktop.</p>
</section>

<section>
<title>Opening Windows</title>

<p>As we&rsquo;ve seen, <swi>Wimp_CreateWindow</swi> doesn&rsquo;t put a window on the desktop: instead, it merely creates the window internally in the Wimp and allocates it a <name>wimp_w</name> window handle. At this point the window can be considered <intro>closed</intro>, and it will be necessary to <intro>open</intro> it in order to make it available to the user.</p>

<p>Opening a window is done by calling the <swi>Wimp_OpenWindow</swi>, which opens &ndash; or re-opens &ndash; a window on screen. In OSLib, the <function>wimp_open_window()</function> function is defined as follows:</p>

<code lang="c">extern void wimp_open_window(
	wimp_open *open
);</code>

<p>The SWI takes a single parameter, which is a pointer to a <name>wimp_open</name> structure. This structure, in turn, is defined as:</p>

<code lang="c">struct wimp_open {
	wimp_w	w;
	os_box	visible;
	int	xscroll;
	int	yscroll;
	wimp_w	next;
};</code>

<p>The information required by <function>wimp_open_window()</function> includes the visible area of the window (the screen coordinates of the bottom-left and top-right corners), the <maths>x</maths> and <maths>y</maths> scroll offsets, and the position of the window in the window stack. Between them, these pieces of information completely define the position of the window on screen: whether it is moved by dragging the title bar, resized with the resize button, has another window opened in front of it, or has its contents scrolled, the information contained in the <name>wimp_open</name> structure will completely describe its new state.</p>

<p>This is why the remit of the <swi>Wimp_OpenWindow</swi> is much wider than it might at first appear. It does include the obvious action of opening a previously closed window, but in fact the Wimp&rsquo;s idea of &ldquo;opening&rdquo; includes <em>any</em> occasion when a parameter contained in the <name>wimp_open</name> structure changes. In fact, as we saw in <reference id="chap-windows"/>, these attributes of a window <em>can&rsquo;t</em> change unless the application calls <swi>Wimp_OpenWindow</swi>: our window was initially immovable until our code responded to the <name>Open_Window_Request</name> events being sent by the Wimp.</p>

<p>In the case that we&rsquo;re responding to a <name>Open_Window_Request</name> event, working out what to put into the <name>wimp_open</name> structure is made easier because the Wimp supplies a structure of its own along with the event, containing what <em>it</em> thinks the values should be. The application can change the values, or &ndash; more usually &ndash; perform other actions based on what those values are, before passing them on to <function>wimp_open_window()</function>, but in many cases the code that we saw in <reference id="dl-window-open-handler"/> is all that&rsquo;s required:</p>

<code lang="c">static void win_open_window_request(wimp_open *open)
{
	wimp_open_window(open);
}</code>

<p>In practice, an application built around SFLib would use the default method, seen in <reference id="dl-window-dflt-handler"/>, for handling the events. Either way, the necessary code isn&rsquo;t complicated, because the Wimp does the hard work for us.</p>

<p>Harder to work out is what to fill the <name>wimp_open</name> structure with when we wish to open a window which is currently closed. There&rsquo;s no <name>Open_Window_Request</name> event to give us a hint, but in fact the Wimp can still help. Comparing the contents of the <name>wimp_open</name> structure with the definition of <name>wimp_window</name> (which was given in the <reference id="chap-window-theory">last chapter</reference>) should reveal that, aside from the <name>wimp_w</name> window handle <variable>w</variable> at the top of the <name>wimp_open</name> structure, it is identical to the first part of a window definition.</p>

<p>We said that the Wimp never used these values from the <name>wimp_window</name> structure directly, but it <em>does</em> store them away for future reference when the structure is passed to <swi>Wimp_CreateWindow</swi> and then update them every time <swi>Wimp_OpenWindow</swi> is called for the window. At any time, whether the window is open or closed, the application can request the current set of data from the Wimp using the <swi>Wimp_GetWindowState</swi> SWI. In OSLib, this is defined as:</p>

<code lang="c">extern void wimp_get_window_state(
	wimp_window_state *state
);</code>

<p>It takes a single parameter, which is a pointer to a <name>wimp_window_state</name> structure:</p>

<code lang="c">struct wimp_window_state {
	wimp_w			w;
	os_box			visible;
	int			xscroll;
	int			yscroll;
	wimp_w			next;
	wimp_window_flags	flags;
};</code>

<p>As with a lot of Wimp SWIs which take a pointer to a parameter structure, we need to fill some details into the structure before making the call. In the case of <function>wimp_get_window_state()</function>, the window handle <variable>w</variable> must be inserted, so that the Wimp knows which window to return the details for. In our application, we&rsquo;re calling it as follows:</p>

<code lang="c">void win_open(void)
{
	wimp_window_state state;

	state.w = win_handle;
	wimp_get_window_state(&amp;state);
	state.next = wimp_TOP;
	wimp_open_window((wimp_open *) &amp;state);
}</code>

<p>The <name>wimp_window_state</name> structure is identical to the <name>wimp_open</name> structure, except for the additional <variable>flags</variable> at the end. This means that we&rsquo;re safe to cast the <variable>state</variable> from <name>wimp_window_state</name> to <name>wimp_open</name> in order to pass it to <function>wimp_open_window()</function>, as the Wimp will simply ignore the additional data in the structure.</p>
</section>

<section>
<title>Changing Where Our Window Opens</title>

<p>Every time a window is opened with <swi>Wimp_OpenWindow</swi>, the Wimp stores the new position away ready for it to be returned if <swi>Wimp_GetWindowState</swi> is called. In fact we can see this in action very easily: open our application&rsquo;s window, drag it to a new location, then close it. If the window is re-opened with another <mouse>Select</mouse> click on the iconbar, it will appear in the last location that it was in before it closed. This happens because the call to <function>wimp_get_window_state()</function> retrieves the most recently saved values, which our application then passes on to <function>wimp_open_window()</function>.</p>

<p>The values put into the <name>wimp_window_state</name> structure by the Wimp are only suggestions, of course: we&rsquo;re free to change them as we wish, and in fact we&rsquo;re already doing so to some extent. Between retrieveing the values and passing them on to <swi>Wimp_OpenWindow</swi>, there&rsquo;s the following line:</p>

<code lang="c">state.next = wimp_TOP;</code>

<p>This resets the window&rsquo;s position in the <intro>window stack</intro>, so that it always opens up at the top of the pile. It&rsquo;s a common thing to do, as it usually makes most sense to put a newly-opened window on the top of the pile so that the user can see it. In fact, <swi>Wimp_OpenWindow</swi> accepts three special values for <variable>next</variable>, which OSLib defines as follows:</p>

<code lang="c">#define wimp_TOP	((wimp_w) 0xFFFFFFFFu)
#define wimp_BOTTOM	((wimp_w) 0xFFFFFFFEu)
#define wimp_HIDDEN	((wimp_w) 0xFFFFFFFDu)</code>

<p>We&rsquo;ve seen that <name>wimp_TOP</name> will cause the window to be opened above every other window that&rsquo;s open on the desktop and, as one might expect, <name>wimp_BOTTOM</name> causes it to be opened at the <em>bottom</em> of the pile, just above the Pinboard. The third special location is <name>wimp_HIDDEN</name>, which requests that the window be opened but not visible to the user: this is a bit specialised, and unlikely to be of much use to us at present.</p>

<p>As well as these three special values, <variable>next</variable> can take any <name>wimp_w</name> window handle: if one is used, it will cause our window to open <em>behind</em> that window. This isn&rsquo;t something that we often need to use directly, but the Wimp uses it whenever it sends an <name>Open_Window_Request</name> to our application: unless the window is at the top of the window stack, the <name>wimp_open</name> structure which arrives with the event will have the handle filled in for the window directly above our in the stack. Perhaps surprisingly, this handle can be for a window belonging to <em>any</em> running application: it doesn&rsquo;t have to belong to our application.</p>

<p>In the same way, it&rsquo;s also possible to change the visible area of the window before opening it, in order to enable it to appear on screen in a sensible place. Exactly what &ldquo;sensible&rdquo; means will depend on the sort of window that we&rsquo;re opening: the <cite>Style Guide</cite> requires new editor windows to open centred on the screen, while dialogue boxes might open centred on the pointer. In this case we&rsquo;ll centre the window on the screen.</p>

<p>In order to centre a window on the screen, we need to know the screen dimensions. RISC&nbsp;OS makes this information available to us through the <swi>OS_ReadModeVariable</swi> SWI and, if we <code>#include &quot;sflib/general.h&quot;</code> then SFLib makes the <function>general_mode_width()</function> and <function>general_mode_height()</function> functions. These are defined within SFLib like this:</p>

<code lang="c">#include &quot;oslib/os.h&quot;

int general_mode_width(void)
{
	int width, shift;

	os_read_mode_variable(os_CURRENT_MODE, os_MODEVAR_XWIND_LIMIT, &amp;width);
	os_read_mode_variable(os_CURRENT_MODE, os_MODEVAR_XEIG_FACTOR, &amp;shift);

	return (width &lt;&lt; shift);
}

int general_mode_height(void)
{
	int height, shift;

	os_read_mode_variable(os_CURRENT_MODE, os_MODEVAR_YWIND_LIMIT, &amp;height);
	os_read_mode_variable(os_CURRENT_MODE, os_MODEVAR_YEIG_FACTOR, &amp;shift);

	return (height &lt;&lt; shift);
}</code>

<p>Each function returns one screen dimension in OS&nbsp;Units, and &ndash; armed with these &ndash; we can then change the <function>win_open()</function> function as follows:</p>

<code lang="c">void win_open(void)
{
	wimp_window_state	state;
	int			width, height;

	state.w = win_handle;
	wimp_get_window_state(&amp;state);

	width = state.visible.x1 - state.visible.x0;
	height = state.visible.y1 - state.visible.y0;

	state.visible.x0 = (general_mode_width() - width) / 2;
	state.visible.y0 = (general_mode_height() - height) / 2;

	state.visible.x1 = state.visible.x0 + width;
	state.visible.y1 = state.visible.y0 + height;

	state.next = wimp_TOP;

	wimp_open_window((wimp_open *) &amp;state);
}</code>

<p>As before, the function starts by requesting the window state from the Wimp via <swi>Wimp_GetWindowState</swi>. However its next step is to work out the window&rsquo;s width and height by subtracting the <maths>x0</maths> coordinate from <maths>x1</maths> and the <maths>y0</maths> coordinate from <maths>y1</maths> respectively. With these values safely stored in the <variable>width</variable> and <variable>height</variable> variables, <variable>x0</variable> and <variable>y0</variable> can then be set such that the window&rsquo;s visible area appears centred on the screen. Finally, <variable>x1</variable> and <variable>y1</variable> can be updated so that the overall width and height of the visible area remains unchanged.</p>

<p>A full set of modified code can be found in <reference id="dl-handling-windows-centre"/>: when compiled and run, the application&rsquo;s window should always open at the centre of the desktop. Slightly confusingly, it also jumps back to the centre if it is already open when <mouse>Select</mouse> is clicked on the iconbar icon; this isn&rsquo;t really good behaviour, and we&rsquo;ll sort that out next.</p>

<download id="dl-handling-windows-centre" file="OpenAtCentre" title="Open the Window Centred on the Desktop" compatibility="none"/>
</section>

<section>
<title>Getting Information About A Window</title>

<p>Along with the information required by <function>wimp_open_window()</function>, <function>wimp_get_window_state()</function> returns the window&rsquo;s flags in the <name>wimp_window_state</name> structure. The reason for this isn&rsquo;t to remind us of how we defined the window, but because in addition to the flags discussed in the <reference id="chap-window-theory">last chapter</reference>, which we set before calling <swi>Wimp_CreateWindow</swi>, there are a group of flags which the Wimp keeps updated to tell us about the current state of the window. These can be read using <swi>Wimp_GetWindowState</swi>, and are defined in OSLib as follows:</p>

<code lang="c">#define wimp_WINDOW_OPEN		((wimp_window_flags) 0x10000u)
#define wimp_WINDOW_NOT_COVERED		((wimp_window_flags) 0x20000u)
#define wimp_WINDOW_FULL_SIZE		((wimp_window_flags) 0x40000u)
#define wimp_WINDOW_TOGGLED		((wimp_window_flags) 0x80000u)
#define wimp_WINDOW_HAS_FOCUS		((wimp_window_flags) 0x100000u)
#define wimp_WINDOW_BOUNDED_ONCE	((wimp_window_flags) 0x200000u)
#define wimp_WINDOW_PARTIAL_SIZE	((wimp_window_flags) 0x400000u)
	/*Window at full size, not obscuring iconbar - WindowManager 3.98+*/</code>

<p>Some of the flags describe simple aspects of the window&rsquo;s state. The <name>wimp_WINDOW_OPEN</name> flag is set if the window is open on screen, while <name>wimp_WINDOW_HAS_FOCUS</name> indicates that it has <intro>input focus</intro> &ndash; that keyboard input will be directed to it. If <name>wimp_WINDOW_NOT_COVERED</name> is set, we know that there are no other windows on top of ours.</p>

<!-- Remaining flags relate to the Toggle Size operation. -->

<p>Whilst all of these flags are useful in certain circumstances, the most common one for an application to read is probably <name>wimp_WINDOW_OPEN</name>. In the last section, when we updated the <function>win_open()</function> to open the window in the centre of the screen, we noticed that making the window jump back to its opening position if the icon was clicked while it was open. This is confusing, and in fact while suggesting that an application&rsquo;s main window opens at the centre of the screen, the <cite>Style Guide</cite> also suggests that if the window is already open, a click on the iconbar icon should simply bring the window to the top of the window stack.</p>

<p>Fortunately, this is really easy to do in <function>win_open()</function>. The function already calls <function>wimp_get_window_state()</function> to retrieve the window&rsquo;s position details, and the <name>wimp_window_state</name> structure contains the window flags. We can therefore make the code that resets the window&rsquo;s position to the centre of the screen condition on the window not being open:</p>

<code lang="c">void win_open(void)
{
	wimp_window_state	state;
	int			width, height;

	state.w = win_handle;
	wimp_get_window_state(&amp;state);

	if (!(state.flags &amp; wimp_WINDOW_OPEN)) {
		width = state.visible.x1 - state.visible.x0;
		height = state.visible.y1 - state.visible.y0;

		state.visible.x0 = (general_mode_width() - width) / 2;
		state.visible.y0 = (general_mode_height() - height) / 2;

		state.visible.x1 = state.visible.x0 + width;
		state.visible.y1 = state.visible.y0 + height;
	}

	state.next = wimp_TOP;

	wimp_open_window((wimp_open *) &amp;state);
}</code>

<p>The updated code can be found in <reference id="dl-handling-windows-re-centre"/>, and if this is tried, <mouse>Select</mouse> clicks on the iconbar icon should seem a lot more &lsquo;normal&rsquo;.</p>

<download id="dl-handling-windows-re-centre" file="ReopenAtCentre" title="Open the Window Centred on the Desktop" compatibility="none"/>

<p>One slight curiosity still remains: while the window returns to the centre of the screen whenever it is opened, the size of its visible area is remembered from when it was closed. To see this in action, open the window, change its size with the resize icon, close it, then finally open it again with another <mouse>Select</mouse> click on the iconbar icon. The effect happens because we calculate the <variable>width</variable> and <variable>height</variable> variables from the visible area returned by <swi>Wimp_GetWindowState</swi> &ndash; which, of course, remembers where the window was when it was last closed.</p>

<p>If we wished to reset the window&rsquo;s visible area each time it is opened up, we could always replace the two lines</p>

<code lang="c">width = state.visible.x1 - state.visible.x0;
height = state.visible.y1 - state.visible.y0;</code>

<p>with the simpler</p>

<code lang="c">width = 400;
height = 400;</code>

<p>This isn&rsquo;t ideal, however. It means that we&rsquo;re now setting the visible area of the window in the <function>win_initialise()</function> as part of the original definition passed to <swi>Wimp_CreateWindow</swi>:</p>

<code lang="c">window_definition.visible.x0 = 200;
window_definition.visible.y0 = 200;
window_definition.visible.x1 = 600;
window_definition.visible.y1 = 600;</code>

<p>This is then ignored, to be replaced completely by the values <code>400</code> in the <function>win_open()</function>. Duplicating values like this is never good, as it can lead to confusion when the code is revisited later on. A better solution would be to create two new global variables at the top of the file to hold the initial width and height of the window:</p>

<code lang="c">static int win_width, win_height;</code>

<p>These can then be set in the <function>win_initialise()</function> function, after the <variable>window_definition</variable> structure has been filled in, using the same calculation that was in the <function>win_open()</function> function:</p>

<code lang="c">win_width = window_definition.visible.x1 - window_definition.visible.x0;
win_height = window_definition.visible.y1 - window_definition.visible.y0;</code>

<p>Finally, the conditional code in <function>win_open()</function> can change to use the new global <variable>win_width</variable> and <variable>win_height</variable> variables:</p>

<code lang="c">if (!(state.flags &amp; wimp_WINDOW_OPEN)) {
	state.visible.x0 = (general_mode_width() - win_width) / 2;
	state.visible.y0 = (general_mode_height() - win_height) / 2;

	state.visible.x1 = state.visible.x0 + win_width;
	state.visible.y1 = state.visible.y0 + win_height;
}</code>

<p>Now the window will always return to its initial dimensions when it is closed and then re-opened. The full set of modifications to the code can be found in <reference id="dl-handling-windows-restore"/>.</p>

<download id="dl-handling-windows-restore" file="RestoreAtCentre" title="Open the Window at its Original Size" compatibility="none"/>
</section>

<section>
<title>Closing and Deleting Windows</title>

<p>Closing a window is the exact opposite of opening it with <swi>Wimp_OpenWindow</swi>: it is remoced from view on the desktop, whilst retaining both its <name>wimp_w</name> window handle and the associated record in the Wimp&rsquo;s list of known windows. Effectively closing a window puts it back into a similar state to that which it was in just after <swi>Wimp_CreateWindow</swi> was called &ndash; except that any changes made since then will be retained.</p>

<p>Windows are closed using the <swi>Wimp_CloseWindow</swi> SWI, but unlike its counterparts for opening windows, it&rsquo;s a much simpler affair. OSLib defines it as:</p>

<code lang="c">extern void wimp_close_window(
	wimp_w	w
);</code>

<p>The only parameter required is a <name>wimp_w</name> window handle: the one belonging to the window that is to be closed. If the window is being closed in response to a <name>Close_Window_Request</name> event from <swi>Wimp_Poll</swi>, the Wimp supplies us the handle inside the <name>wimp_close</name> structure that comes with the event; at other times, it&rsquo;s assumed that we know which window &ndash; and hence window handle &ndash; is to be closed.</p>

<p>Closing a window does <em>not</em> delete it from the Wimp&rsquo;s list of windows. In fact, to completely remove a window from the Wimp&rsquo;s &lsquo;memory&rsquo; it is necessary to use the <swi>Wimp_DeleteWindow</swi> SWI &ndash; in the same way that <swi>Wimp_OpenWindow</swi> and <swi>Wimp_CloseWindow</swi> form a pair, <swi>Wimp_DeleteWindow</swi> is the opposite number to <swi>Wimp_CreateWindow</swi>.</p>

<p>As with <swi>Wimp_CloseWindow</swi>, <swi>Wimp_DeleteWindow</swi> takes a single parameter consisting of the window handle for the window to be deleted:</p>

<code lang="c">extern void wimp_delete_window(
	wimp_w	w
};</code>

<p>At present, the main reason for knowing about <swi>Wimp_DeleteWindow</swi> is to clarify the status of windows closed with <swi>Wimp_CloseWindow</swi>. It&rsquo;s rare for simple applications to need to delete windows, as there&rsquo;s no problem closing and then re-opening a window as many times as required. In fact, when <swi>Wimp_CloseDown</swi> is called as an application exits (as our example does in the <function>main_terminate()</function> function, any remaining windows will be closed and then deleted without any specific action needing to be taken to do it.</p>
</section>


<!--

we&rsquo;ll just take a quick aside. One reason why the Wimp asks applications to close their own windows is that they might wish to do something else at the same time. When a wordprocessor&rsquo;s window closes, for instance, it might need to free up the space taken by the document that has just been discarded. A simple application like ours might wish to exit completely, and this is actually very simple to see in action by amending <code>case wimp_CLOSE_WINDOW_REQUEST</code> in the <code>switch</code> statement above.</p>

<code lang="c">case wimp_CLOSE_WINDOW_REQUEST:
	wimp_close_window(blk.close.w);
	main_quit_flag = TRUE;
	break;</code>

<p>When the <name>Close_Window_Request</name> event is received, the <variable>main_quit_flag</variable> variable is set to <name>TRUE</name> and the application will exit. Note that because this is in the default handler, it would also affect any other windows that our application might define in the future &ndash; which might not be what we intend!</p>
-->



<!--

<p>The <function>wimp_open_window()</function> function takes a pointer to a <name>wimp_open</name> structure; these are defined by OSLib like this:</p>

<code lang="c">extern void wimp_open_window(
	wimp_open *open
);

struct wimp_open {
	wimp_w	w;
	os_box	visible;
	int	xscroll;
	int	yscroll;
	wimp_w	next;
};</code>



<p>Whenever the Wimp wants us to call <swi>Wimp_OpenWindow</swi>, it will request it by sending our application an <name>Open_Window_Request</name> event via <swi>Wimp_Poll</swi>. Fortunately, it also tells us how it thinks the window should be opened, and in the vast majority of cases this will be exactly what we want to happen as well.</p>




-->




</chapter>
</manual>


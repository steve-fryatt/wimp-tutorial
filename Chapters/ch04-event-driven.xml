<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 4
   -
   - Event Driven Programming
  -->

<chapter id="chap-event-driven">
<resources>
<images>Chapter04</images>
<downloads>Chapter04</downloads>
</resources>
<filename>events.html</filename>
<title>Event Driven Programming</title>

<summary>The RISC&nbsp;OS Wimp is essentially an event-driven environment, so why don&rsquo;t we take advantage of that?</summary>

<section>
<p>Our first foray into programming the Wimp in C (see <reference id="list2-1"/>) followed the very BASIC-like approach of repeatedly polling the Wimp inside a <code>while</code> loop and processing the resulting reason codes in a <code>switch</code> statement. While it worked, it&rsquo;s not very well structured: apart from anything else, the entire application is contained inside the single <function>main()</function> function!</p>
</section>

<section>
<title>Modular code</title>

<p>The first thing to do is to take the code from <reference id="list2-1"/> and re-write it in a slightly more modular form. This isn&rsquo;t essential at this stage, but it will help to keep things clear as we go on and add more features. It results in the code seen in <reference id="list4-1"/>.</p>

<code id="list4-1" lang="c" file="main.c" title="Restructuring the code to use functions">/**
 * Example 4.1
 *
 * (c) Stephen Fryatt, 2015.
 *
 * File: main.c
 */

#include &quot;oslib/wimp.h&quot;

/* Global Variables */

static osbool main_quit_flag = FALSE;

/* Function Prototypes */

static void main_initialise(void);
static void main_poll(void);
static void main_terminate(void);

/* Main code entry point. */

int main(int argc, char *argv[])
{
	main_initialise();
	main_poll();
	main_terminate();

	return 0;
}

/* Global application initialisation. */

static void main_initialise(void)
{
	wimp_initialise(wimp_VERSION_RO3, &quot;Example App&quot;, NULL, NULL);
}

/* Wimp_Poll loop. */

static void main_poll(void)
{
	wimp_block	block;
	wimp_event_no	reason;

	while (!main_quit_flag) {
		reason = wimp_poll(wimp_MASK_NULL |
			 wimp_MASK_ENTERING | wimp_MASK_LEAVING |
			 wimp_MASK_GAIN | wimp_MASK_LOSE |
			 wimp_MASK_POLLWORD, &amp;block, NULL);

		switch (reason) {
		case wimp_USER_MESSAGE:
		case wimp_USER_MESSAGE_RECORDED:
			if (block.message.action == message_QUIT)
				main_quit_flag = TRUE;
			break;
		}
	}
}

/* Global application termination. */

static void main_terminate(void)
{
	wimp_close_down(0);
}</code>

<p>While very similar to its predecessor, there&rsquo;s now an initialisation, poll and termination routine, which breaks the code up into logical chunks. Each has a name starting with <code>main_</code> &ndash; this isn&rsquo;t essential, but will help us to keep track of where things are when the code grows. The <function>main()</function> itself simply calls these routines.</p>

<p>A copy of the modified code can be found in <reference id="dl4-1"/>. It should compile in exactly the same way as <reference id="dl3-1"/>.</p>

<download id="dl4-1" file="SimpleCApp2" title="A Simple C Application Version 2" compatibility="none"/>
</section>

<section>
<title>Routing events</title>

<p>There was another problem with <reference id="list2-1"/>, however, which is still present in <reference id="list4-1"/> and will become more obvious as the application develops: the <code>switch</code> statement following <function>wimp_poll()</function> will need to know about every single piece of the application in order to pass control on to the correct parts. For now that&rsquo;s not much of an issue, but as more features are added to our application it will soon become one.</p>

<p>This is a common problem in BASIC, and many applications will be centred around a <code>CASE</code> statement similar to the one in below (don&rsquo;t worry about what the different <code>WHEN</code> clauses actually do).</p>

<code lang="bbcbasic" title="A BASIC Wimp_Poll loop">DEF PROCpoll
LOCAL reason%

SYS &quot;Wimp_Poll&quot;, &amp;3831, b%, TO reason%

CASE reason% OF
	WHEN 1		: PROCredraw_handler(b%)
	WHEN 2		: SYS &quot;Wimp_OpenWindow&quot;,,b%
	WHEN 3		: SYS &quot;Wimp_CloseWindow&quot;,,b%
	WHEN 6		: PROCmouse_click_handler(b%)
	WHEN 8		: PROCkeypress_handler(b%)
	WHEN 9		: PROCmenu_selection_handler(b%)
	WHEN 17, 18	: PROCwimp_message_handler(b%)
	WHEN 19		: PROCbounced_message_handler(b%)
ENDCASE
ENDPROC</code>

<p>Each of those procedures will very likely contain another <code>CASE</code> statement, which in turn will have calls to procedures in every part of the program. While this is fine for the un-modular BBC&nbsp;BASIC, it makes it difficult to break the code up into self-contained chunks &ndash; one of the advantages of moving to C.</p>

<p>Anyone who has ever written software for other windowing systems &ndash; especially those that use so-called &lsquo;visual&rsquo; development environments &ndash; will be familiar with the concept of event-driven programming. An action button can have a function associated with it, which gets called whenever the user clicks on the button; windows can have functions which are called whenever they are moved or require redrawing.</p>

<p>While it&rsquo;s relatively simple for beginners &ndash; and open to abuse &ndash; the approach does have advantages. These &lsquo;event handlers&rsquo; can be self-contained, and often don&rsquo;t need to be known about outside of the code that they relate to; this makes it possible to write extremely modular code, which can be much easier to update and maintain.</p>

<p>The RISC&nbsp;OS Wimp is also event-driven, although to a casual observer &ndash; especially one working in BASIC &ndash; it&rsquo;s quite well hidden. With the exception, perhaps, of <name>Null_Reason</name>, the information returned by <swi>Wimp_Poll</swi> is a series of events: a <name>Mouse_Click</name> could be an event destined for an action button in a window somewhere, while <name>Redraw_Window_Request</name> is an indication that a window wishes to be redrawn.</p>

<p>The <code>while</code> loop contained in <function>main_poll()</function> in <reference id="list4-1"/> does in fact contain an event handler &ndash; in the <code>switch</code> statement here.</p>

<code lang="c">switch (reason) {
case wimp_USER_MESSAGE:
case wimp_USER_MESSAGE_RECORDED:
	if (block.message.action == message_QUIT)
		main_quit_flag = TRUE;
	break;
}</code>

<p>The handler processes events coming in with reason codes of <name>User_Message</name> and <name>User_Message_Recorded</name>, when the action is <name>Message_Quit</name>. If these conditions are all met, the code <code>main_quit_flag = TRUE</code> is executed &ndash; making this an event handler for <name>Message_Quit</name> when it arrives as one of the two forms of user message.</p>
</section>


<section>
<title>Event Dispatch</title>
<p>It&rsquo;s not a great leap to go from here to full event handlers, but it will require assistance from a third-party library. Over the years, several libraries have been written which include a Wimp event dispatcher &ndash; which to use is a matter of personal preference and this guide will be sticking to SFLib (and in turn OSLib) throughout.</p>

<p>Once all of the test for reason and message action codes have been removed, the routine above can be re-packaged as an event handler function.</p>

<code lang="c">static osbool main_message_quit(wimp_message *message)
{
	main_quit_flag = TRUE;

	return TRUE;
}</code>

<p>This shows the standard form of a message event handler for use with SFLib: it takes a single parameter <code>wimp_message *message</code>, which is a pointer to the message block that arrived from <swi>Wimp_Poll</swi>, and will be called whenever a <message>Message_Quit</message> is received by the application. The function returns <name>TRUE</name> to let SFLib know that the message has been handled: we&rsquo;ll see why when we look at messages in more detail later on.</p>

<p>To let SFLib&rsquo;s event library know that this hander exists, we can add a line to <function>main_initialise()</function> to register it.</p>

<code lang="c">event_add_message_handler(message_QUIT, EVENT_MESSAGE_INCOMING, main_message_quit);</code>

<p>This call to <function>event_add_message_handler()</function> lets the event dispatcher know that <function>main_message_quit()</function> is interested in receiving details of <message>Message_Quit</message> &ndash; it&rsquo;s only possible to specify one message, but the same handler can be registered multiple times (with different messages in each) if required. <name>EVENT_MESSAGE_INCOMING</name> indicates that the handler is interested in messages arriving by both the <name>User_Message</name> and <name>User_Message_Recorded</name> events &ndash; again, we&rsquo;ll explain this properly later on.</p>

<p>It&rsquo;s this call to <function>event_add_message_handler()</function> which replaces the tests in the original <code>switch</code> statement: the event dispatcher won&rsquo;t pass the event to <function>main_message_quit()</function> unless the exact requirements are met.</p>

<p>The other thing that we need to do is to make the event dispatcher aware of events arriving from <swi>Wimp_Poll</swi>, so that it can pass them on. We do this by changing the main polling loop to pass details of the incoming events on to the dispatcher.</p>

<code lang="c">static void main_poll(void)
{
	wimp_block	blk;
	wimp_event_no	reason;
	int		pollword;

	while (!main_quit_flag) {
		reason = wimp_poll(wimp_MASK_NULL, &amp;blk, &amp;pollword);

		event_process_event(reason, &amp;blk, pollword);
	}
}</code>

<p>Now, instead of passing incoming reason codes to a <code>switch</code> statement, they&rsquo;re passed directly to the event library. Internally this will use a similar approach to determine where events should end up &ndash; but it does this without us having to worry about it. The code here isn&rsquo;t quite the full story &ndash; we&rsquo;ll add the additional bits when they&rsquo;re required in a later example.</p>

<p>Finally, we need to add a reference to SFLib&rsquo;s event library: we do this by adding a suitable <code>#include</code> to the top of the file to make the functions available to us.</p>

<code lang="c">#include "oslib/wimp.h"
#include "sflib/event.h"</code>

<p>Putting this all together results in the code found in <reference id="list4-2"/>, which should perform exactly the same as <reference id="list4-1"/> when run.</p>

<code id="list4-2" lang="c" file="main.c" title="Using the event dispatcher">/**
 * Example 4.2
 *
 * (c) Stephen Fryatt, 2015.
 *
 * File: main.c
 */

#include &quot;oslib/wimp.h&quot;
#include &quot;sflib/event.h&quot;

/* Global Variables */

static osbool main_quit_flag = FALSE;

/* Function Prototypes */

static void main_initialise(void);
static void main_poll(void);
static void main_terminate(void);
static osbool main_message_quit(wimp_message *message);

/* Main code entry point. */

int main(int argc, char *argv[])
{
	main_initialise();
	main_poll();
	main_terminate();

	return 0;
}

/* Global application initialisation. */

static void main_initialise(void)
{
	wimp_initialise(wimp_VERSION_RO3, &quot;Example App&quot;, NULL, NULL);

	event_add_message_handler(message_QUIT, EVENT_MESSAGE_INCOMING, main_message_quit);
}

/* Wimp_Poll loop. */

static void main_poll(void)
{
	wimp_block	blk;
	wimp_event_no	reason;
	int		pollword;

	while (!main_quit_flag) {
		reason = wimp_poll(wimp_MASK_NULL, &amp;blk, &amp;pollword);

		event_process_event(reason, &amp;blk, pollword);
	}
}

/* Global application termination. */

static void main_terminate(void)
{
	wimp_close_down(0);
}

/* Message_Quit event handler. */

static osbool main_message_quit(wimp_message *message)
{
	main_quit_flag = TRUE;

	return TRUE;
}</code>

<p>We&rsquo;ve now got the basic structure of a multitasking application: while it still doesn&rsquo;t do much as yet, we can now start to build some more familiar features around it. However, before doing that, we need to tidy up and simplify the build process.</p>
</section>
</chapter>
</manual>


<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 12
   -
   - Window Theory
  -->

<chapter id="chap-window-theory">
<resources>
<images>Chapter12</images>
<downloads>Chapter12</downloads>
</resources>
<filename>wintheory.html</filename>
<title>Window Theory</title>

<summary>With a window on the screen, we now need to understand how it works.</summary>

<section>
<p>In the <reference id="chap-windows">last chapter</reference>, we added a window to our application. This involved quite a lot of code, but we didn&rsquo;t really explain much of it in any detail; now is the time to rectify that. This chapter is going to be quite theory-heavy &ndash; it would be sensible to experiment with the concepts as we go through them, using the code from <reference id="dl-windows-dflt-handler"/> as a base to work from.</p>

<p>The first stage to creating a window is to define it in a <name>wimp_window</name> block suitable for passing to <swi>Wimp_CreateWindow</swi>. We created ours in <function>win_initialise()</function> as part of <reference id="list-windows-win-c"/>, and the code in question looked like this:</p>

<code lang="c">wimp_window window_definition;

window_definition.visible.x0 = 200;
window_definition.visible.y0 = 200;
window_definition.visible.x1 = 600;
window_definition.visible.y1 = 600;
window_definition.xscroll = 0;
window_definition.yscroll = 0;
window_definition.next = wimp_TOP;
window_definition.flags = wimp_WINDOW_NEW_FORMAT |
		wimp_WINDOW_MOVEABLE | wimp_WINDOW_AUTO_REDRAW |
		wimp_WINDOW_BOUNDED_ONCE | wimp_WINDOW_BACK_ICON |
		wimp_WINDOW_CLOSE_ICON | wimp_WINDOW_TITLE_ICON |
		wimp_WINDOW_TOGGLE_ICON | wimp_WINDOW_VSCROLL |
		wimp_WINDOW_SIZE_ICON | wimp_WINDOW_HSCROLL;
window_definition.title_fg = wimp_COLOUR_BLACK;
window_definition.title_bg = wimp_COLOUR_LIGHT_GREY;
window_definition.work_fg = wimp_COLOUR_BLACK;
window_definition.work_bg = wimp_COLOUR_VERY_LIGHT_GREY;
window_definition.scroll_outer = wimp_COLOUR_MID_LIGHT_GREY;
window_definition.scroll_inner = wimp_COLOUR_VERY_LIGHT_GREY;
window_definition.highlight_bg = wimp_COLOUR_CREAM;
window_definition.extra_flags = 0;
window_definition.extent.x0 = 0;
window_definition.extent.y0 = -1200;
window_definition.extent.x1 = 1200;
window_definition.extent.y1 = 0;
window_definition.title_flags = wimp_ICON_TEXT |
		wimp_ICON_BORDER | wimp_ICON_HCENTRED |
		wimp_ICON_VCENTRED | wimp_ICON_FILLED;
window_definition.work_flags = wimp_BUTTON_NEVER &lt;&lt; wimp_ICON_BUTTON_TYPE_SHIFT;
window_definition.sprite_area = wimpspriteop_AREA;
window_definition.xmin = 0;
window_definition.ymin = 0;
strncpy(window_definition.title_data.text, &quot;Hello World!&quot;, 12);
window_definition.icon_count = 0;</code>

<p>The <name>wimp_window</name> structure is a block of memory which is at least 92&nbsp;bytes long once all of the sub-structures within it are &lsquo;unwound&rsquo;; OSLib defines it like this:</p>

<code lang="c">struct wimp_window {
	os_box			visible;
	int			xscroll;
	int			yscroll;
	wimp_w			next;
	wimp_window_flags	flags;
	wimp_colour		title_fg;
	wimp_colour		title_bg;
	wimp_colour		work_fg;
	wimp_colour		work_bg;
	wimp_colour		scroll_outer;
	wimp_colour		scroll_inner;
	wimp_colour		highlight_bg;
	wimp_extra_window_flags	extra_flags;
	os_box			extent;
	wimp_icon_flags		title_flags;
	wimp_icon_flags		work_flags;
	osspriteop_area		*sprite_area;
	short			xmin;
	short			ymin;
	wimp_icon_data		title_data;
	int			icon_count;
	wimp_icon		icons[UNKNOWN];
};</code>

<p><!-- TODO --></p>
</section>

<section>
<title>The window dimensions</title>

<p>A lot of a window&rsquo;s definition is concerned with its dimensions: where it appears on screen and how big its work area is. The area that a window occupies on screen is known as its <intro>visible area</intro>, and is defined by an <name>os_box</name> struct. We first met these when creating an iconbar icon back in <reference id="chap-ibar"/>; they hold two pairs of <maths>x</maths> and <maths>y</maths> coordinates in the form (<maths>x0</maths>,<maths>y0</maths>) and (<maths>x1</maths>,<maths>y1</maths>):</p>

<code lang="c">struct os_box {
	int		x0;
	int		y0;
	int		x1;
	int		y1;
};

typedef struct os_box os_box;</code>

<p>For the visible area, the coordinates used are treated as OS&nbsp;units relative to the screen origin at the bottom left of the iconbar. This can be seen graphically in <reference id="fig-window-theory-visible"/>.</p>

<image id="fig-window-theory-visible" file="window-theory-visible.png" title="A window&rsquo;s Visible Area is defined in terms of screen coordinates"/>

<p>When we gave the visible area as</p>

<code lang="c">window_definition.visible.x0 = 200;
window_definition.visible.y0 = 200;
window_definition.visible.x1 = 600;
window_definition.visible.y1 = 600;</code>

<p>we were telling the Wimp that the bottom-left pixel <em>inside</em> the window&rsquo;s frame was at (200,200) and that the top-right pixel <em>just outside</em> the window (in other words in the bottom-left of the Toggle Size button&rsquo;s border) was at (600,600).</p>

<p>These coordinates are where the window first opens; once the user has moved it around, they are forgotten. You can see how they affect the opening position of the window by changing the numbers given in the four lines above, re-compiling the code and looking at where the window appears when it is first opened.</p>

<p>The next set of coordinates that must be specified are the <intro>work area extent</intro>. The work area is the area &lsquo;inside&rsquo; the window, and the visible area can be thought of as a view on to some or all of the work area. <reference id="fig-window-theory-visible"/> above showed a window displaying part of a graphic on the desktop; <reference id="fig-window-theory-work-area"/> shows how this visible area of the window might relate to the full graphic in its work area.</p>

<image id="fig-window-theory-work-area" file="window-theory-work-area.png" title="The Work Area of a window can be larger than its Visible Area"/>

<p>As with the visible area, the work area is defined by its bottom-left and top-right coordinates &ndash; but unlike the visible area, they&rsquo;re not really referenced to a specific origin. Conventionally <maths>x0</maths> and <maths>y1</maths> &ndash; which give the top-left of the work area &ndash; are both set to zero; this means that the <maths>x</maths> coordinates increase in a positive direction when moving from left to right, and the <maths>y</maths> coordinates <em>decrease</em> in a <em>negative</em> direction when moving from top to bottom. We defined (<maths>x0</maths>,<maths>y0</maths>) to be (0,&minus;1200) and (<maths>x1</maths>,<maths>y1</maths>) to be (1200,0):</p>

<code lang="c">window_definition.extent.x0 = 0;
window_definition.extent.y0 = -1200;
window_definition.extent.x1 = 1200;
window_definition.extent.y1 = 0;</code>

<p>which means that the top-left of the window&rsquo;s work area has coordinates (0,0) and the bottom-right (1200,&minus;1200). Our resulting work area is therefore 1200 OS&nbsp;units square.</p>

<p>The (0,0) &lsquo;origin&rsquo; doesn&rsquo;t have to be at the top-left of the work area, however. We could achieve the same size of area, but with coordinate (0,0) in its centre, by defining the extent as:</p>

<code lang="c">window_definition.extent.x0 = -600;
window_definition.extent.y0 = -600;
window_definition.extent.x1 = 600;
window_definition.extent.y1 = 600;</code>

<p>However, as can be seen from <reference id="fig-window-theory-scroll-bars"/>, the location of the scroll bars when the window opens will be affected.</p>

<image id="fig-window-theory-scroll-bars" file="window-theory-scroll-bars.png" title="The Work Area affects the starting position of the Scroll Bars"/>

<p>The reason for this are two more values in the definition, which determine the <maths>x</maths> and <maths>y</maths> <intro>scroll offsets</intro>.</p>

<code lang="c">window_definition.xscroll = 0;
window_definition.yscroll = 0;</code>

<p>The Wimp defines these two values as giving the work area coordinate which appears at the top-left of the visible area. This is why the convention of putting (0,0) at the top-left of the work area makes a lot of sense: when the window is scrolled fully up and left the <maths>x</maths> and <maths>y</maths> scroll offsets will both be zero.</p>

<p>The user can resize our window, and the Wimp will apply some constraints to what they can do. The largest that the window can be dragged out will be so that the visible area matches the work area extent. At the other extreme, <variable>window_definition.xmin</variable> and <variable>window_definition.ymin</variable> set the minimum dimensions in OS&nbsp;units to which the window can be resized. We&rsquo;ve set the limits to zero, which are special values:</p>

<code lang="c">window_definition.xmin = 0;
window_definition.ymin = 0;</code>

<p>If <variable>window_definition.xmin</variable> is zero, the window&rsquo;s width can&rsquo;t be shrunk to less than the width of the title bar text; setting <variable>window_definition.ymin</variable> to zero applies a limit based on any verical scroll bars which are present.</p>

<p>That&rsquo;s the horizontal and vertical position of our window sorted out, but there&rsquo;s still the question of the &lsquo;third dimension&rsquo; to consider: where our window appears in the window stack. On RISC&nbsp;OS, windows on the desktop have a defined order in which they appear in the &lsquo;pile&rsquo; &ndash; when we ask the Wimp to open our window, we need to say where in the &lsquo;pile&rsquo; it should go.</p>

<p>The Wimp tracks this by identifying the window which appears directly on top of ours. When opening a window, we usually want it to appear at the top of the heap, so we specify another &lsquo;special&rsquo; window handle &ndash; named <name>wimp_TOP</name> by OSLib &ndash; to indicate this.</p>

<code lang="c">#define wimp_TOP ((wimp_w) 0xFFFFFFFFu)

window_definition.next = wimp_TOP;</code>
</section>

<section>
<title>Changing appearances</title>

<p>The next set of attributes that we can change for our window are its colours. The <name>wimp_window</name> structure contains a set of values which control various parts of the window:</p>

<code lang="c">window_definition.title_fg = wimp_COLOUR_BLACK;
window_definition.title_bg = wimp_COLOUR_LIGHT_GREY;
window_definition.work_fg = wimp_COLOUR_BLACK;
window_definition.work_bg = wimp_COLOUR_VERY_LIGHT_GREY;
window_definition.scroll_outer = wimp_COLOUR_MID_LIGHT_GREY;
window_definition.scroll_inner = wimp_COLOUR_VERY_LIGHT_GREY;
window_definition.highlight_bg = wimp_COLOUR_CREAM;</code>

<p>Included are foreground and background colours for the title bar and work area, a highlight colour for the title bar, and colours for the scroll bars. Values can be selected from the full range of the default Wimp palette, which OSLib defines as follows:</p>

<code lang="c">#define wimp_COLOUR_WHITE		((wimp_colour) 0x0u)
#define wimp_COLOUR_VERY_LIGHT_GREY	((wimp_colour) 0x1u)
#define wimp_COLOUR_LIGHT_GREY		((wimp_colour) 0x2u)
#define wimp_COLOUR_MID_LIGHT_GREY	((wimp_colour) 0x3u)
#define wimp_COLOUR_MID_DARK_GREY	((wimp_colour) 0x4u)
#define wimp_COLOUR_DARK_GREY		((wimp_colour) 0x5u)
#define wimp_COLOUR_VERY_DARK_GREY	((wimp_colour) 0x6u)
#define wimp_COLOUR_BLACK		((wimp_colour) 0x7u)
#define wimp_COLOUR_DARK_BLUE		((wimp_colour) 0x8u)
#define wimp_COLOUR_YELLOW		((wimp_colour) 0x9u)
#define wimp_COLOUR_LIGHT_GREEN		((wimp_colour) 0xAu)
#define wimp_COLOUR_RED			((wimp_colour) 0xBu)
#define wimp_COLOUR_CREAM		((wimp_colour) 0xCu)
#define wimp_COLOUR_DARK_GREEN		((wimp_colour) 0xDu)
#define wimp_COLOUR_ORANGE		((wimp_colour) 0xEu)
#define wimp_COLOUR_LIGHT_BLUE		((wimp_colour) 0xFu)
#define wimp_COLOUR_TRANSPARENT		((wimp_colour) 0xFFFFFFFFu)</code>

<p>There&rsquo;s no problem experimenting with these values, but with the advent of modern versions of the Wimp which use textured bitmaps to make up the window furniture, an increasing number of the colours have little or no effect because the parts of the window that they control are no longer visible &ndash; being hidden behind the new window tool sprite designs.</p>

<p>There&rsquo;s also the important fact that <em>all</em> of these colours are tightly defined by the <cite>Style Guide</cite>, which is supplied electronically with the DDE and can be <link href="https://www.riscosopen.org/content/sales/style-guide">purchased from RISC&nbsp;OS Open</link> in printed form. The <em>only</em> value which should be changed in normal cases is <variable>window_definition.work_bg</variable> &ndash; and even this should remain as <name>wimp_COLOUR_VERY_LIGHT_GREY</name> most of the time (including in <em>all</em> dialogue boxes).</p>

<p>Aside from its colours, the window&rsquo;s appearance can be changed by using some of the <intro>window flags</intro> and <intro>extended window flags</intro> stored in <variable>window_definition.flags</variable> and <variable>window_definition.extra_flags</variable> respectively:</p>

<code lang="c">window_definition.flags = wimp_WINDOW_NEW_FORMAT |
		wimp_WINDOW_MOVEABLE | wimp_WINDOW_AUTO_REDRAW |
		wimp_WINDOW_BOUNDED_ONCE | wimp_WINDOW_BACK_ICON |
		wimp_WINDOW_CLOSE_ICON | wimp_WINDOW_TITLE_ICON |
		wimp_WINDOW_TOGGLE_ICON | wimp_WINDOW_VSCROLL |
		wimp_WINDOW_SIZE_ICON | wimp_WINDOW_HSCROLL;
window_definition.extra_flags = 0;</code>

<p>The flags control many aspects of a window&rsquo;s behaviour, and OSLib defines constants for all of them; as with all flags words, the required individual bits for the two fields are bitwise-ORed together to produce the numbers to be stored in the variables. Flags which are bits within <variable>window_definition.flags</variable> have the type <name>wimp_window_flags</name>; those which are bits within <variable>window_definition.extra_flags</variable> have the type <name>wimp_extra_window_flags</name>. For now we&rsquo;re not setting any exended window flags, so the code above sets <variable>window_definition.extra_flags</variable> to be zero.</p>

<p>One window flag which must <em>always</em> be included is <name>wimp_WINDOW_NEW_FORMAT</name>:</p> 

<code lang="c">#define wimp_WINDOW_NEW_FORMAT			((wimp_window_flags) 0x80000000u)</code>

<p>It indicates that the other window flags in <variable>window_definition.flags</variable> follow the &ldquo;new format&rdquo; and, in this context, that means &ldquo;RISC&nbsp;OS&rdquo;. The flag was added in when Acorn moved on from the original Arthur operating system in 1989, and it is very unlikely that there would ever be a situation in a modern application where it would not be set.</p>

<p>The extended window flags in <variable>window_definition.extra_flags</variable> started to be added in RISC&nbsp;OS&nbsp;4, so we&rsquo;re moving into areas which diverged when RISC&nbsp;OS&nbsp;4 and RISC&nbsp;OS&nbsp;5 came into being. Things aren&rsquo;t as bad as they might appear however: flags have the same meaning on <em>all</em> branches of RISC&nbsp;OS, so all that changes is whether or not they&rsquo;re implemented. Those which are not implemented are ignored by the Wimp, so it&rsquo;s safe to set flags for use on those branches of the OS which support them.</p>

<p>The remaining flags in the two fields fall into a number of distinct groups; the first that we&rsquo;ll consider controls which pieces of <intro>window furniture</intro> are applied to the window:</p>

<code lang="c">#define wimp_WINDOW_BACK_ICON			((wimp_window_flags) 0x1000000u)
#define wimp_WINDOW_CLOSE_ICON			((wimp_window_flags) 0x2000000u)
#define wimp_WINDOW_TITLE_ICON			((wimp_window_flags) 0x4000000u)
#define wimp_WINDOW_TOGGLE_ICON			((wimp_window_flags) 0x8000000u)
#define wimp_WINDOW_VSCROLL			((wimp_window_flags) 0x10000000u)
#define wimp_WINDOW_SIZE_ICON			((wimp_window_flags) 0x20000000u)
#define wimp_WINDOW_HSCROLL			((wimp_window_flags) 0x40000000u)</code>

<p>Each of these, if present, turns on one of the pieces of furniture: the iconise button, which doesn&rsquo;t have its own flag, is controlled by <name>wimp_WINDOW_CLOSE_ICON</name> and appears when the close button is displayed (and the user has configured the button on across the desktop).</p>

<p>The window&rsquo;s appearance can also be modified by a couple of the <intro>extended window flags</intro> stored in <variable>window_definition.extra_flags</variable>. OSLib defines the following two constants:</p>

<code lang="c">#define wimp_WINDOW_NEVER3D			((wimp_extra_window_flags) 0x4u)
#define wimp_WINDOW_ALWAYS3D			((wimp_extra_window_flags) 0x8u)</code>

<p>On RISC&nbsp;OS&nbsp;4, users are given the option to make their window borders three dimensional across the desktop. Since &ldquo;one size fits all&rdquo; isn&rsquo;t always a good plan, individual windows can over-rule the user: setting the <name>wimp_WINDOW_NEVER3D</name> flag will ensure that the window doesn&rsquo;t get a 3D border, while <name>wimp_WINDOW_ALWAYS3D</name> ensures that it always has one. As with so many of these options, use sparingly and &ndash; if in doubt &ndash; leave these two flags unset and let the user decide.</p>

<p>Finally, in this group of flags, are two which control the way in which the window colours above are interpreted by the Wimp:</p>

<code lang="c">#define wimp_WINDOW_REAL_COLOURS		((wimp_window_flags) 0x400u)
#define wimp_WINDOW_USE_TITLE_VALIDATION_STRING	((wimp_extra_window_flags) 0x1u)</code>

<p>For now, these can both safely be left un-set.</p>
</section>

<section>
<title>Moving the window around</title>

<p>Another group of flags determine how the window moves and responds to the user dragging its title bar and resize button:</p>

<code lang="c">#define wimp_WINDOW_MOVEABLE			((wimp_window_flags) 0x2u)
#define wimp_WINDOW_NO_BOUNDS			((wimp_window_flags) 0x40u)
#define wimp_WINDOW_BOUNDED			((wimp_window_flags) 0x2000u)
#define wimp_WINDOW_IGNORE_XEXTENT		((wimp_window_flags) 0x4000u)
#define wimp_WINDOW_IGNORE_YEXTENT		((wimp_window_flags) 0x8000u)</code>

<p>A window can only be dragged around at all if the <name>wimp_WINDOW_MOVEABLE</name> flag is set; otherwise, it will be fixed at the place where the application last put it with <swi>Wimp_OpenWindow</swi>.</p>

<p>The <name>wimp_WINDOW_NO_BOUNDS</name> flag, if set, allows the window to move off the screen; however, even if it is not set, the user can force this setting for <em>all</em> windows on the desktop using the <icon>Allow windows off-screen to top and left</icon> and <icon>Allow windows off-screen to bottom and right</icon> options in the Windows section of Configure. These Configure options arrived in RISC&nbsp;OS&nbsp;3 and, as a result, the <name>wimp_WINDOW_BOUNDED</name> flag was added to <em>force</em> a window to stay on screen. It&rsquo;s generally best to leave <name>wimp_WINDOW_NO_BOUNDS</name> unset so that the user can make his or her own choice, and use <name>wimp_WINDOW_BOUNDED</name> if the window has to remain on screen.</p>

<p>The final two flags, <name>wimp_WINDOW_IGNORE_XEXTENT</name> and <name>wimp_WINDOW_IGNORE_YEXTENT</name>, control the behaviour of the mouse when the user tries to drag the window&rsquo;s resize button. When set, the mouse can drag out away from the button when the window reaches full size. This isn&rsquo;t desirable, and these flags should be left unset unless there&rsquo;s some special code in place to spot this happening and change the size of the window&rsquo;s work area &ndash; this is definitely &lsquo;advanced&rsquo; behaviour, so for now assume that these flags should not be set!</p>
</section>

<section>
<title>Window behaviour flags</title>

<p>The final group of flags all relate in some way to the way that the window interacts with <swi>Wimp_Poll</swi> events:</p>

<code lang="c">#define wimp_WINDOW_AUTO_REDRAW			((wimp_window_flags) 0x10u)
#define wimp_WINDOW_PANE			((wimp_window_flags) 0x20u)
#define wimp_WINDOW_SCROLL_REPEAT		((wimp_window_flags) 0x100u)
#define wimp_WINDOW_SCROLL			((wimp_window_flags) 0x200u)
#define wimp_WINDOW_HOT_KEYS			((wimp_window_flags) 0x1000u)

#define wimp_WINDOW_USE_EXTENDED_SCROLL_REQUEST	((wimp_extra_window_flags) 0x2u)
#define wimp_WINDOW_GIVE_SHADED_ICON_INFO	((wimp_extra_window_flags) 0x10u)</code>

<p>If the <name>wimp_WINDOW_AUTO_REDRAW</name> flag is set, the Wimp won&rsquo;t ask the application to help with redrawing the window. For all simple windows, this flag should be set: if it isn&rsquo;t, then opening the window will lock the application (requiring <key>Alt</key>-<key>Break</key> to escape) unless there&rsquo;s code in place to redraw the window. We&rsquo;ll cover this, and the associated <swi>Wimp_Poll</swi> event, later.</p>

<p>Setting the <name>wimp_WINDOW_HOT_KEYS</name> flag will cause the window to receive details of unclaimed key presses even when it doesn&rsquo;t have input focus. Generally, this isn&rsquo;t much use, and will be left un-set.</p>

<p>The <name>wimp_WINDOW_SCROLL</name> and <name>wimp_WINDOW_SCROLL_REPEAT</name> flags, along with the <name>wimp_WINDOW_USE_EXTENDED_SCROLL_REQUEST</name> extended flag, control how the window responds to the user clicking on the arrows at the ends of its scroll bars. These can safely be left unset &ndash; at least until we&rsquo;ve met the <swi>Wimp_Poll</swi> event associated with them!</p>

<p>On RISC&nbsp;OS&nbsp;5, control over how the window responds to Interactive Help is provided by the <name>wimp_WINDOW_GIVE_SHADED_ICON_INFO</name> extended flag. This can be left unset until we come to implement interactive help support in our application.</p>

<p>Finally, from this group, is the <name>wimp_WINDOW_PANE</name> flag. This is intended for use by toolboxes and toolbars, such as the one found on Draw windows, but it actually does very little. It doesn&rsquo;t help attach the window to its parent (the application itself must do that), but merely ensures that if the window gets input focus, then the title bar of the window below it in the window stack is highlighted.</p>

<p>The final flags relate to different <intro>window stacks</intro>. This is well outside the scope of most applications, and they can safely be left unset:</p>

<code lang="c">#define wimp_WINDOW_BACK			((wimp_window_flags) 0x800u)
#define wimp_WINDOW_FURNITURE_WINDOW            ((wimp_window_flags) 0x800000u)
#define wimp_WINDOW_FOREGROUND_WINDOW           ((wimp_window_flags) 0x800000u)</code>
</section>

<section>
<title>The window title and work area</title>

<p>The contents of the window&rsquo;s title bar is set up in a couple of lines:</p>

<code lang="c">window_definition.title_flags = wimp_ICON_TEXT |
		wimp_ICON_BORDER | wimp_ICON_HCENTRED |
		wimp_ICON_VCENTRED | wimp_ICON_FILLED;
strncpy(window_definition.title_data.text, &quot;Hello World!&quot;, 12);</code>

<p>The Wimp treats window title bars as though they are specialised icons with a limited set of options; we&rsquo;ll come on to icons properly soon, so for now we&rsquo;ll just have to take on trust that the flags in <variable>window_definition.title_flags</variable> set up a text icon with its contents centred both vertically and horizontally. There&rsquo;s a border drawn round it (the black outline), and it has a filled background.</p>

<p>With these title flags, the <variable>window_definition.title_data.text</variable> is a 12&nbsp;byte field which can hold the text of the window title. The use of <function>strncpy()</function> with no attempt to terminate a buffer over-run might seem unusual, but in this case it&rsquo;s exactly what is required. The Wimp allows for titles from zero to twelve characters in length and for text up to and including eleven characters, a zero terminator is required. When the text is exactly twelve characters long, however, <em>no</em> terminator should be used. It can feel very wrong for anyone used to always terminating copied strings, but for this specific task <function>strncpy()</function> on its own is the correct solution!</p>

<code lang="c">window_definition.work_flags = wimp_BUTTON_NEVER &lt;&lt; wimp_ICON_BUTTON_TYPE_SHIFT;</code>

<p>The background of the window can respond to mouse clicks, and in a similar way to the title bar, the Wimp treats it as a kind of &lsquo;pseudo-icon&rsquo; as far as configuring it is concerned. We&rsquo;ll meet <intro>icon button types</intro> in a few chapters&rsquo; time, but for now the <variable>window_definition.work_flags</variable> can safely be set to <name>wimp_BUTTON_NEVER</name>.</p>

<code lang="c">window_definition.sprite_area = wimpspriteop_AREA;</code>

<p>If we&rsquo;re using sprites in the window, we have the option of specifying a <variable>window_definition.sprite_area</variable> pointer to allow the Wimp to locate them for us. We&rsquo;re not, so for now we can just set this to the default of <name>wimpspriteop_AREA</name> &ndash; we&rsquo;ll look at this properly when we come to consider sprites in icons.</p>

<code lang="c">window_definition.icon_count = 0</code>

<p>The final item at the end of the definition is the <variable>window_definition.icon_count</variable>. We said earlier that the <name>wimp_window</name> structure was &ldquo;at least 92&nbsp;bytes long&rdquo;: if the window contained any icons, they could be defined in an optional array at the end of the structure. We don&rsquo;t have any icons yet, so the count is simply set to zero and the Wimp will then ignore the <variable>window_definition.icons[]</variable> array at the end of the <name>wimp_window</name> structure definition.</p>
</section>
</chapter>
</manual>


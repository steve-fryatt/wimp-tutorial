<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 14
   -
   - Introducing Icons
  -->

<chapter id="chap-icons-intro">
<resources>
<images>Chapter14</images>
<downloads>Chapter14</downloads>
</resources>
<filename>icons.html</filename>
<title>Introducing Icons</title>

<summary>Icons are the building blocks used to make windows do something useful.</summary>

<section>
<p>Over the past few chapters, we&rsquo;ve seen how to create a window and get it to open on the desktop. Whilst windows are extremely useful in their own right, they can often become a lot more useful when combined with <intro>icons</intro>.</p>

<p>The <cite>Programmer&rsquo;s Reference Manual</cite> defines an icon as &ldquo;a rectangular area of a window&rsquo;s workspace&rdquo; which &ndash; while accurate &ndash; is perhaps a little vague. In fact, many familiar pieces of the RISC&nbsp;OS desktop are icons: <reference id="fig-icons-intro-egs"/> shows four windows (from Paint, Ovation&nbsp;Pro and UnitConv) which are composed entirely using them.</p>

<image id="fig-icons-intro-egs" file="icons-intro-egs.png" title="Icons come in all shapes and sizes"/>

<p>Icons can contain text, or a sprite, or both text <em>and</em> a sprite. They can have a border, or go without; if they do have a border, it can take a range of 3D effects if required. Icons can respond to mouse clicks &ndash; to change their appearance, notify the application, or both &ndash; and <intro>writable icons</intro> can accept and display keyboard input from the user. In many cases, this functionality is provided automatically by the Wimp, without the application needing to do anything.</p>
</section>

<section>
<title>A simple icon</title>

<p>There are two ways to create an icon on RISC&nbsp;OS. One is to add its details to the end of a <name>wimp_window</name> structure and have the <swi>Wimp_CreateWindow</swi> SWI process them: this is what the <variable>wimp_window.icon_count</variable> and <variable>wimp_window.icons[]</variable> elements in the <name>wimp_window</name> structure, which we glossed over in <reference id="sect-window-theory-loose-ends"/>, are for. The other is to assemble the same set of details and pass them to the <swi>Wimp_CreateIcon</swi> SWI after the window has been created.</p>

<p>For now, we&rsquo;re going to concentrate on the latter method, because this will allow us to examine the various components in detail and to see how they all interact with each other. In practice, most applications will use the former method in conjunction with a piece of software called a <intro>template editor</intro> &ndash; this approach allows many windows and dialogue boxes to be laid out in an almost WYSIWYG manner, much as one might put together an image in Draw. The window and icon designs can then be saved out as a <intro>template file</intro> which the Wimp can load and turn into a set of <name>wimp_window</name> structures. All the complexity that we&rsquo;re about to encounter is still present, however, so it&rsquo;s essential to know how it works &ndash; for now we&rsquo;ll do things &lsquo;the hard way&rsquo; and see exactly what&rsquo;s going on. Once the fundamentals are in place, we can move on to template files in a later chapter.</p>

<p>Probably the simplest form of icon that we can create is a basic text icon. In a similar way to windows, icons can be created by filling in a structure and passing a pointer to it to the <swi>Wimp_CreateIcon</swi> SWI &ndash; this SWI then adds the icon to its target window, so that it will be there when the window is opened. Let&rsquo;s start by adding a new <function>win_create_icon()</function> to our <file>win.c</file> file:</p>

<code lang="c">static wimp_i win_create_icon(void)
{
	wimp_icon_create icon_definition;

	icon_definition.w = win_handle;
	icon_definition.icon.extent.x0 = 100;
	icon_definition.icon.extent.y0 = -300;
	icon_definition.icon.extent.x1 = 300;
	icon_definition.icon.extent.y1 = -100;
	icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_BORDER |
			wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
			(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT);
	strncpy(icon_definition.icon.data.text, &quot;Icon&quot;, 12);

	return wimp_create_icon(&amp;icon_definition);
}</code>

<p>In a similar manner to that in which <function>win_initialise()</function> called <swi>Wimp_CreateWindow</swi>, this code initialises a block of memory by declaring a <name>wimp_icon_create</name> structure and then fills it in with the complete details of the icon that we wish to create. Once the structure contents is ready, a pointer is passed to <function>wimp_create_icon()</function> &ndash; which causes the Wimp to create an icon from the information contained within. In the same way that <function>wimp_create_window()</function> returns a <name>wimp_w</name> window handle, <function>wimp_create_icon()</function> returns a <name>wimp_i</name> icon handle to to identify the icon within the window. Another similarity is that the structure passed to <function>wimp_create_icon()</function> is no longer required as soon as the SWI returns; as with the <variable>window_definition</variable> variable in <function>win_initialise()</function>, <variable>icon_definition</variable> is a local variable which will disappear as soon as the <function>win_create_icon()</function> function exits.</p>

<p>The function has been declared as <code>static</code> because it&rsquo;s closely tied to the window defined within <file>win.c</file> and won&rsquo;t be of interest to other parts of the code. With a suitable function prototype added at the top of the file, we can then add a line to call <function>win_create_icon()</function> from the end of <function>win_initialise()</function>. The complete code can be found in <reference id="dl-icons-intro-text"/>. It will be useful as a base from which to experiment with the values used for creating the icon as we start to explain what&rsquo;s going on.</p>

<download id="dl-icons-intro-text" file="TextIcon" title="Adding a Text Icon to the Window" compatibility="none"/>

<p>When the code is compiled and run, the window that opens will have gained a square box containing the word &ldquo;Icon&rdquo; as shown in <reference id="fig-icons-intro-text"/>.</p>

<image id="fig-icons-intro-text" file="icons-intro-text.png" title="Our application&rsquo;s window with a simple text icon added"/>

<p>The <name>wimp_icon_create</name> structure, with which we declare the <variable>icon_definition</variable> variable in our new function, is defined by OSLib as follows and contains two elements:</p>

<code lang="c">struct wimp_icon_create {
	wimp_w		w;
	wimp_icon	icon;
};

typedef struct wimp_icon_create wimp_icon_create;</code>

<p>Rather like a set of Russion Dolls, one of the elements &ndash; <variable>wimp_icon_create.icon</variable> &ndash; is itself a structure. It has the same type as the <variable>wimp_window.icons[]</variable> array in the <name>wimp_window</name> structure, and contains the actual icon definition. To enable <swi>Wimp_CreateIcon</swi> to know which window to create the new icon in, the other element of <name>wimp_icon_create</name> is a <name>wimp_w</name> window handle stored in <variable>wimp_icon_create.w</variable>.</p>

<code lang="c">	icon_definition.w = win_handle;</code>

<p>The icon that we&rsquo;re creating is to go in the window that has just been defined and created, so we assign <variable>icon_definition.w</variable> to have the <name>wimp_w</name> handle stored in the global <variable>win_handle</variable> variable. If we were going to make <function>win_create_icon()</function> a general-purpose function, we would probably want to pass this window handle in as a parameter &ndash; since we&rsquo;ll only be using it to create icons in the one window, directly using the global variable is fine for now.</p>

<p>The other element of the structure, <variable>icon_definition.icon</variable>, is a <name>wimp_icon</name> structure defined by OSLib as:</p>

<code lang="c">struct wimp_icon {
	os_box		extent;
	wimp_icon_flags	flags;
	wimp_icon_data	data;
};

typedef struct wimp_icon wimp_icon;</code>

<p>This structure is the icon equivalent of the <name>wimp_window</name> structure for windows, although it&rsquo;s a lot shorter: unlike a window, icons only have a handful of pieces of information associated with them.</p>
</section>

<section>
<title>The icon&rsquo;s extent</title>

<p>The first piece of information that the <name>wimp_icon</name> structure contains is <variable>wimp_icon.extent</variable> &ndash; an <name>os_box</name> structure. We&rsquo;ve met <name>os_box</name> before, most recently in <reference id="sect-window-theory-dims"/>: it&rsquo;s a structure containing two pairs of <maths>x</maths>,<maths>y</maths> coordinates which locate the icon within its window&rsquo;s work area. We looked briefly at the dimensions of icons back in <reference id="chap-ibar"/>, when we created an icon on the iconbar. The iconbar is a very specific case, however &ndash; we now need to consider things more generally.</p>

<p>Unlike windows, whose visible area extents are specified in terms of the overall screen coordinates as we saw in <reference id="sect-window-theory-dims"/>, icons live <em>within</em> windows and so their extents are given in terms of their parent window&rsquo;s work area. The origin of a window&rsquo;s work area is up to the developer but, as we&rsquo;ve seen,it&rsquo;s conventional to locate (0,0) at the top-left. Our window&rsquo;s visible area is 400&nbsp;&times;&nbsp;400 OS&nbsp;Units square, so with both scroll offsets set to zero the work area that&rsquo;s initially visible is 0 to 399 in the <maths>x</maths> direction, and 0 to &minus;399 in the <maths>y</maths> direction.</p>

<p>To make an icon that&rsquo;s 200&nbsp;&times;&nbsp;200 OS&nbsp;Units square in the centre of this initial visible area, the minimum and maximum <maths>x</maths> coordinates of the icon will be at 100 and 300 OS&nbsp;Units. Similarly, the minimum and maximum <maths>y</maths> coordinates will be at &minus;300 and &minus;100 OS&nbsp;Units respectively. As with window coordinates, the minimum coordinates are <em>inclusive</em> whilst the maximum ones are <em>exclusive</em> to the icon&rsquo; area. This is shown graphically in <reference id="fig-icons-intro-dims"/>.</p>

<image id="fig-icons-intro-dims" file="icons-intro-dims.png" title="An icon&rsquo;s location is defined in terms of its parent window"/>

<p>In the case of our icon defintion, we set the four values <variable>icon_definition.icon.extent.x0</variable>, <variable>icon_definition.icon.extent.y0</variable>, <variable>icon_definition.icon.extent.x1</variable> and <variable>icon_definition.icon.extent.y1</variable> to the values 100, &minus;300, 300 and &minus;100 respectively.</p>

<code lang="c">icon_definition.icon.extent.x0 = 100;
icon_definition.icon.extent.y0 = -300;
icon_definition.icon.extent.x1 = 300;
icon_definition.icon.extent.y1 = -100;</code>
</section>

<section>
<title>The icon&rsquo;s appearance</title>

<p>With the icon&rsquo;s extent established, the next part of the definition to consider are the <intro>icon flags</intro>. Like the <name>wimp_window_flags</name> that we met earlier, <name>wimp_icon_flags</name> consists of a 32-bit word split into a number of distinct parts which &ndash; taken together &ndash; define a lot about the icon. The first thing to decide is what kind of icon we&rsquo;re looking at, and this is defined by three flag bits within the word:</p>

<code lang="c">#define wimp_ICON_TEXT			((wimp_icon_flags) 0x1u)
#define wimp_ICON_SPRITE		((wimp_icon_flags) 0x2u)
#define wimp_ICON_INDIRECTED		((wimp_icon_flags) 0x100u)</code>

<p>Our icon definition set the <variable>icon_definition.icon.flags</variable> element to</p>

<code lang="c">	icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_BORDER |
		wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
		(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT);</code>

<p>which we can see has the <name>wimp_ICON_TEXT</name> bit set. This means that the icon we&rsquo;ve created is a <intro>text icon</intro>: it contains a single piece of text, which is simply the word &ldquo;Icon&rdquo;.</p>

<p>A number of other icon flags control the appearance and layout of the icon:</p>

<code lang="c">#define wimp_ICON_BORDER		((wimp_icon_flags) 0x4u)
#define wimp_ICON_HCENTRED		((wimp_icon_flags) 0x8u)
#define wimp_ICON_VCENTRED		((wimp_icon_flags) 0x10u)
#define wimp_ICON_FILLED		((wimp_icon_flags) 0x20u)
#define wimp_ICON_RJUSTIFIED		((wimp_icon_flags) 0x200u)
#define wimp_ICON_HALF_SIZE		((wimp_icon_flags) 0x800u)</code>

<p>Our icon has the <name>wimp_ICON_HCENTRED</name> and <name>wimp_ICON_VCENTRED</name> flags set, which means that the text appears centred within the icon&rsquo;s extent &ndash; as was seen in <reference id="fig-icons-intro-text"/>. By setting the <name>wimp_ICON_VCENTRED</name> on its own, <name>wimp_ICON_HCENTRED</name> and <name>wimp_ICON_VCENTRED</name> together, or <name>wimp_ICON_RJUSTIFIED</name> and <name>wimp_ICON_VCENTRED</name> together, it is possible to left align, centre or right align the text respectively as shown in <reference id="fig-icons-intro-halign"/>. The <name>wimp_ICON_VCENTRED</name> flag, whilst ostensibly controlling vertical alignment, has little effect on text icons.</p>

<image id="fig-icons-intro-halign" file="icons-intro-halign.png" title="The icon&rsquo;s text can be aligned left, centre or right"/>

<p>The final flag set in our icon definition is <name>wimp_ICON_BORDER</name>, which causes the Wimp to draw an outline around the icon&rsquo;s extent. If the flag is omitted than, as can be seen in <reference id="fig-icons-intro-border"/>, the outline is omitted.</p>

<image id="fig-icons-intro-border" file="icons-intro-border.png" title="Icons can either have a border, or go without"/>

<p>Since the <name>wimp_ICON_HALF_SIZE</name> flag only applies to icons containing sprites &ndash; which we&rsquo;ll meet soon &ndash; this only leaves one flag to consider: <name>wimp_ICON_FILLED</name>. When set, this allows the icon&rsquo;s background to be filled with a solid colour instead of the window&rsquo;s background being allowed to show through. Before this makes any sense, however, we need to consider the colours used for the icon.</p>

<p>Unlike the <name>wimp_window_flags</name>, which consisted entirely of flag bits, the value of <name>wimp_icon_flags</name> contains a mixture of single-bit flags and groups of bits which form numeric values. When we set <variable>icon_definition.icon.flags</variable> in <function>win_create_icon()</function>, we&rsquo;re combining the four individual flags &ndash; <name>wimp_ICON_TEXT</name>, <name>wimp_ICON_BORDER</name>, <name>wimp_ICON_HCENTRED</name> and <name>wimp_ICON_VCENTRED</name> &ndash; with a numeric colour value of <name>wimp_COLOUR_BLACK</name>.</p>

<p>To do this, the value <name>wimp_COLOUR_BLACK</name> is shifted left by <name>wimp_ICON_FG_COLOUR_SHIFT</name>, which is defined to be 24 by OSLib:</p>

<code lang="c">#define wimp_ICON_FG_COLOUR_SHIFT	(24)
#define wimp_ICON_FG_COLOUR		((wimp_icon_flags) 0xF000000u)

#define wimp_ICON_BG_COLOUR_SHIFT	(28)
#define wimp_ICON_BG_COLOUR		((wimp_icon_flags) 0xF0000000u)</code>

<p>The four bits from 24 to 27 of <name>wimp_icon_flags</name> are taken by the Wimp to indicate the foreground colour of the icon, whilst the bits from 28 to 31 are taken as the background colour if one is needed &ndash; the corresponding shift constant is <name>wimp_ICON_BG_COLOUR_SHIFT</name>. The colours are given as <name>wimp_colour</name> values &ndash; the same one that we met back in <reference id="sect-window-theory-appearance"/> for defining window colours.</p>

<p>OSLib also provides two bit-mask values, defined as <name>wimp_ICON_FG_COLOUR</name> and <name>wimp_ICON_BG_COLOUR</name> to indicate the bits in the flag field which represent the colours.</p>

<p>Some examples showing the effect of applying different foreground colours can be seen in <reference id="fig-icons-intro-fgcol"/>.</p>

<image id="fig-icons-intro-fgcol" file="icons-intro-fgcol.png" title="Icons can appear in any of the Wimp colours"/>

<p>To be able to specify a background colour for the icon, it must be filled so that the background shows up &ndash; this can be achieved by setting the <name>wimp_ICON_FILLED</name> flag in <variable>icon_definition.icon.flags</variable> within <function>win_create_icon()</function>. If the flag definition is changed to</p>

<code lang="c">icon_definition.icon.flags = wimp_ICON_TEXT |
		wimp_ICON_BORDER | wimp_ICON_FILLED |
		wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
		(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
		(wimp_COLOUR_WHITE &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);</code>

<p>and then compiled and run, then the icon created should have a filled white background as seen in <reference id="fig-icons-intro-fill"/>.</p>

<image id="fig-icons-intro-fill" file="icons-intro-fill.png" title="Icons can be filled with a solid background colour"/>
</section>

<section>
<title>The icon data</title>

<p>The final part of the <name>wimp_icon</name> structure is the <intro>icon data</intro> held in <variable>wimp_icon.data</variable>. The <name>wimp_icon_data</name> type is a union occupying 12 bytes of memory, which OSLib defines as follows:</p>

<code lang="c">union wimp_icon_data {
	char			text[12];
	char			sprite[12];
	char			text_and_sprite[12];
	struct {
		char		*text;
		char		*validation;
		int		size;
	} indirected_text;
	struct {
		osspriteop_id	id;
		osspriteop_area	*area;
		int		size;
	} indirected_sprite;
	struct {
		char		*text;
		char		*validation;
		int		size;
	} indirected_text_and_sprite;
};

typedef union wimp_icon_data wimp_icon_data;</code>

<p>Whilst this might look confusing at first glance, there are actually six distinct parts to the union corresponding to the six &lsquo;types&rsquo; of icon which are available on RISC&nbsp;OS. It is possible to create <intro>text icons</intro>, <intro>sprite icons</intro> or <intro>text and sprite icons</intro>; each of these three variants can then be either <intro>indirected</intro> or <intro>non-indirected</intro>, which give us the six options.</p>

<p>As we saw earlier, our icon is a text icon, because it has the <name>wimp_ICON_TEXT</name> flag bit set: this means that only the <variable>wimp_icon_data.text[]</variable> element at the top of the union definition applies. This is simply a <name>char</name> array with 12 entries: for a non-indirected text icon, the Wimp treats the 12 bytes of icon data as holding between 0 and 12 characters of text to be displayed in the icon.</p>

<p>In our <function>win_create_icon()</function> function, we set it up by copying in a string from a location pointed to by the <variable>text</variable> parameter:</p>

<code lang="c">strncpy(icon_definition.icon.data.text, text, 12);</code>

<p>As with a number of other, similar text buffers in other parts of the system, the Wimp treats the icon data for a non-indirected text icon a little surprisingly. If the length of the icon text is between 0 and 11 characters, it should be a <intro>control terminated string</intro> with a control character (such as a <code>'\0'</code>) after the last character. If the text is 12 characters long, however, it should be <em>unterminated</em>. This makes the behaviour of <function>strncpy()</function> ideal for populating it, because should the function reach the end of the destination buffer before it reaches the end of the string to copy, the buffer is left without a terminator.</p>
</section>

<section id="sect-icons-intro-sprites">
<title>Sprite icons</title>

<p>If a text icon contains a piece of text, a sprite icon contains &ndash; unsurprisingly &ndash; a sprite. We&rsquo;ve already met sprite icons, in fact, as the iconbar icon that we created back in <reference id="chap-ibar"/> was one. All of the formatting options that we&rsquo;ve encountered so far apply equally to both text icons and sprite icons, so we can change our icon into a sprite icon simply by updating the <function>win_create_icon()</function> function as follows:</p>

<code lang="c">static wimp_i win_create_icon(void)
{
	wimp_icon_create icon_definition;

	icon_definition.w = win_handle;
	icon_definition.icon.extent.x0 = 100;
	icon_definition.icon.extent.y0 = -300;
	icon_definition.icon.extent.x1 = 300;
	icon_definition.icon.extent.y1 = -100;
	icon_definition.icon.flags = wimp_ICON_SPRITE |
			wimp_ICON_BORDER | wimp_ICON_FILLED |
			wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
			(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
			(wimp_COLOUR_WHITE &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);
	strncpy(icon_definition.icon.data.sprite, &quot;directory&quot;, 12);

	return wimp_create_icon(&amp;icon_definition);
}</code>

<p>Aside from changing the <name>wimp_ICON_TEXT</name> into <name>wimp_ICON_SPRITE</name> when setting <variable>icon_definition.icon.flags</variable>, the only change is to the line using <function>strncpy()</function> to initialise <variable>icon_definition.icon.data</variable> &ndash; it now copies data into the <variable>wimp_icon_data.sprite</variable> part of the union.</p>

<p>Since this is now a sprite icon, we should change to initialising the <variable>wimp_icon_data.sprite[]</variable> element instead of <variable>wimp_icon_data.text[]</variable> &ndash; it&rsquo;s the same memory location underneath, but keeps the code clearer. Instead of a piece of text to be displayed, the icon data now contains the name of the sprite which is to be shown &ndash; again up to 12 characters long, and terminated by a control character (in other words <code>'\0'</code>) if it contains 11 characters or less. We&rsquo;ve also changed the text that&rsquo;s copied in: now we&rsquo;re using the name of a sprite which we know exists in the Wimp&rsquo;s sprite area.</p>

<p>If the changes, which can be found in full in <reference id="dl-icons-intro-sprite"/>, are compiled and run, the window in <reference id="fig-icons-intro-sprite"/> should be seen. The icon now contains a standard directory icon centred in its box, still with the same black border and white background.</p>

<image id="fig-icons-intro-sprite" file="icons-intro-sprite.png" title="Sprite icons display a sprite instead of text"/>

<download id="dl-icons-intro-sprite" file="SpriteIcon" title="Adding a Sprite Icon to the Window" compatibility="none"/>

<p>All of the formatting options which we applied to the text icon can also be used on this sprite icon. The sprite can be aligned horizontally to the left, right or centre based on the settings of the <name>wimp_ICON_HCENTRED</name>, <name>wimp_ICON_VCENTRED</name> and <name>wimp_ICON_RJUSTIFIED</name> flags. It can have a border if <name>wimp_ICON_BORDER</name> is set, and it can be filled if <name>wimp_ICON_FILLED</name> is set. The foreground and background colours can also be changed.</p>

<p>Since this is a sprite icon, the <name>wimp_ICON_HALF_SIZE</name> flag can also be used to change its appearance. If set, the Wimp scales the sprite to half-size when displaying it, which is used by the Filer to produce &lsquo;small&rsquo; icons when small sprites aren&rsquo;t available. Its effect can be seen in <reference id="fig-icons-intro-half"/>.</p>

<image id="fig-icons-intro-half" file="icons-intro-half.png" title="The sprites in sprite icons can be shown at half size"/>
</section>

<section id="sect-icons-intro-textsprite">
<title>Text and sprite icons</title>

<p>The final type of icon is the text and sprite icon; unfortunately, there are no prizes for guessing what this kind of icon does. It can be created by setting both the <name>wimp_ICON_TEXT</name> <em>and</em> <name>wimp_ICON_SPRITE</name> flags in the definition, like this:</p>

<code lang="c">static wimp_i win_create_icon(void)
{
	wimp_icon_create icon_definition;

	icon_definition.w = win_handle;
	icon_definition.icon.extent.x0 = 100;
	icon_definition.icon.extent.y0 = -300;
	icon_definition.icon.extent.x1 = 300;
	icon_definition.icon.extent.y1 = -100;
	icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_SPRITE |
			wimp_ICON_BORDER | wimp_ICON_FILLED |
			wimp_ICON_HCENTRED | wimp_ICON_VCENTRED |
			(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
			(wimp_COLOUR_WHITE &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);
	strncpy(icon_definition.icon.data.text_and_sprite, &quot;directory&quot;, 12);

	return wimp_create_icon(&amp;icon_definition);
}</code>

<p>The only other change to the definition is that we&rsquo;re now initialising the <variable>wimp_icon_data.text_and_sprite[]</variable> element of the <variable>icon_definition.icon.data</variable> union. A full set of code can be found in <reference id="dl-icons-intro-textsprite"/>.</p>

<download id="dl-icons-intro-textsprite" file="TextAndSpriteIcon" title="Combining Text and Sprite in an Icon" compatibility="none"/>

<p>When the changed code is compiled and run, the result should be as shown in <reference id="fig-icons-intro-textsprite"/>. The Wimp is treating the string held in <variable>icon_definition.icon.data.text_and_sprite</variable> as both the sprite name <em>and</em> the text to be displayed in the icon &ndash; this is a big limitation, as there are few occasions where this is likely to be useful.</p>

<image id="fig-icons-intro-textsprite" file="icons-intro-textsprite.png" title="Combining both text and a sprite into the same icon"/>

<p>The alignment of the icon&rsquo;s contents is still controlled by the <name>wimp_ICON_HCENTRED</name>, <name>wimp_ICON_VCENTRED</name> and <name>wimp_ICON_RJUSTIFIED</name> flags, but with this kind of icon they are used together to specify one of eight arrangements as shown in <reference id="fig-icons-intro-textsprite-align"/>.</p>

<image id="fig-icons-intro-textsprite-align" file="icons-intro-textsprite-align.png" title="The eight ways in which text and sprite icons can be arranged"/>

<p>The final &lsquo;oddity&rsquo; of text and sprite icons is that whatever the state of the <name>wimp_ICON_FILLED</name> flag, the text background is <em>always</em> filled. This can be seen in <reference id="fig-icons-intro-textsprite-fill"/>, where the icon on the left is filled and the icon on the right isn&rsquo;t &ndash; a contrasting colour has been used to make the effect stand out clearly.</p>

<image id="fig-icons-intro-textsprite-fill" file="icons-intro-textsprite-fill.png" title="The text always has a filled background in text and sprite icons"/>

<p>Clearly the icons that we&rsquo;ve seen up to now are limited in their potential uses: aside from the fact that text and sprite icons must contain sprites with names that exactly match their text, the limitation of twelve characters for simple text icons is quite a restriction. Fortunately there&rsquo;s a solution available, and in the next chapter we&rsquo;ll learn what it is when we meet <intro>indirected icons</intro>.</p>

<p>In the meantime, now would be a good time to go back and play with all of the options that we&rsquo;ve met in this chapter until you&rsquo;re completely comfortable with them and what they do. Icons are central to the RISC&nbsp;OS Wimp, and the following chapters will be much easier to follow if the basics have been mastered!</p>
</section>
</chapter>
</manual>

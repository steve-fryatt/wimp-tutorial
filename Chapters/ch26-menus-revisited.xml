<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 26
   -
   - Menus Revisited
  -->

<chapter id="chap-menus-revisited">
<resources>
<images>Chapter26</images>
<downloads>Chapter26</downloads>
</resources>
<filename>menus-revisited.html</filename>
<title>Menus Revisited</title>

<summary>We have seen how menus work from the perspective of the Wimp but, before moving on, let&rsquo;s see what SFLib can do to improve things.</summary>

<section>
<p>Over the past four chapters, we have seen how the Wimp handles menus and have built up a library of code in <file>c.menu</file> which can be used to display them and process selections made by the user. Whilst this has enabled us to see how the facilities offered by the Wimp work, it is likely to come as little surprise to learn that similar functionality is provided by SFLib&rsquo;s event library. In this chapter, we will look at what is required to make use of it.</p>
</section>

<section>
<title>Menu events</title>

<p>One of the biggest probems with the Wimp&rsquo;s native support for menus is the somewhat piecemeal approach used. It is left up to the application to open create and open menus using <swi>Wimp_CreateMenu</swi>, and to re-open them if selections are made with <mouse>Adjust</mouse>. In addition, as we have already seen, it is also the responsibility of the application to ensure that the menu is correctly set up before <swi>Wimp_CreateMenu</swi> is called.</p>

<p>Selections by the user are reported through the <name>Menu Selection</name> event, but closure of a menu is harder to pin down. If a selection is made, the application can assume that the menu has closed if it does not take action to reopen it; if a menu closes for any other reason, then it is instead reported by the <name>Message_MenusDeleted</name> message.</p>

<p>In an attempt to improve this situation, SFLib&rsquo;s event library provides a range of support for menus. Menus can be attached to windows or individual icons, and they are opened automatically when requested by the user. To allow an application to interact with its menus, the library creates the four window-level &lsquo;pseudo-events&rsquo; listed in <reference id="table-menus-revisited-events"/>, which are reported to the window where the menu is attached.</p>

<table id="table-menus-revisited-events" title="The menu 'pseudo-events' implemented by SFLib's event library">
<columns>
<col align="centre">Event</col>
<col align="left">Purpose</col>
</columns>
<row><col>Prepare</col><col>Raised when a menu is about to be opened or reopened using <swi>Wimp_CreateMenu</swi></col></row>
<row><col>Warning</col><col>Raised when a <name>Message_SubmenuWarning</name> is received for a menu</col></row>
<row><col>Selection</col><col>Raised when a selection is received from a <name>Menu Selection</name> event</col></row>
<row><col>Close</col><col>Raised when a menu is closed, following a <name>Menu Selection</name> event or on receipt of a <name>Message_MenusDeleted</name></col></row>
</table>

<p>Using these &lsquo;pseudo-events&rsquo;, an application can streamline its menu support. It is guaranteed to receive a <name>Menu Prepare</name> event before a menu opens &ndash; which allows it to allocate any resources needed and update the menu state. It will receive a <name>Menu Selection</name> event whenever the user makes a selection, which might be followed by another <name>Menu Prepare</name> event if <mouse>Adjust</mouse> was used. Finally, whether or not a selection was made, it will receive a single <name>Menu Close</name> event when the menu is eventually closed, so that any resources claimed during the <name>Menu Prepare</name> event can be released again. The <name>Menu Warning</name> events are raised whenever a <name>Message_SubmenuWarning</name> is received for a menu; we will be meeting these later on.</p>

<p>In addition to the window-level events listed above, the library also provides support for pop-up menus. Simple menus can be left to the library to look after, or, if more interactivity is required, an icon-level event can be generated whenever a new selection is made. For truly custom menu support, it is possible for an application to manage pop-up menus itself via the standard window-level events.</p>

<p>The SFLib event library implements these &lsquo;pseudo-events&rsquo; in a similar way to the code in our own <file>c.menu</file> file. The approach taken by our application up to now is perfectly valid, but if you&rsquo;re using SFLib&rsquo;s event handling, it makes sense to use the menu support as well!</p>
</section>

<section>
<title>Updating the iconbar</title>

<p>The easiest menu to update for use with SFLib&rsquo;s menu events will be the one on the iconbar, since this is self-contained. At present, we open the menu ourselves with a call to <function>menu_open_ibar()</function>, passing it a pointer to the <function>ibar_menu_selection()</function> event hander for returning any <name>Menu Selection</name> events which are raised.</p>

<p>In keeping with the <cite>Style Guide</cite>, the event library allows us to add a single menu to any window in our application &ndash; this will then be displayed whenever the <mouse>Menu</mouse> button is clicked anywhere in that window. A menu is added by calling the <function>event_add_window_menu()</function>, which is defined as follows:</p>

<code lang="c">osbool event_add_window_menu(
	wimp_w w,
	wimp_menu *menu
);</code>

<p>It takes two parameters: the window handle in <variable>w</variable>, and a pointer to the menu&rsquo;s <name>wimp_menu</name> block in <variable>*menu</variable>. The Wimp treats the iconbar as a special window with a handle of <name>wimp_ICON_BAR</name>, so adding an iconbar menu to our application is simply a case of calling</p>

<code lang="c">event_add_window_menu(wimp_ICON_BAR, ibar_menu);</code>

<p>to associate our iconbar menu (whose handle is held in the <variable>ibar_menu</variable> variable) with the <name>wimp_ICON_BAR</name> window.</p>

<p>If the event library has opened a menu over our window as a result of this association, then it will start to return the appropriate &lsquo;pseudo-events&rsquo; to any event handlers that we choose to register. We are interested in <name>Menu Selection</name> events, so we can register a handler using the <function>event_add_window_menu_selection()</function> function.</p>

<code lang="c">osbool event_add_window_menu_selection(
	wimp_w w,
	void (*callback)(wimp_w w, wimp_menu *m, wimp_selection *selection)
);</code>

<p>This again takes two parameters: the window handle in <variable>w</variable>, which will again be <name>wimp_ICON_BAR</name> for the iconbar, and a pointer to an an event handler function in <variable>*callback</variable>. We can call it with</p>

<code lang="c">event_add_window_menu_selection(wimp_ICON_BAR, ibar_menu_selection);</code>

<p>to associate our existing <name>Menu Selection</name> event handler with the library&rsquo;s event.</p>

<p>Putting all of the changes together, we end up with a new <function>ibar_initialise()</function> function as shown in <reference id="list-menus-revisited-ibar-init"/>.</p>

<code id="list-menus-revisited-ibar-init" lang="c" title="The updated ibar_initialise() function">void ibar_initialise(char *sprite)
{
	os_error		*error;
	wimp_window		*window_definition;
	wimp_w			prog_info;
	wimp_icon_create	icon_bar;

	/* Program Info Window. */

	window_definition = windows_load_template(&quot;ProgInfo&quot;);
	if (window_definition == NULL) {
		error_report_error(&quot;Failed to load ProgInfo template&quot;);
		return;
	}

	prog_info = wimp_create_window(window_definition);
	free(window_definition);

	event_add_window_icon_click(prog_info, IBAR_PROGINFO_ICON_WEB, ibar_proginfo_web_click);

	/* Iconbar Menu. */

	ibar_menu = menu_create(&quot;Example&quot;, 3);
	if (ibar_menu == NULL) {
		error_report_error(&quot;Failed to create Iconbar Menu&quot;);
		return;
	}

	menu_entry(ibar_menu, IBAR_MENU_INFO, &quot;Info&quot;, (wimp_menu *) prog_info);
	menu_entry(ibar_menu, IBAR_MENU_HELP, &quot;Help...&quot;, NULL);
	menu_entry(ibar_menu, IBAR_MENU_QUIT, &quot;Quit&quot;, NULL);

	/* Iconbar Icon. */

	icon_bar.w = wimp_ICON_BAR_RIGHT;
	icon_bar.icon.extent.x0 = 0;
	icon_bar.icon.extent.y0 = 0;
	icon_bar.icon.extent.x1 = 68;
	icon_bar.icon.extent.y1 = 68;
	icon_bar.icon.flags = wimp_ICON_SPRITE | (wimp_BUTTON_CLICK &lt;&lt; wimp_ICON_BUTTON_TYPE_SHIFT);
	strncpy(icon_bar.icon.data.sprite, sprite, osspriteop_NAME_LIMIT);

	error = xwimp_create_icon(&amp;icon_bar, NULL);
	if (error != NULL) {
		error_report_error(error-&gt;errmess);
		return;
	}

	/* Register event handlers. */

	event_add_window_mouse_event(wimp_ICON_BAR, ibar_mouse_click);
	event_add_window_menu(wimp_ICON_BAR, ibar_menu);
	event_add_window_menu_selection(wimp_ICON_BAR, ibar_menu_selection);
}</code>

<p>A couple of small changes are required to <function>ibar_menu_selection()</function>, since the event library expects a slightly different set of parameters for its event handler. In addition to the <name>wimp_menu</name> pointer and <name>wimp_selection</name> block, the library will also pass the handle of the window to which the menu was attached; the update can be seen in <reference id="list-menus-revisited-ibar-select"/>.</p>

<code id="list-menus-revisited-ibar-select" lang="c" title="The updated Menu Selection event handler">static void ibar_menu_selection(wimp_w window, wimp_menu *menu, wimp_selection *selection)
{
	os_error *error;

	if (menu != ibar_menu)
		return;

	switch (selection-&gt;items[0]) {
	case IBAR_MENU_HELP:
		error = xos_cli(&quot;%Filer_Run &lt;ExamplApp$Dir&gt;.!Help&quot;);
		if (error != NULL)
			error_report_os_error(error, wimp_ERROR_BOX_OK_ICON);
		break;
	case IBAR_MENU_QUIT:
		main_quit_flag = TRUE;
		break;
	}
}</code>

<p>We have also added a check to make sure that the menu block is the one stored in <variable>ibar_menu</variable> before proceeding to act on the event. This isn&rsquo;t essential here, since there is only one menu attached to the iconbar, but it is good practice for when things become more complicated.</p>

<p>The final change is to the <function>ibar_mouse_click()</function> event handler, as there is no longer any need to open the menu ourselves since the event library will do this for us. We can therefore remove the <code>case</code> statement to handle the <name>wimp_CLICK_MENU</name> condition, as shown in <reference id="list-menus-revisited-ibar-click"/>.</p>

<code id="list-menus-revisited-ibar-click" lang="c" title="We only need to handle Select clicks on the icon now">static void ibar_mouse_click(wimp_pointer *pointer)
{
	switch (pointer-&gt;buttons) {
	case wimp_CLICK_SELECT:
		win_open();
		break;
	}
}</code>

<p>The full code can be found in <reference id="dl-menus-revisited-ibar"/>. When compiled and run, the application should behave the same, but will now be leaving the iconbar menu to SFLib&rsquo;s event library to look after.</p>

<download id="dl-menus-revisited-ibar" file="MenuLibIBar" title="Using SFLib for the Iconbar Menu" compatibility="none"/>
</section>

<section>
<title>A window menu</title>

<p>We saw in the last section that SFLib&rsquo;s event library allowed a menu to be associated with our application&rsquo;s iconbar icon, so that clicking <mouse>Menu</mouse> over the icon opened the menu without our code having to do anything. This support extends to windows, so we can associate our main menu &ndash; the one with the decimal place options &ndash; with the main window of our application in a similar way.</p>

<p>There is a difference, however, because unlike the iconbar menu, our main menu requires setting up using the <function>win_set_menu()</function> before it is opened on screen. Fortunately, the library provides a <name>Menu Prepare</name> &lsquo;pseudo-event&rsquo; to enable us to do this. In a similar way to the <name>Menu Selection</name> event that we have alsready seen, an event handler can be registered with the <name>Menu Prepare</name> event using the <function>event_add_window_menu_prepare()</function> function. This is defined as</p>

<code lang="c">osbool event_add_window_menu_prepare(
	wimp_w w,
	void (*callback)(wimp_w w, wimp_menu *m, wimp_pointer *pointer)
);</code>

<p>To implement this, we will need to add some lines to register the necessary event handlers in our <function>win_initialise()</function> function, as seen in <reference id="list-menus-revisited-main-init"/>.</p>

<code id="list-menus-revisited-main-init" lang="c" title="The updated event handler resitrations in win_initialise()">/* Register event handlers. */

event_add_window_mouse_event(win_handle, win_mouse_click);
event_add_window_menu(win_handle, win_menu);
event_add_window_menu_prepare(win_handle, win_set_menu);
event_add_window_menu_selection(win_handle, win_menu_selection);</code>

<p>As with the iconbar menu in <reference id="list-menus-revisited-ibar-init"/>, we associate the menu handle with the window, and then register <name>Menu Prepare</name> and <name>Menu Selection</name> event handlers. Our existing <function>win_set_menu()</function> and <function>win_menu_selection()</function> functions can be used, with some modifications &ndash; those required to <function>win_set_menu()</function> can be seen in <reference id="list-menus-revisited-main-set"/>.</p>

<code id="list-menus-revisited-main-set" lang="c" title="Preparing the main menu for display">static void win_set_menu(wimp_w w, wimp_menu *menu, wimp_pointer *pointer)
{
	int places;

	if (menu != win_menu)
		return;

	places = calc_get_places();

	menus_tick_entry(win_menu, WIN_MENU_DECIMAL1, places == 1);
	menus_tick_entry(win_menu, WIN_MENU_DECIMAL2, places == 2);
	menus_tick_entry(win_menu, WIN_MENU_DECIMAL3, places == 3);
}</code>

<p>The main changes are to the parameters taken by the function: as with the <name>Menu Selection</name> handler that we saw <reference id="list-menus-revisited-ibar-select">above</reference>, the handler for <name>Menu Prepare</name> events takes the handle of the window over which the menu was opened in <variable>w</variable> and a pointer to the <name>wimp_menu</name> block for the menu in <variable>*menu</variable>.</p>

<p>The third parameter, <variable>*pointer</variable>, is a pointer to a <name>wimp_pointer</name> block. If the handler is being called when a menu first opens due to a <mouse>Menu</mouse> click, then this points to the block returned by the Wimp in the original <name>Mouse Click</name> event. When the handler is subsequently called before the menu is re-opened due to a selection being made with <mouse>Adjust</mouse>, the pointer will be <name>NULL</name>. Our application can use this to determine whether the menu is newly opening, or simply remaining on screen. This distinction doesn&rsquo;t matter to us, so we simply check the handle of the menu to make sure that it is the main menu, and then update the three ticks as we previously did.</p>

<p>The next piece of code to be updated is the <name>Menu Selection</name> event handler, which will follow the same format as the one that we updated for the iconbar menu. The changes can be seen in <reference id="list-menus-revisited-main-select"/>: the <variable>w</variable> parameter has been added, and we check that the correct menu pointer is in <variable>*menu</variable>. There is also no need to call <function>win_set_menu()</function> before returning, as the event library will do this for us automatically.</p>

<code id="list-menus-revisited-main-select" lang="c" title="Handling selections from the main menu">static void win_menu_selection(wimp_w window, wimp_menu *menu, wimp_selection *selection)
{
	if (menu != win_menu)
		return;

	switch (selection-&gt;items[0]) {
	case WIN_MENU_DECIMAL1:
		calc_set_format(1);
		break;
	case WIN_MENU_DECIMAL2:
		calc_set_format(2);
		break;
	case WIN_MENU_DECIMAL3:
		calc_set_format(3);
		break;
	}

       	win_update_all_calculations();
}</code>

<p>With our event handlers hooked up to the &lsquo;pseudo-events&rsquo;, we no longer need to open the menu when the user clicks <mouse>Menu</mouse> over the window. This means that we can update the <function>win_mouse_click()</function> function as shown in <reference id="list-menus-revisited-main-click"/>, so that it returns to just opening the pop-up menu.</p>

<code id="list-menus-revisited-main-click" lang="c" title="We only need to open the pop-up menu on Mouse Click events">static void win_mouse_click(wimp_pointer *pointer)
{
	if (pointer-&gt;i == WIN_ICON_SHAPE_POPUP &amp;&amp; pointer-&gt;buttons == wimp_CLICK_SELECT)
		menu_open_popup(win_shape_menu, pointer, win_shape_menu_selection);
}</code>

<p>With these changes in place, the code continue to function the same when compiled and run. The full set of updates can be found in <reference id="dl-menus-revisited-main"/>.</p>

<download id="dl-menus-revisited-main" file="MenuLibWin" title="Adding the Main Menu to SFLib's Events" compatibility="none"/>
</section>

<section>
<title>Automating pop-up menus</title>

<p>Now that we have given the problems of managing our main and iconbar menus over to the SFLib event library, it would be useful if we could delegate the pop-up menu as well. Fortunately we can, since the library allows menus to be attached to icons within a window as part of its icon-level event handling that we met back in <reference id="sect-icons-radio-sflib"/>.</p>

<p>Various levels of support are available, starting from a menu which is attached to an icon but which requires us to look after it through all of the usual &lsquo;pseudo-events&rsquo; that we have already seen. Whilst this is useful for doing custom things, it can be overklill for a simple pop-up menu and so, at the other end of the scale is a fully automatic option where the library looks after the menu completely and provides a function through which an application can read the current selection. We will need something somewhere in between: our menu is standard, but we do need to know when a new shape has been selected so that we can update the display.</p>

<p>To register a pop-up menu with an icon, the event library provides the <function>event_add_window_icon_popup()</function> function.</p>

<code lang="c">osbool event_add_window_icon_popup(
	wimp_w w,
	wimp_i i,
	wimp_menu *menu,
	wimp_i field,
	char *token
);</code>

<p>This takes five parameters, of which three are always required &ndash; these are shown graphically in <reference id="fig-menus-revisited-popup"/>. The <variable>w</variable> parameter should be the handle of the window containing the icon, while <variable>i</variable> should be the handle of the icon itself. A pointer to the <name>wimp_menu</name> block of the menu to be attached should be passed in the <variable>*menu</variable> parameter.</p>

<p>What value is passed to the <variable>field</variable> parameter will depend on how much control we want over the menu; passing <name>wimp_ICON_WINDOW</name> (indicating no icon) would leave us to look after everything, but since we want the library to look after the menu for us we also need to supply the handle of the icon to be used as the pop-up menu field. The <variable>*token</variable> parameter is a pointer to an optional MessageTrans token; since we haven&rsquo;t met MessageTrans yet, we can safely pass <name>NULL</name> for this.</p>

<image id="fig-menus-revisited-popup" file="menus-revisited-popup.png" title="The parts of a pup-up menu and its field"/>

<p>For our menu, we will need to make the call as follows:</p>

<code lang="c">event_add_window_icon_popup(win_handle, WIN_ICON_SHAPE_POPUP,
		win_shape_menu, WIN_ICON_SHAPE_FIELD, NULL);</code>

<p>So far, this has associated the pop-up menu with the icon, but our application will still receive events via the usual window-level event handlers. If we had passed <name>wimp_ICON_WINDOW</name> in the <variable>field</variable> parameter, then the menu would produce the four &lsquo;pseudo-events&rsquo;; since we have specified a field icon, our application will only receive <name>Menu Selection</name> events.</p>

<p>As we have provided a field icon, we can simplify things further by using the <function>event_set_window_icon_popup_action()</function> to change the behaviour of the menu; this is defined as follows:</p>

<code lang="c">osbool event_set_window_icon_popup_action(
	wimp_w w,
	wimp_i i,
	osbool complete,
	osbool (*callback)(wimp_w, wimp_menu *, unsigned)
);</code>

<p>By supplying the details of the pop-up icon from the previous call to <function>event_add_window_icon_popup()</function>, we can control how the event library handles the user interacting with the menu in more detail. The <variable>complete</variable> parameter allows us to choose whether the library considers its handling of the event &lsquo;complete&rsquo; according to the explanation in <reference id="sect-icons-radio-sflib"/>. The <variable>*callback</variable> parameter allows an icon-level event handler to be registered for the menu.</p>

<p>A full list of the combinations can be seen in <reference id="table-menus-revisited-popup"/>. Remember that <function>event_set_window_icon_popup_action()</function> can only be called if the <variable>field</variable> parameter to the <function>event_add_window_icon_popup()</function> function was <em>not</em> <name>wimp_ICON_WINDOW</name> &ndash; if it was, then all four menu &lsquo;pseudo-events&rsquo; will be returned.</p>

<table id="table-menus-revisited-popup" title="The different pop-up menh handling options">
<columns>
<col align="centre"><variable>complete</variable></col>
<col align="centre"><variable>*callback</variable></col>
<col align="left">Result</col>
</columns>
<row>
<col><name>TRUE</name></col>
<col><name>NULL</name></col>
<col>The library will handle the update of the pop-up menu and field, and the application will not receive any events.</col>
</row>
<row>
<col><name>FALSE</name></col>
<col><name>NULL</name></col>
<col>The library will handle the update of the pop-up menu and field, but selections will be reported to the application through the window-level <name>Menu Selection</name> event.</col>
</row>
<row>
<col><name>FALSE</name></col>
<col>Function Pointer</col>
<col>The library will handle the update of the pop-up menu and field, but selections will initially be reported to the application through the icon-level pop-up menu selection event. If its handler returns <name>FALSE</name> to indicate &ldquo;not complete&rdquo; a window-level <name>Menu Selection</name> event will then be raised.</col>
</row>
</table>

<p>In the case of our menu, although we want to leave the event library to sort out its operation, we still need to know when a selection has been made so that we can update the shape that is on display. We could do this using the window-level <name>Menu Selection</name> events, but since we already have a separate function to process selections from the pop-up menu, we will register this as an icon-level handler as follows:</p>

<code lang="c">event_set_window_icon_popup_action(win_handle, WIN_ICON_SHAPE_POPUP,
		FALSE, win_shape_menu_selection);</code>

<p>The only thing that remains for us to do now is to set the default selection, which we can do using the <function>event_set_window_icon_popup_selection()</function> function provided by the library. This takes the <name>wimp_w</name> and <name>wimp_i</name> handles for the pop-up menu icon, and the required index for the selection; it will set the menu ticks and update the pop-up menu field icon accordingly.</p>

<code lang="c">osbool event_set_window_icon_popup_selection(
	wimp_w w,
	wimp_i i,
	unsigned selection
);</code>

<p>A corresponding <function>event_get_window_icon_popup_selection()</function> function can be used to read the index of the current selection showing in the field, which can be useful in a situation where receiving and tracking events would be over complicated.</p>

<code lang="c">unsigned event_get_window_icon_popup_selection(
	wimp_w w,
	wimp_i i
);</code>

<p>Putting these changes together results in the amendments to the <function>win_initialise()</function> function shown in <reference id="list-menus-revisited-popup-init"/>. In addition to registering the pop-up menu and its handler, it initialises the menu to show the sqaure. Note that the <name>Mouse Click</name> handler is no longer being registered; since both menus are now displayed automatically, we no longer require the <function>win_mouse_click()</function> function and have therefore deleted it from the code.</p>

<code id="list-menus-revisited-popup-init" lang="c" title="Registering the pop-up menu in win_initialise()">/* Register event handlers. */

event_add_window_menu(win_handle, win_menu);
event_add_window_menu_prepare(win_handle, win_set_menu);
event_add_window_menu_selection(win_handle, win_menu_selection);
event_add_window_icon_popup(win_handle, WIN_ICON_SHAPE_POPUP, win_shape_menu, WIN_ICON_SHAPE_FIELD, NULL);
event_set_window_icon_popup_action(win_handle, WIN_ICON_SHAPE_POPUP, FALSE, win_shape_menu_selection);

/* Initialise the window contents. */

win_set_shape(CALC_SHAPE_SQUARE);
event_set_window_icon_popup_selection(win_handle, WIN_ICON_SHAPE_POPUP, WIN_MENU_SHAPE_SQUARE);</code>

<p>The updated <function>win_shape_menu_selection()</function> event handler has been updated to suit the prototype required by the icon-level pop-up menu event raised by SFLib&rsquo;s event library, as seen in <reference id="list-menus-revisited-popup-select"/>. It receives the <name>wimp_w</name> and <name>wimp_i</name> window and icon handles for the menu in <variable>window</variable> and <variable>icon</variable>; the currently selected index is provided in <variable>selection</variable>.</p>

<p>As with other icon-level event handlers, the function returns an <name>osbool</name> value, indicating whether the handling of the event should be considered complete. We do not wish to receive details of the event to the window-level <function>win_menu_selection()</function> function, so <function>win_shape_menu_selection()</function> returns <name>TRUE</name> to indicate that it has completely handled it.</p>

<code id="list-menus-revisited-popup-select" lang="c" title="The pop-up menu selection event handler">static osbool win_shape_menu_selection(wimp_w window, wimp_menu *menu, unsigned selection)
{
	switch (selection) {
	case WIN_MENU_SHAPE_CIRCLE:
		win_set_shape(CALC_SHAPE_CIRCLE);
		break;
	case WIN_MENU_SHAPE_TRIANGLE:
		win_set_shape(CALC_SHAPE_TRIANGLE);
		break;
	case WIN_MENU_SHAPE_SQUARE:
		win_set_shape(CALC_SHAPE_SQUARE);
		break;
	}

	return TRUE;
}</code>

<p>Once again, the updated code can be found in <reference id="dl-menus-revisited-popup"/>; from a user&rsquo;s perspective, it should function in the same way as the other versions in this chapter.</p>

<download id="dl-menus-revisited-popup" file="MenuLibPopUp" title="Making SFLib Manage the Pop-Up Menu" compatibility="none"/>
</section>

<section>
<title>Tidying up</title>

<p>With the changes above in place, all of the menus in our application are being handled by SFLib&rsquo;s event library &ndash; which means that the support for <name>Menu Selection</name> events and <name>Message_MenusDeleted</name> in <file>c.menus</file> is no longer required.</p>

<p>To tidy up, we can remove the calls to the <function>menu_initialise()</function> and <function>menu_process_event()</function> functions from <file>c.main</file>, and then delete them from <file>c.menus</file>. The <function>menu_message_menus_deleted()</function> function is no longer required, either. Finally, the <function>menu_open()</function>, <function>menu_open_ibar()</function>, <function>menu_open_popup()</function> and <function>menu_set_popup_menu()</function> functions are not required, since the library does these actions for us.</p>

<p>With these removed, the <file>c.menu</file> file only contains the <function>menu_create()</function> and <function>menu_entry()</function> functions for setting up menus blocks. We will keep these for now, since the system doesn&rsquo;s provide any standard way of building menus. The newly-streamlined code can be found in <reference id="dl-menus-revisited-complete"/>.</p>

<download id="dl-menus-revisited-complete" file="MenuLibComplete" title="Removing Our Custom Menu Event Support" compatibility="none"/>

<p>Now that we have tidied up our menu implementation, we can move on in the next chapter to look at another new area of the Wimp.</p>
</section>
</chapter>
</manual>

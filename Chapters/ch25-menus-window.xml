<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 25
   -
   - Standard Window Menus
  -->

<chapter id="chap-menus-window">
<resources>
<images>Chapter25</images>
<downloads>Chapter25</downloads>
</resources>
<filename>menus-window.html</filename>
<title>Standard Window Menus</title>

<summary>There&rsquo;s one type of menu that we haven&rsquo;t yet looked at: the &lsquo;standard&rsquo; one which opens at the mouse pointer.</summary>

<section>
<p>We&rsquo;ve now covered two special types of menu &ndash; the <reference id="chap-menus-intro">iconbar menu</reference> and <reference id="chap-menus-popup">pop-up menu</reference> &ndash; but have yet to look at the simplest type: one that opens over a window following a click with the <mouse>Menu</mouse> button.</p>

<p>It&rsquo;s now time for us to correct that omission, but first we will use some of our new-found knowledge to lay the foundations for our small application to do something useful. With the ability to select from a range of shapes, we could perhaps use it to do some simple geometric calculations.</p>
</section>

<section>
<title>Updating the templates</title>

<p>The first thing that we need to do is to update the window templates to include some new icons. Load <file>!ExamplApp.Templates</file> into your template editor, then open the &ldquo;Main&rdquo; window. As ever, we will be using <cite>WinEd</cite> in the description that follows.</p>

<p>We are going to add two new display fields, as seen in <reference id="fig-menus-window-window"/>. Expand the work area downwards, then drag a couple of display fields and labels across from the <window>Icon picker</window> into the positions shown.</p>

<p>If the work is done in <cite>WinEd</cite>, then the icons will be numbered 4 and 5 for the <icon>Sides</icon> display field and label respectively, then 6 and 7 for the <icon>Internal angles</icon> display field and label. These will be the numbers that we will use in our code below.</p>

<p>Both display field icons use the <name>R</name> validation command that we have met before, in <reference id="sect-icons-indirect-format"/> and <reference id="chap-templates"/>, to create the 3D effect. Entering a default string of &ldquo;000&rdquo; into the <icon>Sides</icon> field ensures that <cite>WinEd</cite> configures a <icon>Max text length</icon> of 4 &ndash; allowing up to three digits and a terminator. In a similar way, the &ldquo;00000000&rdquo; in the <icon>Internal angles</icon> field ensures a length of 8 digits plus a terminator, or a total length of 9.</p>

<p>Close the window and save the changes to the templates file.</p>

<image id="fig-menus-window-window" file="menus-window-window.png" title="The window with two new result fields included"/>
</section>

<section>
<title>Adding a calculator</title>

<p>In order to be able to complete our two new fields, we will need some way to identify the number of sides for each of our shapes, and to calculate their internal angles. It&rsquo;s usually a good idea to separate the code which does the actual work from the code which handles the user interface, so we will add another source file called <file>c.calc</file> and its associated header file <file>h.calc</file>. It will be necessary to update the <variable>OBJS</variable> list in the <file>Makefile</file> to include a reference to it.</p>

<code lang="makefile">OBJS = calc main menu ibar win</code>

<p>The new file will be a self-contained module for calculating simple geometry for the shapes that we are using. The <file>h.calc</file> header file can be seen in <reference id="code-menus-window-calc-h"/>, whilst the main code from <file>c.calc</file> can be seen in <reference id="code-menus-window-calc-c"/>. The new <name>enum calc_shape</name> will replace the <name>enum win_shape</name> which was previously defined in <file>c.win</file>.</p>

<code id="code-menus-window-calc-h" lang="c" file="h.calc" title="The new calculation header">#ifndef EXAMPLEAPP_CALC
#define EXAMPLEAPP_CALC

/* Display Shapes */

enum calc_shape {
	CALC_SHAPE_NONE,
	CALC_SHAPE_SQUARE,
	CALC_SHAPE_CIRCLE,
	CALC_SHAPE_TRIANGLE
};

/* Calculation Initialisation. */

void calc_initialise(void);

/* Shape Selection. */

void calc_set_shape(enum calc_shape shape);

/* Set the formatting of results. */

void calc_set_format(int places);

/* Get the decimal places. */

int calc_get_places(void);

/* The number of sides. */

char *calc_get_sides(void);

/* The internal angle. */

char *calc_get_internal_angle(void);

#endif</code>

<code id="code-menus-window-calc-c" lang="c" file="c.calc" title="The new calculation code">/* Constants. */

#define CALC_BUFFER_LENGTH 32
#define CALC_FORMAT_LENGTH 8

/* Global Variables. */

static enum calc_shape calc_current_shape = CALC_SHAPE_NONE;

static int calc_current_sides = 0;

static int calc_current_places = 0;

static char calc_buffer[CALC_BUFFER_LENGTH];

static char calc_format[CALC_FORMAT_LENGTH];

static char *calc_not_applicable = &quot;n/a&quot;;

/* Calculation Initialisation. */

void calc_initialise(void)
{
	calc_set_format(2);
	calc_set_shape(CALC_SHAPE_NONE);
}

/* Shape Selection. */

void calc_set_shape(enum calc_shape shape)
{
	calc_current_shape = shape;

	switch (shape) {
	case CALC_SHAPE_CIRCLE:
		calc_current_sides = 1;
		break;
	case CALC_SHAPE_TRIANGLE:
		calc_current_sides = 3;
		break;
	case CALC_SHAPE_SQUARE:
		calc_current_sides = 4;
		break;
	default:
		calc_current_sides = 0;
		break;
	}
}

/* Set the formatting of results. */

void calc_set_format(int places)
{
	if (places &gt;= 0 &amp;&amp; places &lt;= 5) {
		calc_current_places = places;
		string_printf(calc_format, CALC_FORMAT_LENGTH, &quot;%%.%df&quot;, places);
	}
}

/* Get the decimal places. */

int calc_get_places(void)
{
	return calc_current_places;
}

/* The number of sides. */

char *calc_get_sides(void)
{
	if (calc_current_sides &gt; 1) {
		string_printf(calc_buffer, CALC_BUFFER_LENGTH, &quot;%d&quot;, calc_current_sides);
	} else {
		string_printf(calc_buffer, CALC_BUFFER_LENGTH, calc_not_applicable);
	}

	return calc_buffer;
}

/* The internal angle. */

char *calc_get_internal_angle(void)
{
	double angle;

	if (calc_current_sides &gt; 2) {
		angle = ((calc_current_sides - 2.0) * 180.0) / calc_current_sides;
		string_printf(calc_buffer, CALC_BUFFER_LENGTH, calc_format, angle);
	} else {
		string_printf(calc_buffer, CALC_BUFFER_LENGTH, calc_not_applicable);
	}

	return calc_buffer;
}</code>

<p>The code starts with some global constants and variables, which between them provide storage for the current shape and formatting choices. There are two buffers: one to hold the most recently generated output text, and the other to hold a <function>printf()</function> format string.</p>

<p>The <function>calc_initialise()</function> function needs to be called from <function>main_initialise()</function> in order to set up the variables and buffers to some sensible defaults, after which <function>calc_set_shape()</function> and <function>calc_set_format()</function> can be used to choose the active shape and set the number of decimal places used when displaying numbers. The configured number of decimal places can be read back using the <function>calc_get_places()</function> function.</p>

<p>The other two functions are <function>calc_get_sides()</function> and <function>calc_get_internal_angle()</function>, which return a pointer to the output buffer having written a suitable string into it given the current shape. To avoid getting into geometric arguments, this will be &ldquo;n/a&rdquo; for the circle, and the calculated values for the triangle and square.</p>

<p>We can now modify the <function>win_set_shape()</function> function in <file>c.win</file> as shown in <reference id="list-menus-window-set-shape"/>, so that it calls a new <function>win_update_all_calculations()</function> function to make use of the new facilities.</p>

<code id="list-menus-window-set-shape" lang="c" title="Upodating the data fields">static void win_set_shape(enum calc_shape shape)
{
	char *sprite = NULL;

	/* Update the graphic. */

	switch (shape) {
	case CALC_SHAPE_SQUARE:
		sprite = &quot;square&quot;;
		break;
	case CALC_SHAPE_CIRCLE:
		sprite = &quot;circle&quot;;
		break;
	case CALC_SHAPE_TRIANGLE:
		sprite = &quot;triangle&quot;;
		break;
	}

	if (sprite != NULL) {
		icons_strncpy(WIN_HANDLE, win_icon_shape, sprite);
		wimp_set_icon_state(win_handle, WIN_ICON_SHAPE, 0, 0);
	}

	/* Change the shape. */

	calc_set_shape(shape);

	/* Perform the shape calculations. */

	win_update_all_calculations();
}

/* Update the shape data fields. */

static void win_update_all_calculations(void)
{
	char *text = NULL;

	text = calc_get_sides();
	if (text != NULL) {
		icons_strncpy(win_handle, WIN_ICON_SIDES_FIELD, text);
		wimp_set_icon_state(win_handle, WIN_ICON_SIDES_FIELD, 0, 0);
	}

	text = calc_get_internal_angle();
	if (text != NULL) {
		icons_strncpy(win_handle, WIN_ICON_INT_ANGLE_FIELD, text);
		wimp_set_icon_state(win_handle, WIN_ICON_INT_ANGLE_FIELD, 0, 0);
	}
}</code>

<p>The function now takes a parameter of the new <name>enum calc_shape</name> type, so the calls made to it will need to be updated accordingly.</p>

<p>When compiled and run, our application window should look similar to that shown in <reference id="fig-menus-window-calcs"/>. Choosing different shapes from the pop-up menu should result in the <icon>Sides</icon> and <icon>Internal angles</icon> fields updating to show appropriate values.</p>

<image id="fig-menus-window-calcs" file="menus-window-calcs.png" title="The application can now show some information about the displayed shape"/>

<p>The full code of the changes can be found in <reference id="dl-menus-window-calcs"/>.</p>

<download id="dl-menus-window-calcs" file="ShapeData" title="A Simple Shape Database" compatibility="none"/>
</section>

<section>
<title>A window menu</title>

<p>When adding our calculation facility, we included support for setting the number of decimal places to which values will be displayed. This doesn&rsquo;t actually make a lot of difference for the shapes and data that we are able to show &ndash; although it would become relevant if we extended the shapes to include a heptagon, where the internal angle isn&rsquo;s a round number of degrees. What we can&rsquo;t do at present is change this value without recompiling our code.</p>

<p>An obvious solution would be to provide a menu which contains these options, so we will do just that. It&rsquo;s possible to imagine further &lsquo;behavioural&rsquo; parameters that we might wish to adjust in the future, so we will create a general menu for the window to hold them all. We can start by adding some constants to <file>c.win</file> which define the menu entries as seen in <reference id="list-menus-window-const"/> and a new global variable for the <name>wimp_menu</name> block pointer as in <reference id="list-menus-window-global"/>.</p>.

<code id="list-menus-window-const" lang="c" title="Constants to define the window menu entries">/* Window Menu Entries. */

#define WIN_MENU_DECIMAL1 0
#define WIN_MENU_DECIMAL2 1
#define WIN_MENU_DECIMAL3 2</code>

<code id="list-menus-window-global" lang="c" title="A new global variable to hold a pointer to the menu">/* Global Variables */

static wimp_w win_handle;
static wimp_menu *win_menu;
static wimp_menu *win_shape_menu;</code>

<p>The menu itself can then be defined in the <function>win_initialise()</function> function as shown in <reference id="list-menus-window-init"/>, in a way which should now be familiar.</p>

<code id="list-menus-window-init" lang="c" title="Defining the main window menu">/* Window Menu. */

win_menu = menu_create(&quot;Example&quot;, 3);
if (win_menu == NULL) {
	error_report_error(&quot;Failed to create Main Menu&quot;);
	return;
}

menu_entry(win_menu, WIN_MENU_DECIMAL1, &quot;1 Decimal place&quot;, NULL);
menu_entry(win_menu, WIN_MENU_DECIMAL2, &quot;2 Decimal places&quot;, NULL);
menu_entry(win_menu, WIN_MENU_DECIMAL3, &quot;3 Decimal places&quot;, NULL);</code>

<p>Now that we have the new menu defined, we can open it when the user clicks <mouse>Menu</mouse> over the window. So far, we have created functions to open menus <reference id="sect-menus-selection-dispatch">over the iconbar</reference> and <reference id="sect-menus-popup-code">from pop-up menu fields</reference>, but do not yet have a way to open a menu at the mouse pointer. To rectify this, we can add another function to <file>c.menu</file> which will open a menu in the standard position, as shown in <reference id="list-menus-window-open"/>.</p>

<code id="list-menus-window-open" lang="c" title="A function to open a standard menu">void menu_open(wimp_menu *menu, wimp_pointer *pointer,
		void (*callback)(wimp_menu *menu, wimp_selection *selection))
{
	menu_current_menu = menu;
	menu_current_callback = callback;

	menus_create_standard_menu(menu, pointer);
}</code>

<p>As before, this simply defers to SFLib&rsquo;s <function>menus_create_standard_menu()</function> function to display the menu. When opening a menu at the mouse pointer as a result of a <mouse>Menu</mouse> click, the process is a lot easier that the other situations that we have seen so far. The <cite>Style Guide</cite> requires that it is opened at the <maths>y</maths> coordinate of the click, and 64 OS&nbsp;units to the left of the <maths>x</maths> coordinate; the code that SFLib uses to achieve this can be seen in <reference id="list-menus-window-sflib"/>.</p>

<code id="list-menus-window-sflib" lang="c" title="The code used by SFLib to position a standard menu">wimp_menu *menus_create_standard_menu(wimp_menu *menu, wimp_pointer *pointer)
{
	if (menu == NULL || pointer == NULL)
		return NULL;

	if (xwimp_create_menu(menu, pointer-&gt;pos.x - 64, pointer-&gt;pos.y) != NULL)
		return NULL;

	return menu;
}</code>

<p>Armed with the new <function>menu_open()</function> function, we can update the <function>win_mouse_click()</function> event handler as shown in <reference id="list-menus-window-click"/>, so that <mouse>Menu</mouse> clicks anywhere over the window will cause the main menu to be opened.</p>

<code id="list-menus-window-click" lang="c" title="Menu click events over the window will open the main menu">static void win_mouse_click(wimp_pointer *pointer)
{
	if (pointer-&gt;i == WIN_ICON_SHAPE_POPUP &amp;&amp; pointer-&gt;buttons == wimp_CLICK_SELECT) {
		menu_open_popup(win_shape_menu, pointer, win_shape_menu_selection);
	} else if (pointer-&gt;buttons == wimp_CLICK_MENU) {
		win_set_menu();
		menu_open(win_menu, pointer, win_menu_selection);
	}
}</code>

<p>Before the menu is opened, the <function>win_set_menu()</function> function in <reference id="list-menus-window-set"/> is called to place a tick against the currently selected choice of decimal places. This reads the configured number of places back from the calc module first.</p>

<code id="list-menus-window-set" lang="c" title="Updating the main menu ready for display">static void win_set_menu(void)
{
	int places;

	places = calc_get_places();

	menus_tick_entry(win_menu, WIN_MENU_DECIMAL1, places == 1);
	menus_tick_entry(win_menu, WIN_MENU_DECIMAL2, places == 2);
	menus_tick_entry(win_menu, WIN_MENU_DECIMAL3, places == 3);
}</code>

<p>The final piece of the jigsaw is the <name>Menu_Selection</name> event handler in <function>win_menu_selection()</function>, which can be seen in <reference id="list-menus-window-select"/>. This sets the required number of decimal places in the calc module, before calling <function>win_update_all_calculations()</function> to update the display fields with the new settings. Finally <function>win_set_menu()</function> is called, so that the tick can be updated before the menu is reopened if <mouse>Adjust</mouse> was clicked.</p>

<code id="list-menus-window-select" lang="c" title="Processing selections from the main menu">static void win_menu_selection(wimp_menu *menu, wimp_selection *selection)
{
	switch (selection->items[0]) {
	case WIN_MENU_DECIMAL1:
		calc_set_format(1);
		break;
	case WIN_MENU_DECIMAL2:
		calc_set_format(2);
		break;
	case WIN_MENU_DECIMAL3:
		calc_set_format(3);
		break;
	}

	win_update_all_calculations();
	win_set_menu();
}</code>

<p>If the code is compiled and the application run, the menu should appear as seen in <reference id="fig-menus-window-menu"/>. Selecting different numbers of places from the menu should update the number in the <icon>Internal angles</icon> field, assuming that shape isn&rsquo;t a circle!</p>

<image id="fig-menus-window-menu" file="menus-window-menu.png" title="The main menu allows the decimal places to be changed"/>

<p>The full code and templates can be found in <reference id="dl-menus-window-menu"/>.</p>

<download id="dl-menus-window-menu" file="MainMenu" title="Adding a Main Menu to the Window" compatibility="none"/>
</section>

<section>
<title>Updating menus</title>

<p>Now that we have two menus in our window, both of which are opened following clicks handled in <function>win_mouse_click()</function>, observant readers might have noticed a difference between the way that the two are treated.</p>

<code lang="c">static void win_mouse_click(wimp_pointer *pointer)
{
	if (pointer-&gt;i == WIN_ICON_SHAPE_POPUP &amp;&amp; pointer-&gt;buttons == wimp_CLICK_SELECT) {
		menu_open_popup(win_shape_menu, pointer, win_shape_menu_selection);
	} else if (pointer-&gt;buttons == wimp_CLICK_MENU) {
		win_set_menu();
		menu_open(win_menu, pointer, win_menu_selection);
	}
}</code>

<p>Both menus currently contain three entries, of which one can be ticked at any given time. However, whilst both of the two <name>Menu_Selection</name> handlers &ndash; in <function>win_menu_selection()</function> and <function>win_shape_menu_selection()</function> &ndash; call their respective routines to update the ticks in case the menu is reopened by an <mouse>Adjust</mouse> click, this isn&rsquo;t true of when the menus are initially opened.</p>

<p>Before the main menu, whose pointer is in <variable>win_menu</variable> is opened with a call to <function>menu_open()</function>, there is a call made to <function>win_set_menu()</function> first to ensure that the tick is in the correct place. However, when the pop-up menu whose handle is in <variable>win_shape_menu</variable> is opened, there is no set-up done before <function>menu_open_popup()</function> is called. Instead the code relies on the fact that <function>win_set_shape_menu()</function> was called by the <function>win_initialise()</function> function, and will be left up-to-date each time a selection is made.</p>

<p>There is actually a good reason for this in our example, because there is no way for the pop-up menu&rsquo;s set routine to read the shape that is currently active. When the window is initialised or a menu selection made, the shape and the ticks are set to match each other and the calc module is informed of the change through the <function>calc_set_shape()</function> function. Since we haven&rsquo;t defined a corresponding <function>calc_get_shape()</function> function, it wouldn&rsquo;t be possible for <function>win_set_shape_menu()</function> to read the current shape back in the way that <function>win_set_menu()</function> does for the decimal places.</p>

<p>Which approach to use is largely down to the developer, and different situations may well suggest different solutions. In general, your author would probably recommend using the approach taken by <function>win_set_menu()</function> and setting all of the ticks, shadings and other configurable aspects of a menu each time it is opened and reopened on screen. This keeps all of the associated code in one place, and can be much easier to maintain than if each separate routine updates the parts of the menu that it uses directly.</p>

<p>In addition, as we will see in the <reference id="chap-menus-revisited">next chapter</reference>, this is the approach that SFLib supports with its own menu handling.</p>
</section>
</chapter>
</manual>

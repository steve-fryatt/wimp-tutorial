<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 8
   -
   - Reporting Errors & Other Messages
  -->

<chapter id="chap-report">
<resources>
<images>Chapter08</images>
<downloads>Chapter08</downloads>
</resources>
<filename>report.html</filename>
<title>Reporting Errors and Other Messages</title>

<summary>It&rsquo;s time to start communicating with the user...</summary>

<section>
<p>Now that we have an icon on the iconbar and are responding when the user clicks on it, it&rsquo;s time to start looking at communicating back. In a normal application, interaction with the user would be through windows and menus. We&rsquo;ve not encountered those yet, but what we can do is give some feedback using the somewhat simpler report provided by the Wimp&rsquo;s <intro>error system</intro>.</p>
</section>


<section>
<title>Giving feedback</title>

<p>Alongside windows and menus, the Wimp provides <intro>reports</intro> which enable applications to inform the user about things that have gone wrong. They have grown in capability over the years, and now provide the facility to report information and ask questions without having to go through the relatively cumbersome process of opening a window on the screen. Their simplicity comes from the fact that they don&rsquo;t multitask at all &ndash; this can make them significantly easier to handle when things are going wrong, but it&rsquo;s also a feature that is frequently held against them.</p>

<p>The appearance of the report boxes has evolved over the years; an example from Draw running on a recent version of the OS can be seen in <reference id="fig-report-example-draw"/>.</p>

<image id="fig-report-example-draw" file="report-example-draw.png" title="A simple example of a Wimp Report box"/>

<p>Error reports are made using <swi>Wimp_ReportError</swi>, which maps to <em>two</em> functions in OSLib: <function>wimp_report_error()</function> and <function>wimp_report_error_by_category()</function>. Aside from anything else, this provides a neat example of how OSLib handles SWIs which present two or more significantly different options in the sets of parameters that they require. In this case, the reason is that error reporting changed significantly when RISC&nbsp;OS&nbsp;3.5 was released with the RiscPC. Although modern applications should probably be using the new interface, the old one is still more or less supported and &ndash; as it requires less setting up, we&rsquo;ll start there before upgrading to the new system.</p>

<p>Creating an &lsquo;old&rsquo; report is done using the <function>wimp_report_error()</function> function, and requires just three pieces of information. The function&rsquo;s prototype is defined as follows:</p>

<code lang="c">extern wimp_error_box_selection wimp_report_error(
	os_error const		*error,
	wimp_error_box_flags	flags,
	char const		*name
);</code>

<p>The first item is <variable>*error</variable>, which is a pointer to a standard OS <intro>error block</intro>. These blocks are used throughout RISC&nbsp;OS, and not just by the Wimp: they&rsquo;re returned by the &lsquo;X&rsquo; form of SWIs when things go wrong, and the idea is that in an application, they can be passed straight on to <swi>Wimp_ReportError</swi> if required. As we can tell from the fact that <name>os_error</name> begins with &ldquo;os_&rdquo; and not &ldquo;wimp_&rdquo;, OSLib defines the structure in <file>oslib/os.h</file> and not <file>oslib/wimp.h</file>. The definition is as follows:</p>

<code lang="c">struct os_error {
	bits	errnum;
	char	errmess[252];
};

typedef struct os_error os_error;</code>

<p>The 256 byte block contains an <intro>error number</intro> in <variable>os_error.errnum</variable>, followed by an arbitrary message in <variable>os_error.errmess</variable>. The number is a RISC&nbsp;OS error number and will often define precisely what the problem was. In the case that we wish to use <swi>Wimp_ReportError</swi> to present a message to the user, then the actual error number is somewhat arbitrary. Setting it to 255 &ndash; which is unused by the OS &ndash; seems to be a common compromise. We could, therefore, set up an error block to pass a message to the user using code similar to the following:</p>

<code lang="c">os_error error;

error.errnum = 255;
strncpy(error.errmess, &quot;Hello World!&quot;, os_ERROR_LIMIT);
error.errmess[os_ERROR_LIMIT - 1] = '\0';</code>

<p>It&rsquo;s generally good practice to use <function>strncpy()</function> instead of the older <function>strcpy()</function> function to copy strings into buffers, in order to ensure that we don&rsquo;t over-run the allocated space. The function is available in the 32-bit Shared C Library, so there&rsquo;s no reason for avoiding it. It&rsquo;s also important to terminate the copied string at the end of the buffer, since <function>strncpy()</function> won&rsquo;t do this for us if it did run out of space. OSLib defines <name>os_ERROR_LIMIT</name> for us to be 252, to reflect the size of the buffer defined by RISC&nbsp;OS.</p>

<p>The <variable>flags</variable> passed in parameter 2 control the appearance of the box, and for now we&rsquo;ll set them to <name>wimp_ERROR_BOX_OK_ICON</name> to request that an <icon>OK</icon> button is provided. The final parameter, <variable>*name</variable>, should point to a string containing the name of our application &ndash; in <file>c.main</file> we tell <swi>Wimp_Initialise</swi> that the application is called &lsquo;Example App&rsquo;, so we&rsquo;ll stick with that here.</p>
</section>

<section>
<title>A generic function</title>

<p>Since this is all a little cumbersome when we simply wish to present a message to the user, it would make sense to package <swi>Wimp_ReportError</swi> up into a separate chunk of code. To that end, we&rsquo;ll create a new file called <file>c.repbox</file>, as shown in <reference id="list-report-repbox-h"/> which defines a <function>repbox_message(char *message)</function>.</p>

<code id="list-report-repbox-h" lang="c" file="c.repbox" title="The new report file">/**
 * Example 8.1
 *
 * (c) Stephen Fryatt, 2017
 *
 * File: repbox.c
 */

#include &quot;oslib/os.h&quot;
#include &quot;oslib/wimp.h&quot;

#include &lt;string.h&gt;

#include &quot;repbox.h&quot;

/* Report a message */

void repbox_message(char *message)
{
	os_error error;

	error.errnum = 255;
	strncpy(error.errmess, message, os_ERROR_LIMIT);
	error.errmess[os_ERROR_LIMIT - 1] = '\0';

	wimp_report_error(&amp;error, wimp_ERROR_BOX_OK_ICON, &quot;Example App&quot;);
}</code> 

<p>This is more or less the code that we outlined above, except that the message being copied into the error block is the one pointed to by the <variable>*message</variable> parameter. Note that we&rsquo;re including both <file>oslib/wimp.h</file> <em>and</em> <file>oslib/os.h</file> in order to be able to use <name>os_error</name>.</p>

<p>The file also includes the <file>h.repbox</file> file, which is as shown in <reference id="list-report-repbox-c"/>. It merely provides a function prototype for <function>repbox_message()</function>, so that we can access it from elsewhere in the application.</p>

<code id="list-report-repbox-c" lang="c" file="h.repbox" title="The header for the new report file">/**
 * Example 8.1
 *
 * (c) Stephen Fryatt, 2017
 *
 * File: repbox.h
 */

#ifndef EXAMPLEAPP_REPBOX
#define EXAMPLEAPP_REPBOX

/* Report a message */

void repbox_message(char *message);

#endif</code>

<p>Armed with this new code, we can now <code>#include &quot;repbox.h&quot;</code> in <file>c.ibar</file> before using the new reporting function to respond to the user clicking on the iconbar icon. If we wished to greet the user when they click <mouse>Select</mouse> on the icon, we could amend the <code>switch</code> statement as follows:</p>

<code lang="c">static void ibar_mouse_click(wimp_pointer *pointer)
{
	switch (pointer->buttons) {
	case wimp_CLICK_SELECT:
		repbox_message(&quot;Hello World!&quot;);
		break;
	case wimp_CLICK_ADJUST:
		main_quit_flag = TRUE;
		break;
	}
}</code>

<p>If we now amend the <file>Makefile</file> so that the <code>OBJS</code> line reads</p>

<code lang="makefile">OBJS = main ibar repbox</code>

<p>we can double-click on <file>Mk</file> to build a new version of our application. After running it, click <mouse>Select</mouse> on its iconbar icon and the report shown in <reference id="fig-report-box-old-ok"/> should appear. The full code can be found in <reference id="dl-report-old"/>.</p>

<image id="fig-report-box-old-ok" file="report-box-old-ok.png" title="Our first feedback from the application"/>

<download id="dl-report-old" file="OldReportBox" title="Respond to Select Clicks with a Simple Report" compatibility="none"/>
</section>

<section>
<title>Different options</title>

<p>The <variable>flags</variable> passed to <function>wimp_report_error()</function> allow us to tailor the report to a certain extent. OSLib defines a number of constants for <name>wimp_error_box_flags</name>, of which the following are applicable to the &lsquo;old&rsquo; reports.</p>

<code lang="c">#define wimp_ERROR_BOX_OK_ICON			((wimp_error_box_flags) 0x1u)
#define wimp_ERROR_BOX_CANCEL_ICON		((wimp_error_box_flags) 0x2u)
#define wimp_ERROR_BOX_HIGHLIGHT_CANCEL		((wimp_error_box_flags) 0x4u)
#define wimp_ERROR_BOX_NO_PROMPT		((wimp_error_box_flags) 0x8u)
#define wimp_ERROR_BOX_SHORT_TITLE		((wimp_error_box_flags) 0x10u)
#define wimp_ERROR_BOX_LEAVE_OPEN		((wimp_error_box_flags) 0x20u)
#define wimp_ERROR_BOX_CLOSE			((wimp_error_box_flags) 0x40u)
#define wimp_ERROR_BOX_NO_BEEP			((wimp_error_box_flags) 0x80u)</code>

<p>The report currently produced by the application and shown in <reference id="fig-report-box-old-ok"/> had the <name>wimp_ERROR_BOX_OK_ICON</name> flag set, which resulted in an <icon>OK</icon> button &ndash; in fact, this is the default state, which the Wimp will fall back to if <em>no</em> flags are set at all. We could, however, have specified <name>wimp_ERROR_BOX_CANCEL_ICON</name> instead:</p>

<code lang="c">wimp_report_error(&amp;error, wimp_ERROR_BOX_CANCEL_ICON, &quot;Example App&quot;);</code>

<p>As might be expected, the report now has a <icon>Cancel</icon> button instead of <icon>OK</icon> &ndash; as shown in <reference id="fig-report-box-old-cancel"/>.</p>

<image id="fig-report-box-old-cancel" file="report-box-old-cancel.png" title="Using the wimp_ERROR_BOX_CANCEL_ICON flag"/>

<p>Similarly, we could request the inclusion of <em>both</em> buttons by setting both flags: this is done by bitwise-oring them together using the <code>|</code> operator:</p>

<code lang="c">wimp_report_error(&amp;error,
		wimp_ERROR_BOX_OK_ICON | wimp_ERROR_BOX_CANCEL_ICON, &quot;Example App&quot;);</code>

<p>The result can be seen in <reference id="fig-report-box-old-ok-cancel"/>.</p>

<image id="fig-report-box-old-ok-cancel" file="report-box-old-ok-cancel.png" title="Using the OK and Cancel flags together"/>

<p>In each case, the highlighted button is the <intro>default</intro>, and will be selected if <key>Return</key> is pressed. In the <reference id="fig-report-box-old-ok-cancel">last example</reference> the <icon>OK</icon> button was highlighted, but we might prefer <icon>Cancel</icon> to be highlighted instead &ndash; perhaps if we were asking whether the user <em>really</em> wished to delete their unsaved document. To achieve this, we simply include <name>wimp_ERROR_BOX_HIGHLIGHT_CANCEL</name> in the flags:</p>

<code lang="c">wimp_report_error(&amp;error,
		wimp_ERROR_BOX_OK_ICON | wimp_ERROR_BOX_CANCEL_ICON | wimp_ERROR_BOX_HIGHLIGHT_CANCEL,
		&quot;Example App&quot;);</code>

<p>The effect is to swap the two buttons over, such that <icon>Cancel</icon> is now the default. This can be seen in <reference id="fig-report-box-old-cancel-ok"/>.</p>

<image id="fig-report-box-old-cancel-ok" file="report-box-old-cancel-ok.png" title="Making Cancel the default action"/>

<p>The title of the report in <reference id="fig-report-box-old-ok"/> above was &ldquo;Message from Example App&rdquo;: this came from the Wimp prefixing the application name pointed to by  <variable>*name</variable> with &ldquo;Message from &rdquo;. In older versions of RISC&nbsp;OS, this could be the slightly more worrying &ldquo;Error from &rdquo; instead. It&rsquo;s possible to ask the Wimp not to do this by including <name>wimp_ERROR_BOX_SHORT_TITLE</name> in <variable>flags</variable> &ndash; meaning that the title will be the exact string pointed to by <variable>*name</variable>;. Either way, the supplied text must be less than 20 characters long.</p>

<p>The other flags are all fairly esoteric, and are of little use to a multi-tasking Wimp application. It&rsquo;s worth highlighting <name>wimp_ERROR_BOX_NO_BEEP</name>, however: it does exactly what its name suggests, and prevents the &lsquo;beep&rsquo; when the report opens. Setting this flag prevents the user from making their own choice on a system-wide basis, and is the first of many examples where the Wimp offers us options that we shouldn&rsquo;t take up if we wish to be &lsquo;sociable&rsquo;.</p>
</section>

<section>
<title>Upgrading our report</title>

<p>As noted above, <function>wimp_report_error()</function> accesses a usage of <swi>Wimp_ReportError</swi> which was deprecated in 1994 &ndash; although there are still a number of applications using it, including the example from Draw seen in <reference id="fig-report-example-draw"/>! The new interface offers a number of useful improvements, however &ndash; it would be daft not to make use of them.</p>

<p>The newer <function>wimp_report_error_by_category()</function> function is defined by OSLib as:</p>

<code lang="c">extern wimp_error_box_selection wimp_report_error_by_category(
	os_error const		*error,
	wimp_error_box_flags	flags,
	char const		*name,
	char const		*sprite_name,
	osspriteop_area const	*area,
	char const		*buttons
);</code>

<p>The first three parameters are exactly the same as for <function>wimp_report_error()</function>, except that <variable>flags</variable> now has a few more options to set:</p>

<code lang="c">#define wimp_ERROR_BOX_GIVEN_CATEGORY		((wimp_error_box_flags) 0x100u)
#define wimp_ERROR_BOX_CATEGORY			((wimp_error_box_flags) 0xE00u)</code>

<p>It&rsquo;s necessary to set <name>wimp_ERROR_BOX_GIVEN_CATEGORY</name> in order to use the new API, so this flag is actually mandatory when calling <function>wimp_report_error_by_category()</function>. This then enables the <intro>bit-field</intro> over the range covered by <name>wimp_ERROR_BOX_CATEGORY</name>, which allows us to set a &lsquo;category&rsquo; for the report.</p>

<p>These bit-fields are a common feature of flag words used by Wimp SWIs, and are something that we&rsquo;ll encounter again and again. By defining <name>wimp_ERROR_BOX_CATEGORY</name> to be <code>((wimp_error_box_flags) 0xE00u)</code>, OSLib is saying that the error box category fills the range of bits which make up 0xE00u &ndash; that&rsquo;s bits 9, 10 and 11 of the word. The Wimp treats these bits as a 3-bit number in the range from 0 to 7, instead of viewing them as three separate flags.</p>

<p>OSlib goes on to define a few more useful constants, the first of which are the values that the Wimp will accept in this field:</p>

<code lang="c">#define wimp_ERROR_BOX_CATEGORY_INFO		((wimp_error_box_flags) 0x1u)
#define wimp_ERROR_BOX_CATEGORY_ERROR		((wimp_error_box_flags) 0x2u)
#define wimp_ERROR_BOX_CATEGORY_PROGRAM		((wimp_error_box_flags) 0x3u)
#define wimp_ERROR_BOX_CATEGORY_QUESTION	((wimp_error_box_flags) 0x4u)</code>

<p>A value of 0 is the &lsquo;default&lsquo; (or &lsquo;non-classified&rsquo;, as the <cite>Programmer&rsquo;s Reference Manual</cite> refers to it) report, with values 1 to 4 being &lsquo;Information&rsquo;, &lsquo;Error&rsquo;, &lsquo;Program Error&rsquo; and &lsquo;Question&rsquo; respectively. Finally, a shift value is defined, to tell us how far those four constants need to be shifted in order to locate them correctly in the value passed to <variable>flags</variable>:</p>

<code lang="c">#define wimp_ERROR_BOX_CATEGORY_SHIFT		(9)</code>

<p>The four categories are more or less what their names suggest. Information reports are intended to be informational: that is, telling the user something that&rsquo;s normal and not of concern. Similarly, Questions are for asking the user things when the situation is normal. Errors are for when things have gone wrong but the application remains in control &ndash; running out of memory or disc space, perhaps; a corrupt file; bad user input. Program Errors are for when things have gone seriously wrong in a way that the application can&rsquo;t handle: usually the result of bugs or incompatibilities with unexpected hardware or OS versions, and almost always resulting in the application exiting immediately afterwards.</p>

<p>Each type of report has a different symbol displayed to the user at the left-hand side of the box: the ones used on RISC&nbsp;OS&nbsp;5 can be seen in <reference id="fig-report-sprites"/> The symbols are in order, with category &lsquo;warning&rsquo; (category 0) on the left through to &lsquo;question&rsquo; (category 4) on the right.</p>

<image id="fig-report-sprites" file="report-sprites.png" title="Wimp report symbols for categories 0 to 4"/>

<p>We can update our <function>repbox_message()</function> in <file>c.report</file> to make use of the new report by changing it as follows:</p>

<code lang="c">void repbox_message(char *message)
{
	os_error error;

	error.errnum = 255;
	strncpy(error.errmess, message, os_ERROR_LIMIT);
	error.errmess[os_ERROR_LIMIT - 1] = '\0';

	wimp_report_error_by_category(&amp;error, wimp_ERROR_BOX_GIVEN_CATEGORY  |
			(wimp_ERROR_BOX_CATEGORY_INFO &lt;&lt; wimp_ERROR_BOX_CATEGORY_SHIFT) |
			wimp_ERROR_BOX_OK_ICON,
			&quot;Example App&quot;, &quot;application&quot;, wimpspriteop_AREA, NULL);
}</code> 

<p>The <variable>*sprite_name</variable> parameter should point to the name of a sprite to show in the top-left of the report &ndash; this would usually be the application sprite, but as we don&rsquo;t have one of them yet, we will stick with the application sprite from the Wimp&rsquo;s collection. To ensure that the sprite is taken from the Wimp Sprite Area, <variable>*area</variable> is set to <name>wimpspriteop_AREA</name> &ndash; this requires us to <code>#include &quot;oslib/wimpspriteop.h&quot;</code>. For now, we&rsquo;ll set <variable>*buttons</variable> to <name>NULL</name>.</p>

<p>A full set of the changes can be found in <reference id="dl-report-new"/>. When the application is re-compiled and run, a <mouse>Select</mouse> click on its iconbar icon will produce the information report seen in <reference id="fig-report-box-new"/>.</p>

<image id="fig-report-box-new" file="report-box-new.png" title="Using an Information report to say &ldquo;hello&rdquo;"/>

<download id="dl-report-new" file="NewReportBox" title="Using the &lsquo;New&rsquo; Report Facilities" compatibility="none"/>

<p>Aside from the new graphics, the other change that has resulted from setting the <name>wimp_ERROR_BOX_GIVEN_CATEGORY</name> flag is that the <icon>OK</icon> has changed to read <icon>Continue</icon>. Presumably Acorn considered this to be more positive than <icon>OK</icon> when things might have been going wrong!</p>
</section>

<section>
<title>Clearer options</title>

<p>There&rsquo;s one more thing that we can change using the new report API: we can add to &ndash; or even completely replace &ndash; the <icon>OK</icon> and <icon>Cancel</icon> buttons in the box. This is done by setting <variable>*buttons</variable> to point to a string containing a set of one or more button labels in a comma separated list.</p>

<p>To implement this, we&rsquo;ll update <function>repbox_message()</function> again to allow a set of button labels to be supplied by the caller:</p>

<code lang="c">void repbox_message(char *message, char *buttons)
{
	os_error error;

	error.errnum = 255;
	strncpy(error.errmess, message, os_ERROR_LIMIT);
	error.errmess[os_ERROR_LIMIT - 1] = '\0';

	wimp_report_error_by_category(&amp;error, wimp_ERROR_BOX_GIVEN_CATEGORY  |
			(wimp_ERROR_BOX_CATEGORY_INFO &lt;&lt; wimp_ERROR_BOX_CATEGORY_SHIFT) |
			wimp_ERROR_BOX_OK_ICON,
			&quot;Example App&quot;, &quot;application&quot;, wimpspriteop_AREA, buttons);
}</code> 

<p>Remember to change the prototype in <file>h.repbox</file> as well as the function itself in <file>c.repbox</file>! We can now change the call made to <function>repbox_message()</function> in <file>c.ibar</file> to include this additional <variable>*buttons</variable> parameter. It could be set to <name>NULL</name> to retain the existing behaviour, or we could add some new buttons which respond to our application&rsquo;s greeting:</p>

<code lang="c">repbox_message(&quot;Hello World!&quot;, &quot;Howdy!,Go Away!&quot;);</code>

<p>If these changes are compiled and run, clicking <mouse>Select</mouse> on our iconbar icon should result in the report shown in <reference id="fig-report-box-new-buttons"/>.</p>

<image id="fig-report-box-new-buttons" file="report-box-new-buttons.png" title="It&rsquo;s possible to add custom buttons to reports"/>

<p>The <icon>Continue</icon> button is still there on the right, because <name>wimp_ERROR_BOX_OK_ICON</name> is still being set in <variable>flags</variable>. If we remove it, so that the call to <function>wimp_report_error_by_category()</function> looks like this:</p>

<code lang="c">wimp_report_error_by_category(&amp;error, wimp_ERROR_BOX_GIVEN_CATEGORY  |
		(wimp_ERROR_BOX_CATEGORY_INFO &lt;&lt; wimp_ERROR_BOX_CATEGORY_SHIFT),
		&quot;Example App&quot;, &quot;application&quot;, wimpspriteop_AREA, buttons);</code> 

<p>then only our &lsquo;custom&rsquo; buttons will be shown to the user &ndash; as can be seen in <reference id="fig-report-box-new-custom"/>. A complete set of code can be found in <reference id="dl-report-buttons"/> below.</p>

<image id="fig-report-box-new-custom" file="report-box-new-custom.png" title="We don&rsquo;t even need to include the default buttons"/>

<p>It should be clear that the report system is fairly flexible, and the fact that the Wimp sorts out all of the formatting for us makes it easy to use. There are some limitations to the additional buttons, though: although the Wimp will extend the report box horizontally to accommodate a large number of buttons, this can quickly fill a small screen and should be used with caution. That said, if you need to ask a question with more than a &ldquo;Yes, No or Cancel&rdquo; kind of answer, then a report box probably isn&rsquo;t going to be the correct way to do it &ndash; you should be thinking about a proper dialogue box, once you know how to do that!</p>

<p>Something that we&rsquo;ve not considered yet is the question of which button was chosen by the user if there was more than one available: if we&rsquo;re going to the length of asking the user a question, being able to identify how they responded would be useful. We&rsquo;ll look at that soon, after we&rsquo;ve added another debug tool to our armoury in the <reference id="chap-debug">next chapter</reference>.</p>

<download id="dl-report-buttons" file="ReportButtons" title="Setting custom buttons in a report" compatibility="none"/>
</section>
</chapter>
</manual>


<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../wimp.dtd">

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 22
   -
   - The Missing Menus
  -->

<chapter id="chap-menus-intro">
<resources>
<images>Chapter22</images>
<downloads>Chapter22</downloads>
</resources>
<filename>menus-intro.html</filename>
<title>The Missing Menus</title>

<summary>With windows and icons introduced, now we can take a look at the third part of the RISC&nbsp;OS desktop.</summary>

<section>
<p>So far, we&rsquo;ve looked at windows and icons in some detail, but have avoided the other main aspect of the RISC&nbsp;OS desktop. Menus are a central part of the way that a user interacts with the system, and an example can be seen in <reference id="fig-menus-intro-menus"/>.</p>

<image id="fig-menus-intro-menus" file="menus-intro-menus.png" title="The main menu in Zap is a good example of the genre"/>

<p>The implementation of menus in RISC&nbsp;OS has always seemed a little odd compared to the rest of the Wimp: there is almost a feeling of &lsquo;afterthought&rsquo; about them, with many fairly fundamental aspects left up to the application developer. This may well account for the number of third-party libraries which have appeared over the years to help support the use of menus, not to mention Acorn&rsquo;s Toolbox &ndash; and SFLib is no exception.</p>

<p>Whilst this tutorial covers the use of SFLib, at least part of its intention is to detail the underlying functionality of the Wimp. For this reason, we will start by putting together our own menu implementation using just the tools that Wimp gives us. Once we have understood things work, we will then be ready to go back and see what SFLib can do to help.</p>
</section>

<section>
<title>Menu definitions</title>

<p>Just as with windows and icons, which we started to cover in <reference id="chap-window-theory"/>, menus are created from blocks of memory. It might be worth going back to refresh your memory of the <name>wimp_window</name> structure if necessary, because it shares a few similarities with <name>wimp_menu</name>. OSLib defines this new structure, and its child <name>wimp_menu_entry</name>, as follows:</p>

<code lang="c">struct wimp_menu {
	union {
		char		text[12];
		struct {
			char	*text;
			byte	reserved[8];
		} indirected_text;
	} title_data;
	wimp_colour		title_fg;
	wimp_colour		title_bg;
	wimp_colour		work_fg;
	wimp_colour		work_bg;
	int			width;
	int			height;
	int			gap;
	wimp_menu_entry		entries[UNKNOWN];
};

struct wimp_menu_entry {
	wimp_menu_flags		menu_flags;
	wimp_menu		*sub_menu;
	wimp_icon_flags		icon_flags;
	wimp_icon_data		data;
};</code>

<p>In a similar way to the <name>wimp_window</name> structure, <name>wimp_menu</name> consists of a menu header followed by an array of <name>wimp_menu_entry</name> structures. Once again, OSLib defines the size of this array to be <name>UNKNOWN</name>, which actually turns out to be &ldquo;1&rdquo; &ndash; as we saw in <reference id="chap-window-theory"/>, this was a way to make flexible arrays work within the confines of the C90 standard.</p>

<p>This causes us a problem, though. With windows, the ability to add icons using the <swi>Wimp_CreateIcon</swi> SWI enabled us to ignore the array of icon definitions at the end of the <name>wimp_window</name> structure until we were ready to load the contents in from a template file. This made it possible to define a variable of the <name>wimp_window</name> type and simply ignore the single icon definition that was included at the end of the array.</p>

<p>With menus, there&rsquo;s no equivalent Wimp routine for adding entries to a definition &ndash; which means that we&rsquo;re going to need to allocate enough memory to hold both the header and all of the entries that our menu will contain. There are a few ways to achieve this, but probably the easiest is to use <function>malloc()</function> for claiming the space that we need.</p>

<p>To do this, we will define a new <function>menu_create()</function> function. There is going to be a fair bit of new code related to menus, so we will add a new <file>c.menu</file> source file and the corresponding <file>h.menu</file> header to keep it all together.</p>

<code lang="c">wimp_menu *menu_create(char *title, int entries)
{
	wimp_menu	*menu = NULL;
	wimp_menu_entry	*entry = NULL;
	char		*buffer = NULL;
	int		len, size;

	/* A menu must have one entry. */

	if (entries &lt; 1)
		return NULL;

	/* Allocate the menu definition block. */

	size = wimp_SIZEOF_MENU(entries);

	menu = malloc(size);
	if (menu == NULL)
		return NULL;

	/* Set up the menu title. */

	len = strlen(title);
	if (len &gt; 12)
		buffer = malloc(len + 1);

	if (buffer != NULL) {
		strncpy(buffer, title, len);
		buffer[len] = '\0';
		menu-&gt;title_data.indirected_text.text = buffer;
	} else {
		strncpy(menu-&gt;title_data.text, title, 12);
	}

	/* Set up the remainder of the menu header. */

	menu-&gt;title_fg = wimp_COLOUR_BLACK;
	menu-&gt;title_bg = wimp_COLOUR_LIGHT_GREY;
	menu-&gt;work_fg = wimp_COLOUR_BLACK;
	menu-&gt;work_bg = wimp_COLOUR_WHITE;
	menu-&gt;width = 16;
	menu-&gt;height = wimp_MENU_ITEM_HEIGHT;
	menu-&gt;gap = wimp_MENU_ITEM_GAP;

	/* Initialise the menu entries. */

	entry = menu-&gt;entries;

	while (entries-- &gt; 0) {
		entry-&gt;menu_flags = (entries &gt; 0) ? 0 : wimp_MENU_LAST;
		entry-&gt;sub_menu = NULL;
		entry-&gt;icon_flags = wimp_ICON_TEXT | wimp_ICON_FILLED |
				(wimp_COLOUR_BLACK &lt;&lt; wimp_ICON_FG_COLOUR_SHIFT) |
				(wimp_COLOUR_WHITE &lt;&lt; wimp_ICON_BG_COLOUR_SHIFT);
		strncpy(entry-&gt;data.text, &quot;&quot;, 12);

		entry++;
	}

	/* Set the title indirection flag. */

	if (buffer != NULL)
		menu-&gt;entries[0].menu_flags |= wimp_MENU_TITLE_INDIRECTED;

	return menu;
}
</code>

<p>The function takes two parameters: a pointer to a string holding the required menu title, and the number of entries that the menu will contain. It will return either a pointer to a new <name>wimp_menu</name> structure, or <name>NULL</name> on failure. Menus must contain at least one entry, so the function simply returns <name>NULL</name> if this is not the case.</p>

<p>Next, we allocate the block for the menu, using <function>malloc()</function>. OSLib provides a <name>wimp_SIZEOF_MENU()</name> macro which we can use to calculate the number of bytes required, but we do need to include the standard <file>stddef.h</file> header for this to work. If the memory allocation fails, the function again returns <name>NULL</name> to indicate this.</p>

<p>There are 12 bytes of the menu header allocated to the menu title, and these behave very much like the 12 bytes of icon data in an icon definition. If the menu title is longer than 12 characters (remembering that the Wimp doesn&rsquo;t require titles to be terminated if they are exactly 12 characters long), then a buffer is allocated, the name copied in and the buffer address inserted into the menu header. If the menu title will fit into the 12 bytes, or if the buffer allocation failed, then the text is copied in directly.</p>

<p>The remainder of the header consists of the four colours to be used for the menu title and work area, plus the width of the menu, the height of a menu item, and the gap between menu items (all in OS&nbsp;units). There is very little flexibility with these values, since the <cite>Style Guide</cite> reasonably requires that all menus should look the same. The colours should always be as shown, and the dimensions should always be the ones defined in the OSLib constants.</p>

<code lang="c">#define wimp_MENU_ITEM_HEIGHT		(44)
#define wimp_MENU_ITEM_GAP		(0)
#define wimp_MENU_ITEM_SEPARATION	(24)</code>

<p>The <name>wimp_MENU_ITEM_SEPARATION</name> constant included here for completeness is the height of a dashed separator between menu items; it can&rsquo;t actually be changed, but the value can be useful when calculating menu heights. The width of the menu is set to 16 OS&nbsp;units for now; this will be updated as the menu entries are added, to take account of the length of their text.</p>

<p>With the header set up, we can move on to initialise the menu entries. Each entry consists of 24 bytes, as defined above: a set of menu item flags, a submenu pointer, then a set of icon flags and a standard <name>wimp_icon_data</name> block. The menu flags affect the behaviour of the menu entry, and are defined as follows:</p>

<code lang="c">#define wimp_MENU_TICKED		((wimp_menu_flags) 0x1u)
#define wimp_MENU_SEPARATE		((wimp_menu_flags) 0x2u)
#define wimp_MENU_WRITABLE		((wimp_menu_flags) 0x4u)
#define wimp_MENU_GIVE_WARNING		((wimp_menu_flags) 0x8u)
#define wimp_MENU_SUB_MENU_WHEN_SHADED	((wimp_menu_flags) 0x10u)
#define wimp_MENU_LAST			((wimp_menu_flags) 0x80u)
#define wimp_MENU_TITLE_INDIRECTED	((wimp_menu_flags) 0x100u)</code>

<p>Some of these will probably be obvious, some less so; we&rsquo;ll come back to most of them over the following chapters, but for now there are two of interest. The last entry in the menu <em>must</em> have <name>wimp_MENU_LAST</name> set, otherwise the Wimp will not be able to find the end of the menu structure; for all other entries, the flags start unset. The submenu pointer (<variable>entry->sub_menu</variable>) should be initialised to <name>NULL</name>.</p>

<p>The remainder of the menu entry data is a subset of an icon definition, which is used by the Wimp to create the icon that forms the entry. The <name>wimp_ICON_TEXT</name> and <name>wimp_ICON_FILLED</name> flags should be set by default, and the colours should be a standard black and white. The icon data is initialised as an empty string, because the flags as supplied configure the entry to be non-indirected text icon.</p>

<p>There is one final menu flag to consider at this stage. If the menu title was made indirected above, then the <name>wimp_MENU_TITLE_INDIRECTED</name> flag must be set in the first entry of the menu. We do this at the end of the function, after initialising all of the flags, if the <variable>buffer</variable> pointer is not <name>NULL</name>.</p>

<p>With <function>menu_create()</function> defined, we can move on to define a second function called <function>menu_entry()</function>, which will allow us to configure one of our blank menu entries.</p>

<code lang="c">void menu_entry(wimp_menu *menu, int entry, char *text, wimp_menu *sub_menu)
{
	wimp_menu_entry *definition = NULL;
	char		*buffer = NULL;
	int		len, width;

	if (menu == NULL || text == NULL)
		return;

	/* Update the menu entry definition. */

	definition = menu-&gt;entries + entry;

	/* Set up the menu text. */

	len = strlen(text);
	if (len &gt; 12)
		buffer = malloc(len + 1);

	if (buffer != NULL) {
		strncpy(buffer, text, len);
		buffer[len] = '\0';
		definition-&gt;data.indirected_text.text = text;
		definition-&gt;data.indirected_text.validation = "";
		definition-&gt;data.indirected_text.size = len + 1;
		definition-&gt;icon_flags |= wimp_ICON_INDIRECTED;
	} else {
		strncpy(definition-&gt;data.text, text, 12);
	}

	definition->sub_menu = sub_menu;

	/* Recalculate the menu width. */

	width = (16 * strlen(text)) + 16;
	if (width &gt; menu-&gt;width)
		menu-&gt;width = width;
}</code>

<p>This takes four parameters: a pointer to the <name>wimp_menu</name> structure, the index of the menu entry to be configured, a pointer to the text to be used for the entry, and a pointer to a submenu (which for now we will set to <name>NULL</name>). If either of the other two pointers are <name>NULL</name>, the function will return immediately.</p>

<p>Using very similar logic to <function>menu_create()</function>, the title length is checked and a buffer allocated if it will need to be indirected. This time, we are dealing with  standard icon data &ndash; so the process of updating the <name>wimp_icon_data</name> block and setting the <name>wimp_ICON_INDIRECTED</name> flag should be familiar from earlier chapters.</p>

<p>We then update the menu width, which was initialised in <function>menu_create()</function> to be 16 OS&nbsp;units. Since outline fonts arrived on the desktop in RISC&nbsp;OS&nbsp;3.5, the Wimp has ignored the <variable>width</variable> field and automatically calculated menu widths based on the size of the entries in the current desktop font. This means that the width is being calculated for users of RISC&nbsp;OS&nbsp;3.1 &ndash; it is in terms of the old system font, where characters were 16 OS&nbsp;units wide on the desktop.</p>
</section>

<section>
<title>An iconbar menu</title>

<p>Now that we have a means to create menus in our application, we can add something that has been missing since the start of this tutorial: an iconbar menu. Opening the <file>c.ibar</file> source file, we can <code>#include</code> <file>menu.h</file> and add a global variable to the top of the file:</p>

<code lang="c">/* Global Variables. */

static wimp_menu *ibar_menu;</code>

<p>You might already have noticed a difference from the way that we implemented our window in <file>c.win</file>. There, the <name>wimp_window</name> structure was only needed for long enough that it could be passed to <swi>Wimp_CreateWindow</swi>; at that point, we got a <name>wimp_w</name> window handle back, and the full <name>wimp_window</name> structure could be discarded. This meant that the global variable used to keep track of the window had the type <name>wimp_w</name>.</p>

<p>In contrast, menus have no such handle allocated to them by the Wimp. Unlike its window counterpart, the <swi>Wimp_CreateMenu</swi> SWI takes a <name>wimp_menu</name> block, creates a menu and displays it on screen in one operation. Whereas the <name>wimp_w</name> value returned by <swi>Wimp_CreateWindow</swi> is the window handle, if there is anything known as a &ldquo;menu handle&rdquo;, it is the pointer to the <name>wimp_menu</name> structure.</p>

<p>With the global variable in place, we can add a few lines to the <function>ibar_initialise()</function> function as follows:</p>

<code lang="c">/* Iconbar Menu. */

ibar_menu = menu_create(&quot;Example&quot;, 2);
if (ibar_menu == NULL) {
	error_report_error(&quot;Failed to create Iconbar Menu&quot;);
	return;
}

menu_entry(ibar_menu, 0, &quot;Info&quot;, NULL);
menu_entry(ibar_menu, 1, &quot;Help&quot;, NULL);
menu_entry(ibar_menu, 2, &quot;Quit&quot;, NULL);</code>

<p>The <function>menu_create()</function> function is called to allocate the memory required for the menu and set up the menu structure; if it fails, the initialisation ends. Next, <function>menu_entry()</function> is called three times to create the standard iconbar menu of a simple application.</p>

<p>After all this, getting the menu on to screen is quite simple, and involves a small change to the <function>ibar_mouse_click()</function> event handler:</p>

<code lang="c">static void ibar_mouse_click(wimp_pointer *pointer)
{
	switch (pointer-&gt;buttons) {
	case wimp_CLICK_SELECT:
		win_open();
		break;
	case wimp_CLICK_MENU:
		wimp_create_menu(ibar_menu, pointer-&gt;pos.x - 64, 228);
		break;
	case wimp_CLICK_ADJUST:
		main_quit_flag = TRUE;
		break;
	}
}</code>

<p>If the click was with the <mouse>Menu</mouse> button, then <swi>Wimp_CreateMenu</swi> is called to display the menu on screen. OSLib defines the SWI as follows:</p>

<code lang="c">extern void wimp_create_menu(
	wimp_menu *menu,
	int x,
	int y
);</code>

<p>It takes three functions: a pointer to the <name>wimp_menu</name> structure holding the menu to be shown, and the <maths>x</maths> and <maths>y</maths> coordinates of the top-left corner of the menu (excluding the title bar), in OS&nbsp;units.</p>

<p>The coordinates are interesting, as we seem to have used some magic numbers. The <maths>x</maths> position is derived from the requirement that menus always open 64 OS&nbsp;units to the left of the point where the mouse click was recorded, which arrived in the click event data as <variable>pointer-&gt;pos.x</variable>. The <maths>y</maths> position comes from the requirement that all iconbar menus open with the <em>bottom</em> edge 96 OS&nbsp;units from the base of the screen. In our case, this is</p>

<code lang="c">y_pos = 96 + (3 * (wimp_MENU_ITEM_HEIGHT + wimp_MENU_ITEM_GAP)) + (0 * wimp_MENU_ITEM_SEPARATION);</code>

<p>where <name>wimp_MENU_ITEM_HEIGHT</name> is 44 OS&nbsp;units, <name>wimp_MENU_ITEM_GAP</name> is 0 OS&nbsp;units and <name>wimp_MENU_ITEM_SEPARATION</name> is 24 OS&nbsp;units. Hard-coding the value is not ideal, but it will do for now!</p>

<p>If we put all of the changes together, remembering to update the <file>Makefile</file> so that <variable>OBJS</variable> includes the new <file>menu</file>, and compile them, the resulting application should respond to <mouse>Menu</mouse> clicks on the iconbar, as seen in <reference id="fig-menus-intro-ibar"/>. It&rsquo;s incomplete, and none of the entries work, but it&rsquo;s a start!</p>

<image id="fig-menus-intro-ibar" file="menus-intro-ibar.png" title="Our application finally has an iconbar menu!"/>

<p>The code as it stands can be found in <reference id="dl-menus-intro-ibar"/>.</p>

<download id="dl-menus-intro-ibar" file="IconbarMenu" title="Our First Iconbar Menu" compatibility="none"/>
</section>

<section>
<title>A program information window</title>

<p>Something that is obviously still missing from our new menu is the <window>program information</window> window, which would normally be expected to link from the <menu>Info</menu> entry at the top. Fortunately it is fairly easy to add one, so let&rsquo;s resolve the problem before moving on.</p>

<p>Load <file>!ExamplApp.Templates</file> back into a template editor (we will be using <cite>WinEd</cite> again for the following description), and create a new window called &ldquo;ProgInfo&rdquo;. Double-click <mouse>Select</mouse> to open it up for editing.</p>

<p>The design guidelines for a <window>program information</window> window are fairly strict, so there&rsquo;s limited room for creativity. We will need four information fields, so select the <icon>Comment</icon> and <icon>Display field</icon> from the <window>Icon picker</window> and drag them into our new window. We will also want to include a <icon>Website</icon> button to allow the user to visit our web page for more details, so drag the <icon>Cancel</icon> button over from the <window>Icon picker</window>.</p>

<p>All of the icons have the correct configurations, so it is just the text which needs to be changed in each case. With the title set and the visible area adjusted, the result should be similar to that shown in <reference id="fig-menus-intro-proginfo-templ"/>.</p>

<image id="fig-menus-intro-proginfo-templ" file="menus-intro-proginfo-templ.png" title="A template for the program information window"/>

<p>Before closing the window, we need to make some changes to its design details: as a dialogue box linked to a menu, there are some specific requirements that we must meet. Click <mouse>Menu</mouse> over the window and choose <menu>Edit window...</menu> to open the <window>Edit window</window> dialogue.</p>

<p>As we saw back in <reference id="sect-window-theory-appearance"/>, we can turn off parts of the window furniture that we don&rsquo;t want on our dialogue. As part of a menu, the <em>only</em> tool that we want is the title bar, so untick all of the other switches in the <icon>Tools</icon> section. Also, as a dialogue box in a menu, the title bar should never change colour to indicate input focus: we achieve this by changing the <icon>Input focus</icon> colour from 12 to 2 (which is the same as the default <icon>Title B.</icon> colour).</p>

<p>With the options as shown in <reference id="fig-menus-intro-proginfo-edit"/>, click on <icon>Update</icon> to store the changes.</p>

<image id="fig-menus-intro-proginfo-edit" file="menus-intro-proginfo-edit.png" title="The program info window settings"/>

<p>Note that, at least in <cite>WinEd</cite>, not much will appear to change because windows retain all of their tools in edit mode. Click <mouse>Menu</mouse> over the window and choose <menu>Preview window</menu> to open it in preview mode, and it should appear as it will when we load it into our application &ndash; hopefully something like that seen in <reference id="fig-menus-intro-proginfo-preview"/>. <mouse>Menu</mouse> over the preview will allow the window to be closed or returned to edit mode again.</p>

<image id="fig-menus-intro-proginfo-preview" file="menus-intro-proginfo-preview.png" title="Previewing the program info window in WinEd"/>

<p>With the new window design complete, remember to save the changes to the template file.</p>

<p>Making use of the new window template is fairly simple, and requires few additions. We are already opening the window templates while the application initialises, so the file is open when <function>ibar_initialise()</function> is called. We can therefore add the following addition lines to that function, before the menu is set up:</p>

<code lang="c">/* Program Info Window. */

window_definition = windows_load_template(&quot;ProgInfo&quot;);
if (window_definition == NULL) {
	error_report_error(&quot;Failed to load ProgInfo template&quot;);
	return;
}

prog_info = wimp_create_window(window_definition);
free(window_definition);</code>

<p>If this looks familiar, that&rsquo;s because it is the same code that we used in <reference id="sect-templates-create-win"/> to create the main window template in <function>win_initialise()</function>.</p>

<p>All that the Wimp requires to link a dialogue box into a menu structure is for us to store the <name>wimp_w</name> handle for the chosen window in the <variable>sub_menu</variable> field of the appropriate <name>wimp_menu_entry</name>. Now that we have the window handle for the <window>program information</window> window in <variable>prog_info</variable>, we can update the call to <function>menu_entry()</function> which creates the <menu>Info</menu> entry:</p>

<code lang="c">menu_entry(ibar_menu, 0, &quot;Info&quot;, (wimp_menu *) prog_info);</code>

<p>It is necessary to cast the <name>wimp_w</name> to a pointer to a <name>wimp_menu</name>, but that is what the Wimp expects. The full code can be found in <reference id="dl-menus-intro-proginfo"/>, and the result can be seen in <reference id="fig-menus-intro-proginfo"/>.</p>

<image id="fig-menus-intro-proginfo" file="menus-intro-proginfo.png" title="The program info window is finally included, too!"/>

<download id="dl-menus-intro-proginfo" file="ProgInfoWindow" title="Adding a Program Info Window" compatibility="none"/>
</section>

<section>
<title>A website link</title>

<p>Before moving on to make our menu respond to the user, we should probably make the <icon>Website</icon> button do something useful. First, we will need to define a constant to hold the icon handle of the <icon>Website</icon> button in the <window>program information</window>. As the templates are defined in the downloads here, this is:</p>

<code lang="c">/* Program Info Window Icons. */

#define IBAR_PROGINFO_ICON_WEB 8</code>

<p>We next need a <name>Mouse Click</name> event handler, but we will define a slightly different one from those that we have seen before.</p>

<code lang="c">static osbool ibar_proginfo_web_click(wimp_pointer *pointer)
{
	url_launch(&quot;http://www.stevefryatt.org.uk/docs/wimp/&quot;);

	if (pointer->buttons == wimp_CLICK_SELECT)
		wimp_create_menu((wimp_menu *) -1, 0, 0);

	return TRUE;
}</code>

<p>Launching URLs is too large a topic for this quick aside, but SFLib&rsquo;s URL library, which we can use if we include <file>sflib/url.h</file>, contains a useful <function>url_launch()</function> function which does exactly what it says. If we pass it a URL, such as the one for this tutorial, it will try the various methods of launching URLs on RISC&nbsp;OS until either a browser responds or it runs out of options.</p>

<p>If the user clicks <mouse>Select</mouse> on our <icon>Website</icon> button, they might reasonably expect the dialogue box and menu to close, so we test for the button being <name>wimp_CLICK_SELECT</name> and call <swi>Wimp_CreateMenu</swi> with a pointer of &minus;1 to request that the Wimp closes the currently open menu structure.</p>

<p>The final thing that we do is to return <name>TRUE</name>, to indicate that we have handed this event successfully. The reason for this divergence from every other event handler that we have used up to this point is that we will be attaching this handler to the <icon>Website</icon> icon, and not the <window>program information</window> window &ndash; as there is no other user interaction in the window, we can leave the event library to test the icon handles for us.</p>

<p>The event dispatch passes events to icon-level handlers first, before moving on to the window-level handlers that we have used up to now (includeing <function>ibar_mouse_click()</function>, which handles clicks on the iconbar). If an icon-level hander returns <name>TRUE</name>, as we do here, it tells the event library that it has fully handled the event: the event will <em>not</em> be seen by any window-level handler which might be registered. In fact, this is equivalent to the method for handling <mouse>Adjust</mouse> clicks on radio icons that we saw in <reference id="sect-icons-radio-sflib"/>.</p>

<p>All that remains now is to register the handler, which we do in <function>ibar_initialise()</function> using the line:</p>

<code lang="c">event_add_window_icon_click(prog_info, IBAR_PROGINFO_ICON_WEB, ibar_proginfo_web_click);</code>

<p>This can be compared to the existing call to register the window-level handler for the iconbar:</p>

<code lang="c">event_add_window_mouse_event(wimp_ICON_BAR, ibar_mouse_click);</code>

<p>The code for these changes can be found in <reference id="dl-menus-intro-website"/>.</p>

<download id="dl-menus-intro-website" file="WebsiteLink" title="Making the Website Button Work" compatibility="none"/>

</section>
</chapter>
</manual>
